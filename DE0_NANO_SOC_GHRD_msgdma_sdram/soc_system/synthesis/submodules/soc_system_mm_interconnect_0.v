// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0]  hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]   hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0]  hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire         clk_50_clk_clk,                                                   //                                                 clk_50_clk.clk
		input  wire         pll_0_outclk2_clk,                                                //                                              pll_0_outclk2.clk
		input  wire         fpga_only_master_clk_reset_reset_bridge_in_reset_reset,           //           fpga_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset,       //       i2c_opencores_mipi_clock_reset_reset_bridge_in_reset.reset
		input  wire         msgdma_0_reset_n_reset_bridge_in_reset_reset,                     //                     msgdma_0_reset_n_reset_bridge_in_reset.reset
		input  wire         onchip_memory2_0_reset1_reset_bridge_in_reset_reset,              //              onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire [19:0]  dma_0_read_master_address,                                        //                                          dma_0_read_master.address
		output wire         dma_0_read_master_waitrequest,                                    //                                                           .waitrequest
		input  wire         dma_0_read_master_chipselect,                                     //                                                           .chipselect
		input  wire         dma_0_read_master_read,                                           //                                                           .read
		output wire [31:0]  dma_0_read_master_readdata,                                       //                                                           .readdata
		output wire         dma_0_read_master_readdatavalid,                                  //                                                           .readdatavalid
		input  wire [19:0]  dma_0_write_master_address,                                       //                                         dma_0_write_master.address
		output wire         dma_0_write_master_waitrequest,                                   //                                                           .waitrequest
		input  wire [3:0]   dma_0_write_master_byteenable,                                    //                                                           .byteenable
		input  wire         dma_0_write_master_chipselect,                                    //                                                           .chipselect
		input  wire         dma_0_write_master_write,                                         //                                                           .write
		input  wire [31:0]  dma_0_write_master_writedata,                                     //                                                           .writedata
		input  wire [31:0]  fpga_only_master_master_address,                                  //                                    fpga_only_master_master.address
		output wire         fpga_only_master_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]   fpga_only_master_master_byteenable,                               //                                                           .byteenable
		input  wire         fpga_only_master_master_read,                                     //                                                           .read
		output wire [31:0]  fpga_only_master_master_readdata,                                 //                                                           .readdata
		output wire         fpga_only_master_master_readdatavalid,                            //                                                           .readdatavalid
		input  wire         fpga_only_master_master_write,                                    //                                                           .write
		input  wire [31:0]  fpga_only_master_master_writedata,                                //                                                           .writedata
		input  wire [19:0]  msgdma_0_mm_write_address,                                        //                                          msgdma_0_mm_write.address
		output wire         msgdma_0_mm_write_waitrequest,                                    //                                                           .waitrequest
		input  wire         msgdma_0_mm_write_write,                                          //                                                           .write
		input  wire [7:0]   msgdma_0_mm_write_writedata,                                      //                                                           .writedata
		output wire [1:0]   button_pio_s1_address,                                            //                                              button_pio_s1.address
		output wire         button_pio_s1_write,                                              //                                                           .write
		input  wire [31:0]  button_pio_s1_readdata,                                           //                                                           .readdata
		output wire [31:0]  button_pio_s1_writedata,                                          //                                                           .writedata
		output wire         button_pio_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]   dipsw_pio_s1_address,                                             //                                               dipsw_pio_s1.address
		output wire         dipsw_pio_s1_write,                                               //                                                           .write
		input  wire [31:0]  dipsw_pio_s1_readdata,                                            //                                                           .readdata
		output wire [31:0]  dipsw_pio_s1_writedata,                                           //                                                           .writedata
		output wire         dipsw_pio_s1_chipselect,                                          //                                                           .chipselect
		output wire [2:0]   dma_0_control_port_slave_address,                                 //                                   dma_0_control_port_slave.address
		output wire         dma_0_control_port_slave_write,                                   //                                                           .write
		input  wire [19:0]  dma_0_control_port_slave_readdata,                                //                                                           .readdata
		output wire [19:0]  dma_0_control_port_slave_writedata,                               //                                                           .writedata
		output wire         dma_0_control_port_slave_chipselect,                              //                                                           .chipselect
		output wire [2:0]   i2c_opencores_camera_avalon_slave_0_address,                      //                        i2c_opencores_camera_avalon_slave_0.address
		output wire         i2c_opencores_camera_avalon_slave_0_write,                        //                                                           .write
		input  wire [7:0]   i2c_opencores_camera_avalon_slave_0_readdata,                     //                                                           .readdata
		output wire [7:0]   i2c_opencores_camera_avalon_slave_0_writedata,                    //                                                           .writedata
		input  wire         i2c_opencores_camera_avalon_slave_0_waitrequest,                  //                                                           .waitrequest
		output wire         i2c_opencores_camera_avalon_slave_0_chipselect,                   //                                                           .chipselect
		output wire [2:0]   i2c_opencores_mipi_avalon_slave_0_address,                        //                          i2c_opencores_mipi_avalon_slave_0.address
		output wire         i2c_opencores_mipi_avalon_slave_0_write,                          //                                                           .write
		input  wire [7:0]   i2c_opencores_mipi_avalon_slave_0_readdata,                       //                                                           .readdata
		output wire [7:0]   i2c_opencores_mipi_avalon_slave_0_writedata,                      //                                                           .writedata
		input  wire         i2c_opencores_mipi_avalon_slave_0_waitrequest,                    //                                                           .waitrequest
		output wire         i2c_opencores_mipi_avalon_slave_0_chipselect,                     //                                                           .chipselect
		output wire [0:0]   intr_capturer_0_avalon_slave_0_address,                           //                             intr_capturer_0_avalon_slave_0.address
		output wire         intr_capturer_0_avalon_slave_0_read,                              //                                                           .read
		input  wire [31:0]  intr_capturer_0_avalon_slave_0_readdata,                          //                                                           .readdata
		output wire [0:0]   jtag_uart_avalon_jtag_slave_address,                              //                                jtag_uart_avalon_jtag_slave.address
		output wire         jtag_uart_avalon_jtag_slave_write,                                //                                                           .write
		output wire         jtag_uart_avalon_jtag_slave_read,                                 //                                                           .read
		input  wire [31:0]  jtag_uart_avalon_jtag_slave_readdata,                             //                                                           .readdata
		output wire [31:0]  jtag_uart_avalon_jtag_slave_writedata,                            //                                                           .writedata
		input  wire         jtag_uart_avalon_jtag_slave_waitrequest,                          //                                                           .waitrequest
		output wire         jtag_uart_avalon_jtag_slave_chipselect,                           //                                                           .chipselect
		output wire [1:0]   led_pio_s1_address,                                               //                                                 led_pio_s1.address
		output wire         led_pio_s1_write,                                                 //                                                           .write
		input  wire [31:0]  led_pio_s1_readdata,                                              //                                                           .readdata
		output wire [31:0]  led_pio_s1_writedata,                                             //                                                           .writedata
		output wire         led_pio_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]   mipi_pwdn_n_s1_address,                                           //                                             mipi_pwdn_n_s1.address
		output wire         mipi_pwdn_n_s1_write,                                             //                                                           .write
		input  wire [31:0]  mipi_pwdn_n_s1_readdata,                                          //                                                           .readdata
		output wire [31:0]  mipi_pwdn_n_s1_writedata,                                         //                                                           .writedata
		output wire         mipi_pwdn_n_s1_chipselect,                                        //                                                           .chipselect
		output wire [1:0]   mipi_reset_n_s1_address,                                          //                                            mipi_reset_n_s1.address
		output wire         mipi_reset_n_s1_write,                                            //                                                           .write
		input  wire [31:0]  mipi_reset_n_s1_readdata,                                         //                                                           .readdata
		output wire [31:0]  mipi_reset_n_s1_writedata,                                        //                                                           .writedata
		output wire         mipi_reset_n_s1_chipselect,                                       //                                                           .chipselect
		output wire [2:0]   msgdma_0_csr_address,                                             //                                               msgdma_0_csr.address
		output wire         msgdma_0_csr_write,                                               //                                                           .write
		output wire         msgdma_0_csr_read,                                                //                                                           .read
		input  wire [31:0]  msgdma_0_csr_readdata,                                            //                                                           .readdata
		output wire [31:0]  msgdma_0_csr_writedata,                                           //                                                           .writedata
		output wire [3:0]   msgdma_0_csr_byteenable,                                          //                                                           .byteenable
		output wire         msgdma_0_descriptor_slave_write,                                  //                                  msgdma_0_descriptor_slave.write
		output wire [127:0] msgdma_0_descriptor_slave_writedata,                              //                                                           .writedata
		output wire [15:0]  msgdma_0_descriptor_slave_byteenable,                             //                                                           .byteenable
		input  wire         msgdma_0_descriptor_slave_waitrequest,                            //                                                           .waitrequest
		output wire [15:0]  onchip_s1_address,                                                //                                                  onchip_s1.address
		output wire         onchip_s1_write,                                                  //                                                           .write
		input  wire [31:0]  onchip_s1_readdata,                                               //                                                           .readdata
		output wire [31:0]  onchip_s1_writedata,                                              //                                                           .writedata
		output wire [3:0]   onchip_s1_byteenable,                                             //                                                           .byteenable
		output wire         onchip_s1_chipselect,                                             //                                                           .chipselect
		output wire         onchip_s1_clken,                                                  //                                                           .clken
		output wire [8:0]   onchip_memory2_0_s1_address,                                      //                                        onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                                        //                                                           .write
		input  wire [63:0]  onchip_memory2_0_s1_readdata,                                     //                                                           .readdata
		output wire [63:0]  onchip_memory2_0_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]   onchip_memory2_0_s1_byteenable,                                   //                                                           .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                                   //                                                           .chipselect
		output wire         onchip_memory2_0_s1_clken,                                        //                                                           .clken
		output wire [0:0]   sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata,                                //                                                           .readdata
		output wire [2:0]   TERASIC_AUTO_FOCUS_0_mm_ctrl_address,                             //                               TERASIC_AUTO_FOCUS_0_mm_ctrl.address
		output wire         TERASIC_AUTO_FOCUS_0_mm_ctrl_write,                               //                                                           .write
		output wire         TERASIC_AUTO_FOCUS_0_mm_ctrl_read,                                //                                                           .read
		input  wire [31:0]  TERASIC_AUTO_FOCUS_0_mm_ctrl_readdata,                            //                                                           .readdata
		output wire [31:0]  TERASIC_AUTO_FOCUS_0_mm_ctrl_writedata,                           //                                                           .writedata
		output wire         TERASIC_AUTO_FOCUS_0_mm_ctrl_chipselect,                          //                                                           .chipselect
		output wire [2:0]   timer_s1_address,                                                 //                                                   timer_s1.address
		output wire         timer_s1_write,                                                   //                                                           .write
		input  wire [15:0]  timer_s1_readdata,                                                //                                                           .readdata
		output wire [15:0]  timer_s1_writedata,                                               //                                                           .writedata
		output wire         timer_s1_chipselect                                               //                                                           .chipselect
	);

	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [169:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                                           // hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire   [16:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                                       // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [169:0] rsp_mux_001_src_data;                                                                        // rsp_mux_001:src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                                       // hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire   [16:0] rsp_mux_001_src_channel;                                                                     // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                               // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                 // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;                    // fpga_only_master_master_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;                       // fpga_only_master_master_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;                    // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_agent:av_debugaccess
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;                        // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;                           // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_agent:av_read
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;                     // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid;                  // fpga_only_master_master_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;                           // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;                          // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_agent:av_write
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;                      // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_agent:av_writedata
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;                     // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_agent:av_burstcount
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest;                          // msgdma_0_mm_write_agent:av_waitrequest -> msgdma_0_mm_write_translator:uav_waitrequest
	wire    [7:0] msgdma_0_mm_write_translator_avalon_universal_master_0_readdata;                             // msgdma_0_mm_write_agent:av_readdata -> msgdma_0_mm_write_translator:uav_readdata
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess;                          // msgdma_0_mm_write_translator:uav_debugaccess -> msgdma_0_mm_write_agent:av_debugaccess
	wire   [31:0] msgdma_0_mm_write_translator_avalon_universal_master_0_address;                              // msgdma_0_mm_write_translator:uav_address -> msgdma_0_mm_write_agent:av_address
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_read;                                 // msgdma_0_mm_write_translator:uav_read -> msgdma_0_mm_write_agent:av_read
	wire    [0:0] msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable;                           // msgdma_0_mm_write_translator:uav_byteenable -> msgdma_0_mm_write_agent:av_byteenable
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid;                        // msgdma_0_mm_write_agent:av_readdatavalid -> msgdma_0_mm_write_translator:uav_readdatavalid
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_lock;                                 // msgdma_0_mm_write_translator:uav_lock -> msgdma_0_mm_write_agent:av_lock
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_write;                                // msgdma_0_mm_write_translator:uav_write -> msgdma_0_mm_write_agent:av_write
	wire    [7:0] msgdma_0_mm_write_translator_avalon_universal_master_0_writedata;                            // msgdma_0_mm_write_translator:uav_writedata -> msgdma_0_mm_write_agent:av_writedata
	wire    [0:0] msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount;                           // msgdma_0_mm_write_translator:uav_burstcount -> msgdma_0_mm_write_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                       // rsp_mux_005:src_valid -> msgdma_0_mm_write_agent:rp_valid
	wire  [106:0] rsp_mux_005_src_data;                                                                        // rsp_mux_005:src_data -> msgdma_0_mm_write_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                       // msgdma_0_mm_write_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [16:0] rsp_mux_005_src_channel;                                                                     // rsp_mux_005:src_channel -> msgdma_0_mm_write_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                               // rsp_mux_005:src_startofpacket -> msgdma_0_mm_write_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                 // rsp_mux_005:src_endofpacket -> msgdma_0_mm_write_agent:rp_endofpacket
	wire          dma_0_read_master_translator_avalon_universal_master_0_waitrequest;                          // dma_0_read_master_agent:av_waitrequest -> dma_0_read_master_translator:uav_waitrequest
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_readdata;                             // dma_0_read_master_agent:av_readdata -> dma_0_read_master_translator:uav_readdata
	wire          dma_0_read_master_translator_avalon_universal_master_0_debugaccess;                          // dma_0_read_master_translator:uav_debugaccess -> dma_0_read_master_agent:av_debugaccess
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_address;                              // dma_0_read_master_translator:uav_address -> dma_0_read_master_agent:av_address
	wire          dma_0_read_master_translator_avalon_universal_master_0_read;                                 // dma_0_read_master_translator:uav_read -> dma_0_read_master_agent:av_read
	wire    [3:0] dma_0_read_master_translator_avalon_universal_master_0_byteenable;                           // dma_0_read_master_translator:uav_byteenable -> dma_0_read_master_agent:av_byteenable
	wire          dma_0_read_master_translator_avalon_universal_master_0_readdatavalid;                        // dma_0_read_master_agent:av_readdatavalid -> dma_0_read_master_translator:uav_readdatavalid
	wire          dma_0_read_master_translator_avalon_universal_master_0_lock;                                 // dma_0_read_master_translator:uav_lock -> dma_0_read_master_agent:av_lock
	wire          dma_0_read_master_translator_avalon_universal_master_0_write;                                // dma_0_read_master_translator:uav_write -> dma_0_read_master_agent:av_write
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_writedata;                            // dma_0_read_master_translator:uav_writedata -> dma_0_read_master_agent:av_writedata
	wire    [2:0] dma_0_read_master_translator_avalon_universal_master_0_burstcount;                           // dma_0_read_master_translator:uav_burstcount -> dma_0_read_master_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                       // rsp_mux_006:src_valid -> dma_0_read_master_agent:rp_valid
	wire  [133:0] rsp_mux_006_src_data;                                                                        // rsp_mux_006:src_data -> dma_0_read_master_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                       // dma_0_read_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [16:0] rsp_mux_006_src_channel;                                                                     // rsp_mux_006:src_channel -> dma_0_read_master_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                               // rsp_mux_006:src_startofpacket -> dma_0_read_master_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                                 // rsp_mux_006:src_endofpacket -> dma_0_read_master_agent:rp_endofpacket
	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;                         // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire   [31:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;                            // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;                         // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire   [31:0] dma_0_write_master_translator_avalon_universal_master_0_address;                             // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;                                // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire    [3:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;                          // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid;                       // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;                                // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;                               // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire   [31:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;                           // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire    [2:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;                          // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                       // rsp_mux_007:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [133:0] rsp_mux_007_src_data;                                                                        // rsp_mux_007:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                       // dma_0_write_master_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [16:0] rsp_mux_007_src_channel;                                                                     // rsp_mux_007:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                               // rsp_mux_007:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                                 // rsp_mux_007:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire   [63:0] onchip_memory2_0_s1_agent_m0_readdata;                                                       // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                                    // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                                    // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                                        // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [7:0] onchip_memory2_0_s1_agent_m0_byteenable;                                                     // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                           // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                                  // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                           // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_0_s1_agent_m0_writedata;                                                      // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                          // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [3:0] onchip_memory2_0_s1_agent_m0_burstcount;                                                     // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                                   // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [170:0] onchip_memory2_0_s1_agent_rf_source_data;                                                    // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                                   // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                           // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                             // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                                // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [170:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                                // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                          // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                              // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                               // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                              // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                               // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                            // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                            // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                             // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                   // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                          // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                   // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                              // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                  // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                             // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                           // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [134:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                            // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                           // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                        // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [134:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                        // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                      // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                       // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                      // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_readdata;                                            // intr_capturer_0_avalon_slave_0_translator:uav_readdata -> intr_capturer_0_avalon_slave_0_agent:m0_readdata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_waitrequest;                                         // intr_capturer_0_avalon_slave_0_translator:uav_waitrequest -> intr_capturer_0_avalon_slave_0_agent:m0_waitrequest
	wire          intr_capturer_0_avalon_slave_0_agent_m0_debugaccess;                                         // intr_capturer_0_avalon_slave_0_agent:m0_debugaccess -> intr_capturer_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_address;                                             // intr_capturer_0_avalon_slave_0_agent:m0_address -> intr_capturer_0_avalon_slave_0_translator:uav_address
	wire    [3:0] intr_capturer_0_avalon_slave_0_agent_m0_byteenable;                                          // intr_capturer_0_avalon_slave_0_agent:m0_byteenable -> intr_capturer_0_avalon_slave_0_translator:uav_byteenable
	wire          intr_capturer_0_avalon_slave_0_agent_m0_read;                                                // intr_capturer_0_avalon_slave_0_agent:m0_read -> intr_capturer_0_avalon_slave_0_translator:uav_read
	wire          intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid;                                       // intr_capturer_0_avalon_slave_0_translator:uav_readdatavalid -> intr_capturer_0_avalon_slave_0_agent:m0_readdatavalid
	wire          intr_capturer_0_avalon_slave_0_agent_m0_lock;                                                // intr_capturer_0_avalon_slave_0_agent:m0_lock -> intr_capturer_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_writedata;                                           // intr_capturer_0_avalon_slave_0_agent:m0_writedata -> intr_capturer_0_avalon_slave_0_translator:uav_writedata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_write;                                               // intr_capturer_0_avalon_slave_0_agent:m0_write -> intr_capturer_0_avalon_slave_0_translator:uav_write
	wire    [2:0] intr_capturer_0_avalon_slave_0_agent_m0_burstcount;                                          // intr_capturer_0_avalon_slave_0_agent:m0_burstcount -> intr_capturer_0_avalon_slave_0_translator:uav_burstcount
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_valid;                                        // intr_capturer_0_avalon_slave_0_agent:rf_source_valid -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [134:0] intr_capturer_0_avalon_slave_0_agent_rf_source_data;                                         // intr_capturer_0_avalon_slave_0_agent:rf_source_data -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_ready;                                        // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rf_source_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket;                                // intr_capturer_0_avalon_slave_0_agent:rf_source_startofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket;                                  // intr_capturer_0_avalon_slave_0_agent:rf_source_endofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                     // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_valid -> intr_capturer_0_avalon_slave_0_agent:rf_sink_valid
	wire  [134:0] intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data;                                      // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_data -> intr_capturer_0_avalon_slave_0_agent:rf_sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                     // intr_capturer_0_avalon_slave_0_agent:rf_sink_ready -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                             // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                               // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                   // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_valid -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data;                                    // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_data -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                   // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                       // cmd_mux_002:src_valid -> intr_capturer_0_avalon_slave_0_agent:cp_valid
	wire  [133:0] cmd_mux_002_src_data;                                                                        // cmd_mux_002:src_data -> intr_capturer_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                       // intr_capturer_0_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [16:0] cmd_mux_002_src_channel;                                                                     // cmd_mux_002:src_channel -> intr_capturer_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                               // cmd_mux_002:src_startofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                 // cmd_mux_002:src_endofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                                  // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                               // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                               // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                                   // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                                // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                                      // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                             // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                                      // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                                 // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                                     // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                                // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                              // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [134:0] sysid_qsys_control_slave_agent_rf_source_data;                                               // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                              // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                                      // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                                        // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                           // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [134:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                            // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                           // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                                   // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                                     // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                         // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                          // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                         // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                                                // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                                             // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                                             // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [31:0] led_pio_s1_agent_m0_address;                                                                 // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                                              // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                                                    // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                                           // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                                                    // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                                               // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                                                   // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                                              // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                                            // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [134:0] led_pio_s1_agent_rf_source_data;                                                             // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                                            // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                                                    // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                                                      // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                                                         // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [134:0] led_pio_s1_agent_rsp_fifo_out_data;                                                          // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                                                         // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                                                 // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                                                   // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                                                       // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                                        // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent_rdata_fifo:in_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                                                       // led_pio_s1_agent_rdata_fifo:in_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                                              // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                                                           // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                                           // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [31:0] dipsw_pio_s1_agent_m0_address;                                                               // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                                            // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                                                  // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                                                         // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                                                  // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                                             // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                                                 // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                                            // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                                                          // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [134:0] dipsw_pio_s1_agent_rf_source_data;                                                           // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                                                          // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                                                  // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                                                    // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                                                       // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [134:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                                        // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                                                       // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                                               // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                                                 // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                                                     // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                                      // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent_rdata_fifo:in_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                                                     // dipsw_pio_s1_agent_rdata_fifo:in_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                                             // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                                                          // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                                                          // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [31:0] button_pio_s1_agent_m0_address;                                                              // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                                           // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                                                 // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                                                        // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                                                 // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                                            // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                                                // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                                           // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                                                         // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [134:0] button_pio_s1_agent_rf_source_data;                                                          // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                                                         // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                                                 // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                                                   // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                                                      // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [134:0] button_pio_s1_agent_rsp_fifo_out_data;                                                       // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                                                      // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                                              // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                                                // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                                                    // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                                     // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent_rdata_fifo:in_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                                                    // button_pio_s1_agent_rdata_fifo:in_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata;                                         // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdata -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdata
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest;                                      // i2c_opencores_mipi_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_mipi_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess;                                      // i2c_opencores_mipi_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_mipi_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_address;                                          // i2c_opencores_mipi_avalon_slave_0_agent:m0_address -> i2c_opencores_mipi_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable;                                       // i2c_opencores_mipi_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_mipi_avalon_slave_0_translator:uav_byteenable
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_read;                                             // i2c_opencores_mipi_avalon_slave_0_agent:m0_read -> i2c_opencores_mipi_avalon_slave_0_translator:uav_read
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid;                                    // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_lock;                                             // i2c_opencores_mipi_avalon_slave_0_agent:m0_lock -> i2c_opencores_mipi_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata;                                        // i2c_opencores_mipi_avalon_slave_0_agent:m0_writedata -> i2c_opencores_mipi_avalon_slave_0_translator:uav_writedata
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_write;                                            // i2c_opencores_mipi_avalon_slave_0_agent:m0_write -> i2c_opencores_mipi_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount;                                       // i2c_opencores_mipi_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_mipi_avalon_slave_0_translator:uav_burstcount
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid;                                     // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [134:0] i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data;                                      // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_data -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready;                                     // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rf_source_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket;                             // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket;                               // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid;                                  // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_valid
	wire  [134:0] i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data;                                   // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready;                                  // i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                          // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                            // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid;                                // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_valid -> i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data;                                 // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_data -> i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:in_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready;                                // i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:in_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_readdata;                                       // i2c_opencores_camera_avalon_slave_0_translator:uav_readdata -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdata
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest;                                    // i2c_opencores_camera_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_camera_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess;                                    // i2c_opencores_camera_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_camera_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_address;                                        // i2c_opencores_camera_avalon_slave_0_agent:m0_address -> i2c_opencores_camera_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable;                                     // i2c_opencores_camera_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_camera_avalon_slave_0_translator:uav_byteenable
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_read;                                           // i2c_opencores_camera_avalon_slave_0_agent:m0_read -> i2c_opencores_camera_avalon_slave_0_translator:uav_read
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid;                                  // i2c_opencores_camera_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_lock;                                           // i2c_opencores_camera_avalon_slave_0_agent:m0_lock -> i2c_opencores_camera_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_writedata;                                      // i2c_opencores_camera_avalon_slave_0_agent:m0_writedata -> i2c_opencores_camera_avalon_slave_0_translator:uav_writedata
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_write;                                          // i2c_opencores_camera_avalon_slave_0_agent:m0_write -> i2c_opencores_camera_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount;                                     // i2c_opencores_camera_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_camera_avalon_slave_0_translator:uav_burstcount
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid;                                   // i2c_opencores_camera_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [134:0] i2c_opencores_camera_avalon_slave_0_agent_rf_source_data;                                    // i2c_opencores_camera_avalon_slave_0_agent:rf_source_data -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready;                                   // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_camera_avalon_slave_0_agent:rf_source_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket;                           // i2c_opencores_camera_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket;                             // i2c_opencores_camera_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid;                                // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_valid
	wire  [134:0] i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data;                                 // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready;                                // i2c_opencores_camera_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                        // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                          // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid;                              // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_valid -> i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data;                               // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_data -> i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:in_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready;                              // i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:in_ready -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] dma_0_control_port_slave_agent_m0_readdata;                                                  // dma_0_control_port_slave_translator:uav_readdata -> dma_0_control_port_slave_agent:m0_readdata
	wire          dma_0_control_port_slave_agent_m0_waitrequest;                                               // dma_0_control_port_slave_translator:uav_waitrequest -> dma_0_control_port_slave_agent:m0_waitrequest
	wire          dma_0_control_port_slave_agent_m0_debugaccess;                                               // dma_0_control_port_slave_agent:m0_debugaccess -> dma_0_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_0_control_port_slave_agent_m0_address;                                                   // dma_0_control_port_slave_agent:m0_address -> dma_0_control_port_slave_translator:uav_address
	wire    [3:0] dma_0_control_port_slave_agent_m0_byteenable;                                                // dma_0_control_port_slave_agent:m0_byteenable -> dma_0_control_port_slave_translator:uav_byteenable
	wire          dma_0_control_port_slave_agent_m0_read;                                                      // dma_0_control_port_slave_agent:m0_read -> dma_0_control_port_slave_translator:uav_read
	wire          dma_0_control_port_slave_agent_m0_readdatavalid;                                             // dma_0_control_port_slave_translator:uav_readdatavalid -> dma_0_control_port_slave_agent:m0_readdatavalid
	wire          dma_0_control_port_slave_agent_m0_lock;                                                      // dma_0_control_port_slave_agent:m0_lock -> dma_0_control_port_slave_translator:uav_lock
	wire   [31:0] dma_0_control_port_slave_agent_m0_writedata;                                                 // dma_0_control_port_slave_agent:m0_writedata -> dma_0_control_port_slave_translator:uav_writedata
	wire          dma_0_control_port_slave_agent_m0_write;                                                     // dma_0_control_port_slave_agent:m0_write -> dma_0_control_port_slave_translator:uav_write
	wire    [2:0] dma_0_control_port_slave_agent_m0_burstcount;                                                // dma_0_control_port_slave_agent:m0_burstcount -> dma_0_control_port_slave_translator:uav_burstcount
	wire          dma_0_control_port_slave_agent_rf_source_valid;                                              // dma_0_control_port_slave_agent:rf_source_valid -> dma_0_control_port_slave_agent_rsp_fifo:in_valid
	wire  [134:0] dma_0_control_port_slave_agent_rf_source_data;                                               // dma_0_control_port_slave_agent:rf_source_data -> dma_0_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_0_control_port_slave_agent_rf_source_ready;                                              // dma_0_control_port_slave_agent_rsp_fifo:in_ready -> dma_0_control_port_slave_agent:rf_source_ready
	wire          dma_0_control_port_slave_agent_rf_source_startofpacket;                                      // dma_0_control_port_slave_agent:rf_source_startofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_0_control_port_slave_agent_rf_source_endofpacket;                                        // dma_0_control_port_slave_agent:rf_source_endofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_valid;                                           // dma_0_control_port_slave_agent_rsp_fifo:out_valid -> dma_0_control_port_slave_agent:rf_sink_valid
	wire  [134:0] dma_0_control_port_slave_agent_rsp_fifo_out_data;                                            // dma_0_control_port_slave_agent_rsp_fifo:out_data -> dma_0_control_port_slave_agent:rf_sink_data
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_ready;                                           // dma_0_control_port_slave_agent:rf_sink_ready -> dma_0_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket;                                   // dma_0_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_0_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket;                                     // dma_0_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_0_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_valid;                                         // dma_0_control_port_slave_agent:rdata_fifo_src_valid -> dma_0_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_src_data;                                          // dma_0_control_port_slave_agent:rdata_fifo_src_data -> dma_0_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_ready;                                         // dma_0_control_port_slave_agent_rdata_fifo:in_ready -> dma_0_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] msgdma_0_csr_agent_m0_readdata;                                                              // msgdma_0_csr_translator:uav_readdata -> msgdma_0_csr_agent:m0_readdata
	wire          msgdma_0_csr_agent_m0_waitrequest;                                                           // msgdma_0_csr_translator:uav_waitrequest -> msgdma_0_csr_agent:m0_waitrequest
	wire          msgdma_0_csr_agent_m0_debugaccess;                                                           // msgdma_0_csr_agent:m0_debugaccess -> msgdma_0_csr_translator:uav_debugaccess
	wire   [31:0] msgdma_0_csr_agent_m0_address;                                                               // msgdma_0_csr_agent:m0_address -> msgdma_0_csr_translator:uav_address
	wire    [3:0] msgdma_0_csr_agent_m0_byteenable;                                                            // msgdma_0_csr_agent:m0_byteenable -> msgdma_0_csr_translator:uav_byteenable
	wire          msgdma_0_csr_agent_m0_read;                                                                  // msgdma_0_csr_agent:m0_read -> msgdma_0_csr_translator:uav_read
	wire          msgdma_0_csr_agent_m0_readdatavalid;                                                         // msgdma_0_csr_translator:uav_readdatavalid -> msgdma_0_csr_agent:m0_readdatavalid
	wire          msgdma_0_csr_agent_m0_lock;                                                                  // msgdma_0_csr_agent:m0_lock -> msgdma_0_csr_translator:uav_lock
	wire   [31:0] msgdma_0_csr_agent_m0_writedata;                                                             // msgdma_0_csr_agent:m0_writedata -> msgdma_0_csr_translator:uav_writedata
	wire          msgdma_0_csr_agent_m0_write;                                                                 // msgdma_0_csr_agent:m0_write -> msgdma_0_csr_translator:uav_write
	wire    [2:0] msgdma_0_csr_agent_m0_burstcount;                                                            // msgdma_0_csr_agent:m0_burstcount -> msgdma_0_csr_translator:uav_burstcount
	wire          msgdma_0_csr_agent_rf_source_valid;                                                          // msgdma_0_csr_agent:rf_source_valid -> msgdma_0_csr_agent_rsp_fifo:in_valid
	wire  [134:0] msgdma_0_csr_agent_rf_source_data;                                                           // msgdma_0_csr_agent:rf_source_data -> msgdma_0_csr_agent_rsp_fifo:in_data
	wire          msgdma_0_csr_agent_rf_source_ready;                                                          // msgdma_0_csr_agent_rsp_fifo:in_ready -> msgdma_0_csr_agent:rf_source_ready
	wire          msgdma_0_csr_agent_rf_source_startofpacket;                                                  // msgdma_0_csr_agent:rf_source_startofpacket -> msgdma_0_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_csr_agent_rf_source_endofpacket;                                                    // msgdma_0_csr_agent:rf_source_endofpacket -> msgdma_0_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_valid;                                                       // msgdma_0_csr_agent_rsp_fifo:out_valid -> msgdma_0_csr_agent:rf_sink_valid
	wire  [134:0] msgdma_0_csr_agent_rsp_fifo_out_data;                                                        // msgdma_0_csr_agent_rsp_fifo:out_data -> msgdma_0_csr_agent:rf_sink_data
	wire          msgdma_0_csr_agent_rsp_fifo_out_ready;                                                       // msgdma_0_csr_agent:rf_sink_ready -> msgdma_0_csr_agent_rsp_fifo:out_ready
	wire          msgdma_0_csr_agent_rsp_fifo_out_startofpacket;                                               // msgdma_0_csr_agent_rsp_fifo:out_startofpacket -> msgdma_0_csr_agent:rf_sink_startofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_endofpacket;                                                 // msgdma_0_csr_agent_rsp_fifo:out_endofpacket -> msgdma_0_csr_agent:rf_sink_endofpacket
	wire          msgdma_0_csr_agent_rdata_fifo_src_valid;                                                     // msgdma_0_csr_agent:rdata_fifo_src_valid -> msgdma_0_csr_agent_rdata_fifo:in_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_src_data;                                                      // msgdma_0_csr_agent:rdata_fifo_src_data -> msgdma_0_csr_agent_rdata_fifo:in_data
	wire          msgdma_0_csr_agent_rdata_fifo_src_ready;                                                     // msgdma_0_csr_agent_rdata_fifo:in_ready -> msgdma_0_csr_agent:rdata_fifo_src_ready
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_readdata;                                                 // msgdma_0_descriptor_slave_translator:uav_readdata -> msgdma_0_descriptor_slave_agent:m0_readdata
	wire          msgdma_0_descriptor_slave_agent_m0_waitrequest;                                              // msgdma_0_descriptor_slave_translator:uav_waitrequest -> msgdma_0_descriptor_slave_agent:m0_waitrequest
	wire          msgdma_0_descriptor_slave_agent_m0_debugaccess;                                              // msgdma_0_descriptor_slave_agent:m0_debugaccess -> msgdma_0_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] msgdma_0_descriptor_slave_agent_m0_address;                                                  // msgdma_0_descriptor_slave_agent:m0_address -> msgdma_0_descriptor_slave_translator:uav_address
	wire   [15:0] msgdma_0_descriptor_slave_agent_m0_byteenable;                                               // msgdma_0_descriptor_slave_agent:m0_byteenable -> msgdma_0_descriptor_slave_translator:uav_byteenable
	wire          msgdma_0_descriptor_slave_agent_m0_read;                                                     // msgdma_0_descriptor_slave_agent:m0_read -> msgdma_0_descriptor_slave_translator:uav_read
	wire          msgdma_0_descriptor_slave_agent_m0_readdatavalid;                                            // msgdma_0_descriptor_slave_translator:uav_readdatavalid -> msgdma_0_descriptor_slave_agent:m0_readdatavalid
	wire          msgdma_0_descriptor_slave_agent_m0_lock;                                                     // msgdma_0_descriptor_slave_agent:m0_lock -> msgdma_0_descriptor_slave_translator:uav_lock
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_writedata;                                                // msgdma_0_descriptor_slave_agent:m0_writedata -> msgdma_0_descriptor_slave_translator:uav_writedata
	wire          msgdma_0_descriptor_slave_agent_m0_write;                                                    // msgdma_0_descriptor_slave_agent:m0_write -> msgdma_0_descriptor_slave_translator:uav_write
	wire    [4:0] msgdma_0_descriptor_slave_agent_m0_burstcount;                                               // msgdma_0_descriptor_slave_agent:m0_burstcount -> msgdma_0_descriptor_slave_translator:uav_burstcount
	wire          msgdma_0_descriptor_slave_agent_rf_source_valid;                                             // msgdma_0_descriptor_slave_agent:rf_source_valid -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [242:0] msgdma_0_descriptor_slave_agent_rf_source_data;                                              // msgdma_0_descriptor_slave_agent:rf_source_data -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rf_source_ready;                                             // msgdma_0_descriptor_slave_agent_rsp_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rf_source_ready
	wire          msgdma_0_descriptor_slave_agent_rf_source_startofpacket;                                     // msgdma_0_descriptor_slave_agent:rf_source_startofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rf_source_endofpacket;                                       // msgdma_0_descriptor_slave_agent:rf_source_endofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid;                                          // msgdma_0_descriptor_slave_agent_rsp_fifo:out_valid -> msgdma_0_descriptor_slave_agent:rf_sink_valid
	wire  [242:0] msgdma_0_descriptor_slave_agent_rsp_fifo_out_data;                                           // msgdma_0_descriptor_slave_agent_rsp_fifo:out_data -> msgdma_0_descriptor_slave_agent:rf_sink_data
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready;                                          // msgdma_0_descriptor_slave_agent:rf_sink_ready -> msgdma_0_descriptor_slave_agent_rsp_fifo:out_ready
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket;                                  // msgdma_0_descriptor_slave_agent_rsp_fifo:out_startofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket;                                    // msgdma_0_descriptor_slave_agent_rsp_fifo:out_endofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid;                                        // msgdma_0_descriptor_slave_agent:rdata_fifo_src_valid -> msgdma_0_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] msgdma_0_descriptor_slave_agent_rdata_fifo_src_data;                                         // msgdma_0_descriptor_slave_agent:rdata_fifo_src_data -> msgdma_0_descriptor_slave_agent_rdata_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready;                                        // msgdma_0_descriptor_slave_agent_rdata_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rdata_fifo_src_ready
	wire   [31:0] terasic_auto_focus_0_mm_ctrl_agent_m0_readdata;                                              // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_readdata -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_readdata
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest;                                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_waitrequest -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_waitrequest
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess;                                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_debugaccess -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_debugaccess
	wire   [31:0] terasic_auto_focus_0_mm_ctrl_agent_m0_address;                                               // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_address -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_address
	wire    [3:0] terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable;                                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_byteenable -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_byteenable
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_read;                                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_read -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_read
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid;                                         // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_readdatavalid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_readdatavalid
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_lock;                                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_lock -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_lock
	wire   [31:0] terasic_auto_focus_0_mm_ctrl_agent_m0_writedata;                                             // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_writedata -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_writedata
	wire          terasic_auto_focus_0_mm_ctrl_agent_m0_write;                                                 // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_write -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_write
	wire    [2:0] terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount;                                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_burstcount -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_burstcount
	wire          terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid;                                          // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_valid
	wire  [134:0] terasic_auto_focus_0_mm_ctrl_agent_rf_source_data;                                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_data
	wire          terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready;                                          // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_ready
	wire          terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket;                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_startofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket;                                    // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_endofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid;                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_valid
	wire  [134:0] terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data;                                        // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_data
	wire          terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready;                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_ready
	wire          terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket;                               // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_startofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket;                                 // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_endofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid;                                     // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_valid
	wire   [33:0] terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data;                                      // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_data
	wire          terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready;                                     // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_ready
	wire   [31:0] mipi_reset_n_s1_agent_m0_readdata;                                                           // mipi_reset_n_s1_translator:uav_readdata -> mipi_reset_n_s1_agent:m0_readdata
	wire          mipi_reset_n_s1_agent_m0_waitrequest;                                                        // mipi_reset_n_s1_translator:uav_waitrequest -> mipi_reset_n_s1_agent:m0_waitrequest
	wire          mipi_reset_n_s1_agent_m0_debugaccess;                                                        // mipi_reset_n_s1_agent:m0_debugaccess -> mipi_reset_n_s1_translator:uav_debugaccess
	wire   [31:0] mipi_reset_n_s1_agent_m0_address;                                                            // mipi_reset_n_s1_agent:m0_address -> mipi_reset_n_s1_translator:uav_address
	wire    [3:0] mipi_reset_n_s1_agent_m0_byteenable;                                                         // mipi_reset_n_s1_agent:m0_byteenable -> mipi_reset_n_s1_translator:uav_byteenable
	wire          mipi_reset_n_s1_agent_m0_read;                                                               // mipi_reset_n_s1_agent:m0_read -> mipi_reset_n_s1_translator:uav_read
	wire          mipi_reset_n_s1_agent_m0_readdatavalid;                                                      // mipi_reset_n_s1_translator:uav_readdatavalid -> mipi_reset_n_s1_agent:m0_readdatavalid
	wire          mipi_reset_n_s1_agent_m0_lock;                                                               // mipi_reset_n_s1_agent:m0_lock -> mipi_reset_n_s1_translator:uav_lock
	wire   [31:0] mipi_reset_n_s1_agent_m0_writedata;                                                          // mipi_reset_n_s1_agent:m0_writedata -> mipi_reset_n_s1_translator:uav_writedata
	wire          mipi_reset_n_s1_agent_m0_write;                                                              // mipi_reset_n_s1_agent:m0_write -> mipi_reset_n_s1_translator:uav_write
	wire    [2:0] mipi_reset_n_s1_agent_m0_burstcount;                                                         // mipi_reset_n_s1_agent:m0_burstcount -> mipi_reset_n_s1_translator:uav_burstcount
	wire          mipi_reset_n_s1_agent_rf_source_valid;                                                       // mipi_reset_n_s1_agent:rf_source_valid -> mipi_reset_n_s1_agent_rsp_fifo:in_valid
	wire  [134:0] mipi_reset_n_s1_agent_rf_source_data;                                                        // mipi_reset_n_s1_agent:rf_source_data -> mipi_reset_n_s1_agent_rsp_fifo:in_data
	wire          mipi_reset_n_s1_agent_rf_source_ready;                                                       // mipi_reset_n_s1_agent_rsp_fifo:in_ready -> mipi_reset_n_s1_agent:rf_source_ready
	wire          mipi_reset_n_s1_agent_rf_source_startofpacket;                                               // mipi_reset_n_s1_agent:rf_source_startofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_startofpacket
	wire          mipi_reset_n_s1_agent_rf_source_endofpacket;                                                 // mipi_reset_n_s1_agent:rf_source_endofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_endofpacket
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_valid;                                                    // mipi_reset_n_s1_agent_rsp_fifo:out_valid -> mipi_reset_n_s1_agent:rf_sink_valid
	wire  [134:0] mipi_reset_n_s1_agent_rsp_fifo_out_data;                                                     // mipi_reset_n_s1_agent_rsp_fifo:out_data -> mipi_reset_n_s1_agent:rf_sink_data
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_ready;                                                    // mipi_reset_n_s1_agent:rf_sink_ready -> mipi_reset_n_s1_agent_rsp_fifo:out_ready
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket;                                            // mipi_reset_n_s1_agent_rsp_fifo:out_startofpacket -> mipi_reset_n_s1_agent:rf_sink_startofpacket
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket;                                              // mipi_reset_n_s1_agent_rsp_fifo:out_endofpacket -> mipi_reset_n_s1_agent:rf_sink_endofpacket
	wire          mipi_reset_n_s1_agent_rdata_fifo_src_valid;                                                  // mipi_reset_n_s1_agent:rdata_fifo_src_valid -> mipi_reset_n_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mipi_reset_n_s1_agent_rdata_fifo_src_data;                                                   // mipi_reset_n_s1_agent:rdata_fifo_src_data -> mipi_reset_n_s1_agent_rdata_fifo:in_data
	wire          mipi_reset_n_s1_agent_rdata_fifo_src_ready;                                                  // mipi_reset_n_s1_agent_rdata_fifo:in_ready -> mipi_reset_n_s1_agent:rdata_fifo_src_ready
	wire   [31:0] mipi_pwdn_n_s1_agent_m0_readdata;                                                            // mipi_pwdn_n_s1_translator:uav_readdata -> mipi_pwdn_n_s1_agent:m0_readdata
	wire          mipi_pwdn_n_s1_agent_m0_waitrequest;                                                         // mipi_pwdn_n_s1_translator:uav_waitrequest -> mipi_pwdn_n_s1_agent:m0_waitrequest
	wire          mipi_pwdn_n_s1_agent_m0_debugaccess;                                                         // mipi_pwdn_n_s1_agent:m0_debugaccess -> mipi_pwdn_n_s1_translator:uav_debugaccess
	wire   [31:0] mipi_pwdn_n_s1_agent_m0_address;                                                             // mipi_pwdn_n_s1_agent:m0_address -> mipi_pwdn_n_s1_translator:uav_address
	wire    [3:0] mipi_pwdn_n_s1_agent_m0_byteenable;                                                          // mipi_pwdn_n_s1_agent:m0_byteenable -> mipi_pwdn_n_s1_translator:uav_byteenable
	wire          mipi_pwdn_n_s1_agent_m0_read;                                                                // mipi_pwdn_n_s1_agent:m0_read -> mipi_pwdn_n_s1_translator:uav_read
	wire          mipi_pwdn_n_s1_agent_m0_readdatavalid;                                                       // mipi_pwdn_n_s1_translator:uav_readdatavalid -> mipi_pwdn_n_s1_agent:m0_readdatavalid
	wire          mipi_pwdn_n_s1_agent_m0_lock;                                                                // mipi_pwdn_n_s1_agent:m0_lock -> mipi_pwdn_n_s1_translator:uav_lock
	wire   [31:0] mipi_pwdn_n_s1_agent_m0_writedata;                                                           // mipi_pwdn_n_s1_agent:m0_writedata -> mipi_pwdn_n_s1_translator:uav_writedata
	wire          mipi_pwdn_n_s1_agent_m0_write;                                                               // mipi_pwdn_n_s1_agent:m0_write -> mipi_pwdn_n_s1_translator:uav_write
	wire    [2:0] mipi_pwdn_n_s1_agent_m0_burstcount;                                                          // mipi_pwdn_n_s1_agent:m0_burstcount -> mipi_pwdn_n_s1_translator:uav_burstcount
	wire          mipi_pwdn_n_s1_agent_rf_source_valid;                                                        // mipi_pwdn_n_s1_agent:rf_source_valid -> mipi_pwdn_n_s1_agent_rsp_fifo:in_valid
	wire  [134:0] mipi_pwdn_n_s1_agent_rf_source_data;                                                         // mipi_pwdn_n_s1_agent:rf_source_data -> mipi_pwdn_n_s1_agent_rsp_fifo:in_data
	wire          mipi_pwdn_n_s1_agent_rf_source_ready;                                                        // mipi_pwdn_n_s1_agent_rsp_fifo:in_ready -> mipi_pwdn_n_s1_agent:rf_source_ready
	wire          mipi_pwdn_n_s1_agent_rf_source_startofpacket;                                                // mipi_pwdn_n_s1_agent:rf_source_startofpacket -> mipi_pwdn_n_s1_agent_rsp_fifo:in_startofpacket
	wire          mipi_pwdn_n_s1_agent_rf_source_endofpacket;                                                  // mipi_pwdn_n_s1_agent:rf_source_endofpacket -> mipi_pwdn_n_s1_agent_rsp_fifo:in_endofpacket
	wire          mipi_pwdn_n_s1_agent_rsp_fifo_out_valid;                                                     // mipi_pwdn_n_s1_agent_rsp_fifo:out_valid -> mipi_pwdn_n_s1_agent:rf_sink_valid
	wire  [134:0] mipi_pwdn_n_s1_agent_rsp_fifo_out_data;                                                      // mipi_pwdn_n_s1_agent_rsp_fifo:out_data -> mipi_pwdn_n_s1_agent:rf_sink_data
	wire          mipi_pwdn_n_s1_agent_rsp_fifo_out_ready;                                                     // mipi_pwdn_n_s1_agent:rf_sink_ready -> mipi_pwdn_n_s1_agent_rsp_fifo:out_ready
	wire          mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket;                                             // mipi_pwdn_n_s1_agent_rsp_fifo:out_startofpacket -> mipi_pwdn_n_s1_agent:rf_sink_startofpacket
	wire          mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket;                                               // mipi_pwdn_n_s1_agent_rsp_fifo:out_endofpacket -> mipi_pwdn_n_s1_agent:rf_sink_endofpacket
	wire          mipi_pwdn_n_s1_agent_rdata_fifo_src_valid;                                                   // mipi_pwdn_n_s1_agent:rdata_fifo_src_valid -> mipi_pwdn_n_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mipi_pwdn_n_s1_agent_rdata_fifo_src_data;                                                    // mipi_pwdn_n_s1_agent:rdata_fifo_src_data -> mipi_pwdn_n_s1_agent_rdata_fifo:in_data
	wire          mipi_pwdn_n_s1_agent_rdata_fifo_src_ready;                                                   // mipi_pwdn_n_s1_agent_rdata_fifo:in_ready -> mipi_pwdn_n_s1_agent:rdata_fifo_src_ready
	wire   [31:0] timer_s1_agent_m0_readdata;                                                                  // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                               // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                               // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [31:0] timer_s1_agent_m0_address;                                                                   // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                                // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                                      // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                             // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                                      // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                                 // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                                     // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                                // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                              // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [134:0] timer_s1_agent_rf_source_data;                                                               // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                              // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                                      // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                                        // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                           // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [134:0] timer_s1_agent_rsp_fifo_out_data;                                                            // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                           // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                                   // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                                     // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          timer_s1_agent_rdata_fifo_src_valid;                                                         // timer_s1_agent:rdata_fifo_src_valid -> timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                                          // timer_s1_agent:rdata_fifo_src_data -> timer_s1_agent_rdata_fifo:in_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                                         // timer_s1_agent_rdata_fifo:in_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire   [31:0] onchip_s1_agent_m0_readdata;                                                                 // onchip_s1_translator:uav_readdata -> onchip_s1_agent:m0_readdata
	wire          onchip_s1_agent_m0_waitrequest;                                                              // onchip_s1_translator:uav_waitrequest -> onchip_s1_agent:m0_waitrequest
	wire          onchip_s1_agent_m0_debugaccess;                                                              // onchip_s1_agent:m0_debugaccess -> onchip_s1_translator:uav_debugaccess
	wire   [31:0] onchip_s1_agent_m0_address;                                                                  // onchip_s1_agent:m0_address -> onchip_s1_translator:uav_address
	wire    [3:0] onchip_s1_agent_m0_byteenable;                                                               // onchip_s1_agent:m0_byteenable -> onchip_s1_translator:uav_byteenable
	wire          onchip_s1_agent_m0_read;                                                                     // onchip_s1_agent:m0_read -> onchip_s1_translator:uav_read
	wire          onchip_s1_agent_m0_readdatavalid;                                                            // onchip_s1_translator:uav_readdatavalid -> onchip_s1_agent:m0_readdatavalid
	wire          onchip_s1_agent_m0_lock;                                                                     // onchip_s1_agent:m0_lock -> onchip_s1_translator:uav_lock
	wire   [31:0] onchip_s1_agent_m0_writedata;                                                                // onchip_s1_agent:m0_writedata -> onchip_s1_translator:uav_writedata
	wire          onchip_s1_agent_m0_write;                                                                    // onchip_s1_agent:m0_write -> onchip_s1_translator:uav_write
	wire    [2:0] onchip_s1_agent_m0_burstcount;                                                               // onchip_s1_agent:m0_burstcount -> onchip_s1_translator:uav_burstcount
	wire          onchip_s1_agent_rf_source_valid;                                                             // onchip_s1_agent:rf_source_valid -> onchip_s1_agent_rsp_fifo:in_valid
	wire  [134:0] onchip_s1_agent_rf_source_data;                                                              // onchip_s1_agent:rf_source_data -> onchip_s1_agent_rsp_fifo:in_data
	wire          onchip_s1_agent_rf_source_ready;                                                             // onchip_s1_agent_rsp_fifo:in_ready -> onchip_s1_agent:rf_source_ready
	wire          onchip_s1_agent_rf_source_startofpacket;                                                     // onchip_s1_agent:rf_source_startofpacket -> onchip_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_s1_agent_rf_source_endofpacket;                                                       // onchip_s1_agent:rf_source_endofpacket -> onchip_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_s1_agent_rsp_fifo_out_valid;                                                          // onchip_s1_agent_rsp_fifo:out_valid -> onchip_s1_agent:rf_sink_valid
	wire  [134:0] onchip_s1_agent_rsp_fifo_out_data;                                                           // onchip_s1_agent_rsp_fifo:out_data -> onchip_s1_agent:rf_sink_data
	wire          onchip_s1_agent_rsp_fifo_out_ready;                                                          // onchip_s1_agent:rf_sink_ready -> onchip_s1_agent_rsp_fifo:out_ready
	wire          onchip_s1_agent_rsp_fifo_out_startofpacket;                                                  // onchip_s1_agent_rsp_fifo:out_startofpacket -> onchip_s1_agent:rf_sink_startofpacket
	wire          onchip_s1_agent_rsp_fifo_out_endofpacket;                                                    // onchip_s1_agent_rsp_fifo:out_endofpacket -> onchip_s1_agent:rf_sink_endofpacket
	wire          onchip_s1_agent_rdata_fifo_src_valid;                                                        // onchip_s1_agent:rdata_fifo_src_valid -> onchip_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_s1_agent_rdata_fifo_src_data;                                                         // onchip_s1_agent:rdata_fifo_src_data -> onchip_s1_agent_rdata_fifo:in_data
	wire          onchip_s1_agent_rdata_fifo_src_ready;                                                        // onchip_s1_agent_rdata_fifo:in_ready -> onchip_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                                   // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [169:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                    // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                                   // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                           // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                             // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [169:0] router_src_data;                                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                            // cmd_demux:sink_ready -> router:src_ready
	wire   [16:0] router_src_channel;                                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                    // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [169:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                     // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                    // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                            // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                              // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [169:0] router_001_src_data;                                                                         // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                        // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [16:0] router_001_src_channel;                                                                      // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          fpga_only_master_master_agent_cp_valid;                                                      // fpga_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [133:0] fpga_only_master_master_agent_cp_data;                                                       // fpga_only_master_master_agent:cp_data -> router_002:sink_data
	wire          fpga_only_master_master_agent_cp_ready;                                                      // router_002:sink_ready -> fpga_only_master_master_agent:cp_ready
	wire          fpga_only_master_master_agent_cp_startofpacket;                                              // fpga_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          fpga_only_master_master_agent_cp_endofpacket;                                                // fpga_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_003:sink_valid
	wire  [133:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                 // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                // router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                        // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                          // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_003:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                 // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_004:sink_valid
	wire  [133:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                  // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_004:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                 // router_004:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                         // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                           // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_004:sink_endofpacket
	wire          msgdma_0_mm_write_agent_cp_valid;                                                            // msgdma_0_mm_write_agent:cp_valid -> router_005:sink_valid
	wire  [106:0] msgdma_0_mm_write_agent_cp_data;                                                             // msgdma_0_mm_write_agent:cp_data -> router_005:sink_data
	wire          msgdma_0_mm_write_agent_cp_ready;                                                            // router_005:sink_ready -> msgdma_0_mm_write_agent:cp_ready
	wire          msgdma_0_mm_write_agent_cp_startofpacket;                                                    // msgdma_0_mm_write_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          msgdma_0_mm_write_agent_cp_endofpacket;                                                      // msgdma_0_mm_write_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                        // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [106:0] router_005_src_data;                                                                         // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                        // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [16:0] router_005_src_channel;                                                                      // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                                // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                  // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          dma_0_read_master_agent_cp_valid;                                                            // dma_0_read_master_agent:cp_valid -> router_006:sink_valid
	wire  [133:0] dma_0_read_master_agent_cp_data;                                                             // dma_0_read_master_agent:cp_data -> router_006:sink_data
	wire          dma_0_read_master_agent_cp_ready;                                                            // router_006:sink_ready -> dma_0_read_master_agent:cp_ready
	wire          dma_0_read_master_agent_cp_startofpacket;                                                    // dma_0_read_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          dma_0_read_master_agent_cp_endofpacket;                                                      // dma_0_read_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                        // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [133:0] router_006_src_data;                                                                         // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                        // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [16:0] router_006_src_channel;                                                                      // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                                // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                  // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          dma_0_write_master_agent_cp_valid;                                                           // dma_0_write_master_agent:cp_valid -> router_007:sink_valid
	wire  [133:0] dma_0_write_master_agent_cp_data;                                                            // dma_0_write_master_agent:cp_data -> router_007:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                                           // router_007:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                                                   // dma_0_write_master_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                                                     // dma_0_write_master_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                        // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [133:0] router_007_src_data;                                                                         // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                        // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [16:0] router_007_src_channel;                                                                      // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                                // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                  // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                          // onchip_memory2_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [169:0] onchip_memory2_0_s1_agent_rp_data;                                                           // onchip_memory2_0_s1_agent:rp_data -> router_008:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                          // router_008:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                                  // onchip_memory2_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                                    // onchip_memory2_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                        // router_008:src_valid -> rsp_demux:sink_valid
	wire  [169:0] router_008_src_data;                                                                         // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                        // rsp_demux:sink_ready -> router_008:src_ready
	wire   [16:0] router_008_src_channel;                                                                      // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                                // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                  // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                  // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_009:sink_valid
	wire  [133:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                   // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_009:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                  // router_009:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                          // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                            // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                        // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [133:0] router_009_src_data;                                                                         // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                        // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [16:0] router_009_src_channel;                                                                      // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                                // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                  // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_valid;                                               // intr_capturer_0_avalon_slave_0_agent:rp_valid -> router_010:sink_valid
	wire  [133:0] intr_capturer_0_avalon_slave_0_agent_rp_data;                                                // intr_capturer_0_avalon_slave_0_agent:rp_data -> router_010:sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rp_ready;                                               // router_010:sink_ready -> intr_capturer_0_avalon_slave_0_agent:rp_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rp_startofpacket;                                       // intr_capturer_0_avalon_slave_0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_endofpacket;                                         // intr_capturer_0_avalon_slave_0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                        // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [133:0] router_010_src_data;                                                                         // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                        // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [16:0] router_010_src_channel;                                                                      // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                                // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                  // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                                     // sysid_qsys_control_slave_agent:rp_valid -> router_011:sink_valid
	wire  [133:0] sysid_qsys_control_slave_agent_rp_data;                                                      // sysid_qsys_control_slave_agent:rp_data -> router_011:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                                     // router_011:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                             // sysid_qsys_control_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                               // sysid_qsys_control_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                        // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [133:0] router_011_src_data;                                                                         // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                        // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [16:0] router_011_src_channel;                                                                      // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                                // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                  // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                                                   // led_pio_s1_agent:rp_valid -> router_012:sink_valid
	wire  [133:0] led_pio_s1_agent_rp_data;                                                                    // led_pio_s1_agent:rp_data -> router_012:sink_data
	wire          led_pio_s1_agent_rp_ready;                                                                   // router_012:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                                           // led_pio_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                                             // led_pio_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                        // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [133:0] router_012_src_data;                                                                         // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                        // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [16:0] router_012_src_channel;                                                                      // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                                // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                  // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                                                 // dipsw_pio_s1_agent:rp_valid -> router_013:sink_valid
	wire  [133:0] dipsw_pio_s1_agent_rp_data;                                                                  // dipsw_pio_s1_agent:rp_data -> router_013:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                                                 // router_013:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                                                         // dipsw_pio_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                                           // dipsw_pio_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                        // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [133:0] router_013_src_data;                                                                         // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                        // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [16:0] router_013_src_channel;                                                                      // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                                // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                  // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                                                // button_pio_s1_agent:rp_valid -> router_014:sink_valid
	wire  [133:0] button_pio_s1_agent_rp_data;                                                                 // button_pio_s1_agent:rp_data -> router_014:sink_data
	wire          button_pio_s1_agent_rp_ready;                                                                // router_014:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                                                        // button_pio_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                                                          // button_pio_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                        // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [133:0] router_014_src_data;                                                                         // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                        // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [16:0] router_014_src_channel;                                                                      // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                                // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                  // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_valid;                                            // i2c_opencores_mipi_avalon_slave_0_agent:rp_valid -> router_015:sink_valid
	wire  [133:0] i2c_opencores_mipi_avalon_slave_0_agent_rp_data;                                             // i2c_opencores_mipi_avalon_slave_0_agent:rp_data -> router_015:sink_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_ready;                                            // router_015:sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rp_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket;                                    // i2c_opencores_mipi_avalon_slave_0_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket;                                      // i2c_opencores_mipi_avalon_slave_0_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                        // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [133:0] router_015_src_data;                                                                         // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                        // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [16:0] router_015_src_channel;                                                                      // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                                // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                  // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_valid;                                          // i2c_opencores_camera_avalon_slave_0_agent:rp_valid -> router_016:sink_valid
	wire  [133:0] i2c_opencores_camera_avalon_slave_0_agent_rp_data;                                           // i2c_opencores_camera_avalon_slave_0_agent:rp_data -> router_016:sink_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_ready;                                          // router_016:sink_ready -> i2c_opencores_camera_avalon_slave_0_agent:rp_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket;                                  // i2c_opencores_camera_avalon_slave_0_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket;                                    // i2c_opencores_camera_avalon_slave_0_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                        // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [133:0] router_016_src_data;                                                                         // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                        // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [16:0] router_016_src_channel;                                                                      // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                                // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                  // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          dma_0_control_port_slave_agent_rp_valid;                                                     // dma_0_control_port_slave_agent:rp_valid -> router_017:sink_valid
	wire  [133:0] dma_0_control_port_slave_agent_rp_data;                                                      // dma_0_control_port_slave_agent:rp_data -> router_017:sink_data
	wire          dma_0_control_port_slave_agent_rp_ready;                                                     // router_017:sink_ready -> dma_0_control_port_slave_agent:rp_ready
	wire          dma_0_control_port_slave_agent_rp_startofpacket;                                             // dma_0_control_port_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          dma_0_control_port_slave_agent_rp_endofpacket;                                               // dma_0_control_port_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                        // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [133:0] router_017_src_data;                                                                         // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                        // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [16:0] router_017_src_channel;                                                                      // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                                // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                  // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          msgdma_0_csr_agent_rp_valid;                                                                 // msgdma_0_csr_agent:rp_valid -> router_018:sink_valid
	wire  [133:0] msgdma_0_csr_agent_rp_data;                                                                  // msgdma_0_csr_agent:rp_data -> router_018:sink_data
	wire          msgdma_0_csr_agent_rp_ready;                                                                 // router_018:sink_ready -> msgdma_0_csr_agent:rp_ready
	wire          msgdma_0_csr_agent_rp_startofpacket;                                                         // msgdma_0_csr_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          msgdma_0_csr_agent_rp_endofpacket;                                                           // msgdma_0_csr_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                        // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [133:0] router_018_src_data;                                                                         // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                        // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [16:0] router_018_src_channel;                                                                      // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                                // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                  // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_valid;                                                    // msgdma_0_descriptor_slave_agent:rp_valid -> router_019:sink_valid
	wire  [241:0] msgdma_0_descriptor_slave_agent_rp_data;                                                     // msgdma_0_descriptor_slave_agent:rp_data -> router_019:sink_data
	wire          msgdma_0_descriptor_slave_agent_rp_ready;                                                    // router_019:sink_ready -> msgdma_0_descriptor_slave_agent:rp_ready
	wire          msgdma_0_descriptor_slave_agent_rp_startofpacket;                                            // msgdma_0_descriptor_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_endofpacket;                                              // msgdma_0_descriptor_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                        // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [241:0] router_019_src_data;                                                                         // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                        // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [16:0] router_019_src_channel;                                                                      // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                                // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                  // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rp_valid;                                                 // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_valid -> router_020:sink_valid
	wire  [133:0] terasic_auto_focus_0_mm_ctrl_agent_rp_data;                                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_data -> router_020:sink_data
	wire          terasic_auto_focus_0_mm_ctrl_agent_rp_ready;                                                 // router_020:sink_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_ready
	wire          terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket;                                         // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket;                                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                        // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [133:0] router_020_src_data;                                                                         // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                        // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [16:0] router_020_src_channel;                                                                      // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                                // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                  // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          mipi_reset_n_s1_agent_rp_valid;                                                              // mipi_reset_n_s1_agent:rp_valid -> router_021:sink_valid
	wire  [133:0] mipi_reset_n_s1_agent_rp_data;                                                               // mipi_reset_n_s1_agent:rp_data -> router_021:sink_data
	wire          mipi_reset_n_s1_agent_rp_ready;                                                              // router_021:sink_ready -> mipi_reset_n_s1_agent:rp_ready
	wire          mipi_reset_n_s1_agent_rp_startofpacket;                                                      // mipi_reset_n_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          mipi_reset_n_s1_agent_rp_endofpacket;                                                        // mipi_reset_n_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                        // router_021:src_valid -> rsp_demux_013:sink_valid
	wire  [133:0] router_021_src_data;                                                                         // router_021:src_data -> rsp_demux_013:sink_data
	wire          router_021_src_ready;                                                                        // rsp_demux_013:sink_ready -> router_021:src_ready
	wire   [16:0] router_021_src_channel;                                                                      // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_startofpacket;                                                                // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                  // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          mipi_pwdn_n_s1_agent_rp_valid;                                                               // mipi_pwdn_n_s1_agent:rp_valid -> router_022:sink_valid
	wire  [133:0] mipi_pwdn_n_s1_agent_rp_data;                                                                // mipi_pwdn_n_s1_agent:rp_data -> router_022:sink_data
	wire          mipi_pwdn_n_s1_agent_rp_ready;                                                               // router_022:sink_ready -> mipi_pwdn_n_s1_agent:rp_ready
	wire          mipi_pwdn_n_s1_agent_rp_startofpacket;                                                       // mipi_pwdn_n_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          mipi_pwdn_n_s1_agent_rp_endofpacket;                                                         // mipi_pwdn_n_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                        // router_022:src_valid -> rsp_demux_014:sink_valid
	wire  [133:0] router_022_src_data;                                                                         // router_022:src_data -> rsp_demux_014:sink_data
	wire          router_022_src_ready;                                                                        // rsp_demux_014:sink_ready -> router_022:src_ready
	wire   [16:0] router_022_src_channel;                                                                      // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_startofpacket;                                                                // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                  // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                                     // timer_s1_agent:rp_valid -> router_023:sink_valid
	wire  [133:0] timer_s1_agent_rp_data;                                                                      // timer_s1_agent:rp_data -> router_023:sink_data
	wire          timer_s1_agent_rp_ready;                                                                     // router_023:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                             // timer_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                               // timer_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                        // router_023:src_valid -> rsp_demux_015:sink_valid
	wire  [133:0] router_023_src_data;                                                                         // router_023:src_data -> rsp_demux_015:sink_data
	wire          router_023_src_ready;                                                                        // rsp_demux_015:sink_ready -> router_023:src_ready
	wire   [16:0] router_023_src_channel;                                                                      // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_startofpacket;                                                                // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                  // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          onchip_s1_agent_rp_valid;                                                                    // onchip_s1_agent:rp_valid -> router_024:sink_valid
	wire  [133:0] onchip_s1_agent_rp_data;                                                                     // onchip_s1_agent:rp_data -> router_024:sink_data
	wire          onchip_s1_agent_rp_ready;                                                                    // router_024:sink_ready -> onchip_s1_agent:rp_ready
	wire          onchip_s1_agent_rp_startofpacket;                                                            // onchip_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          onchip_s1_agent_rp_endofpacket;                                                              // onchip_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                        // router_024:src_valid -> rsp_demux_016:sink_valid
	wire  [133:0] router_024_src_data;                                                                         // router_024:src_data -> rsp_demux_016:sink_data
	wire          router_024_src_ready;                                                                        // rsp_demux_016:sink_ready -> router_024:src_ready
	wire   [16:0] router_024_src_channel;                                                                      // router_024:src_channel -> rsp_demux_016:sink_channel
	wire          router_024_src_startofpacket;                                                                // router_024:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                  // router_024:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> fpga_only_master_master_limiter:cmd_sink_valid
	wire  [133:0] router_002_src_data;                                                                         // router_002:src_data -> fpga_only_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                        // fpga_only_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [16:0] router_002_src_channel;                                                                      // router_002:src_channel -> fpga_only_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> fpga_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> fpga_only_master_master_limiter:cmd_sink_endofpacket
	wire  [133:0] fpga_only_master_master_limiter_cmd_src_data;                                                // fpga_only_master_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          fpga_only_master_master_limiter_cmd_src_ready;                                               // cmd_demux_002:sink_ready -> fpga_only_master_master_limiter:cmd_src_ready
	wire   [16:0] fpga_only_master_master_limiter_cmd_src_channel;                                             // fpga_only_master_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          fpga_only_master_master_limiter_cmd_src_startofpacket;                                       // fpga_only_master_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          fpga_only_master_master_limiter_cmd_src_endofpacket;                                         // fpga_only_master_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                       // rsp_mux_002:src_valid -> fpga_only_master_master_limiter:rsp_sink_valid
	wire  [133:0] rsp_mux_002_src_data;                                                                        // rsp_mux_002:src_data -> fpga_only_master_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                       // fpga_only_master_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [16:0] rsp_mux_002_src_channel;                                                                     // rsp_mux_002:src_channel -> fpga_only_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                               // rsp_mux_002:src_startofpacket -> fpga_only_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                 // rsp_mux_002:src_endofpacket -> fpga_only_master_master_limiter:rsp_sink_endofpacket
	wire          fpga_only_master_master_limiter_rsp_src_valid;                                               // fpga_only_master_master_limiter:rsp_src_valid -> fpga_only_master_master_agent:rp_valid
	wire  [133:0] fpga_only_master_master_limiter_rsp_src_data;                                                // fpga_only_master_master_limiter:rsp_src_data -> fpga_only_master_master_agent:rp_data
	wire          fpga_only_master_master_limiter_rsp_src_ready;                                               // fpga_only_master_master_agent:rp_ready -> fpga_only_master_master_limiter:rsp_src_ready
	wire   [16:0] fpga_only_master_master_limiter_rsp_src_channel;                                             // fpga_only_master_master_limiter:rsp_src_channel -> fpga_only_master_master_agent:rp_channel
	wire          fpga_only_master_master_limiter_rsp_src_startofpacket;                                       // fpga_only_master_master_limiter:rsp_src_startofpacket -> fpga_only_master_master_agent:rp_startofpacket
	wire          fpga_only_master_master_limiter_rsp_src_endofpacket;                                         // fpga_only_master_master_limiter:rsp_src_endofpacket -> fpga_only_master_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                                        // router_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [133:0] router_003_src_data;                                                                         // router_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [16:0] router_003_src_channel;                                                                      // router_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                                // router_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                  // router_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [133:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                            // cmd_demux_003:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                       // rsp_mux_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [133:0] rsp_mux_003_src_data;                                                                        // rsp_mux_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                       // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [16:0] rsp_mux_003_src_channel;                                                                     // rsp_mux_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                               // rsp_mux_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                 // rsp_mux_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                            // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [133:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                            // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_004_src_valid;                                                                        // router_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [133:0] router_004_src_data;                                                                         // router_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [16:0] router_004_src_channel;                                                                      // router_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                                // router_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                                  // router_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [133:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                            // cmd_demux_004:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                       // rsp_mux_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [133:0] rsp_mux_004_src_data;                                                                        // rsp_mux_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                       // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [16:0] rsp_mux_004_src_channel;                                                                     // rsp_mux_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                               // rsp_mux_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                 // rsp_mux_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [133:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                            // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [169:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                           // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [16:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                             // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [169:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                              // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                             // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire   [16:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                           // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                                     // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                                       // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                       // cmd_mux_001:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_001_src_data;                                                                        // cmd_mux_001:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                       // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [16:0] cmd_mux_001_src_channel;                                                                     // cmd_mux_001:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                               // cmd_mux_001:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                 // cmd_mux_001:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                                     // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [133:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                                      // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [16:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                                   // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                             // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                               // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                       // cmd_mux_003:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_003_src_data;                                                                        // cmd_mux_003:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                       // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [16:0] cmd_mux_003_src_channel;                                                                     // cmd_mux_003:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                               // cmd_mux_003:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                 // cmd_mux_003:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                                        // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [133:0] sysid_qsys_control_slave_burst_adapter_source0_data;                                         // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                                        // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire   [16:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                                      // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;                                // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;                                  // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                       // cmd_mux_004:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_004_src_data;                                                                        // cmd_mux_004:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                       // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [16:0] cmd_mux_004_src_channel;                                                                     // cmd_mux_004:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                               // cmd_mux_004:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                 // cmd_mux_004:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                                                      // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [133:0] led_pio_s1_burst_adapter_source0_data;                                                       // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                                                      // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire   [16:0] led_pio_s1_burst_adapter_source0_channel;                                                    // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                                              // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                                                // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                       // cmd_mux_005:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_005_src_data;                                                                        // cmd_mux_005:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                       // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [16:0] cmd_mux_005_src_channel;                                                                     // cmd_mux_005:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                               // cmd_mux_005:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                 // cmd_mux_005:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                                                    // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [133:0] dipsw_pio_s1_burst_adapter_source0_data;                                                     // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                                                    // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire   [16:0] dipsw_pio_s1_burst_adapter_source0_channel;                                                  // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                                            // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                                              // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                       // cmd_mux_006:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_006_src_data;                                                                        // cmd_mux_006:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                       // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [16:0] cmd_mux_006_src_channel;                                                                     // cmd_mux_006:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                               // cmd_mux_006:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                 // cmd_mux_006:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                                                   // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire  [133:0] button_pio_s1_burst_adapter_source0_data;                                                    // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                                                   // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire   [16:0] button_pio_s1_burst_adapter_source0_channel;                                                 // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                                           // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                                             // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                       // cmd_mux_007:src_valid -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_007_src_data;                                                                        // cmd_mux_007:src_data -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                       // i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [16:0] cmd_mux_007_src_channel;                                                                     // cmd_mux_007:src_channel -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                               // cmd_mux_007:src_startofpacket -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                 // cmd_mux_007:src_endofpacket -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_valid;                               // i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_valid -> i2c_opencores_mipi_avalon_slave_0_agent:cp_valid
	wire  [133:0] i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_data;                                // i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_data -> i2c_opencores_mipi_avalon_slave_0_agent:cp_data
	wire          i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_ready;                               // i2c_opencores_mipi_avalon_slave_0_agent:cp_ready -> i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_ready
	wire   [16:0] i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_channel;                             // i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_channel -> i2c_opencores_mipi_avalon_slave_0_agent:cp_channel
	wire          i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_startofpacket;                       // i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_endofpacket;                         // i2c_opencores_mipi_avalon_slave_0_burst_adapter:source0_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                       // cmd_mux_008:src_valid -> i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_008_src_data;                                                                        // cmd_mux_008:src_data -> i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                       // i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [16:0] cmd_mux_008_src_channel;                                                                     // cmd_mux_008:src_channel -> i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                               // cmd_mux_008:src_startofpacket -> i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                 // cmd_mux_008:src_endofpacket -> i2c_opencores_camera_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_valid;                             // i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_valid -> i2c_opencores_camera_avalon_slave_0_agent:cp_valid
	wire  [133:0] i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_data;                              // i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_data -> i2c_opencores_camera_avalon_slave_0_agent:cp_data
	wire          i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_ready;                             // i2c_opencores_camera_avalon_slave_0_agent:cp_ready -> i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_ready
	wire   [16:0] i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_channel;                           // i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_channel -> i2c_opencores_camera_avalon_slave_0_agent:cp_channel
	wire          i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_startofpacket;                     // i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_endofpacket;                       // i2c_opencores_camera_avalon_slave_0_burst_adapter:source0_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                       // cmd_mux_009:src_valid -> dma_0_control_port_slave_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_009_src_data;                                                                        // cmd_mux_009:src_data -> dma_0_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                       // dma_0_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [16:0] cmd_mux_009_src_channel;                                                                     // cmd_mux_009:src_channel -> dma_0_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                               // cmd_mux_009:src_startofpacket -> dma_0_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                 // cmd_mux_009:src_endofpacket -> dma_0_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_valid;                                        // dma_0_control_port_slave_burst_adapter:source0_valid -> dma_0_control_port_slave_agent:cp_valid
	wire  [133:0] dma_0_control_port_slave_burst_adapter_source0_data;                                         // dma_0_control_port_slave_burst_adapter:source0_data -> dma_0_control_port_slave_agent:cp_data
	wire          dma_0_control_port_slave_burst_adapter_source0_ready;                                        // dma_0_control_port_slave_agent:cp_ready -> dma_0_control_port_slave_burst_adapter:source0_ready
	wire   [16:0] dma_0_control_port_slave_burst_adapter_source0_channel;                                      // dma_0_control_port_slave_burst_adapter:source0_channel -> dma_0_control_port_slave_agent:cp_channel
	wire          dma_0_control_port_slave_burst_adapter_source0_startofpacket;                                // dma_0_control_port_slave_burst_adapter:source0_startofpacket -> dma_0_control_port_slave_agent:cp_startofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_endofpacket;                                  // dma_0_control_port_slave_burst_adapter:source0_endofpacket -> dma_0_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                       // cmd_mux_010:src_valid -> msgdma_0_csr_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_010_src_data;                                                                        // cmd_mux_010:src_data -> msgdma_0_csr_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                       // msgdma_0_csr_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [16:0] cmd_mux_010_src_channel;                                                                     // cmd_mux_010:src_channel -> msgdma_0_csr_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                               // cmd_mux_010:src_startofpacket -> msgdma_0_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                 // cmd_mux_010:src_endofpacket -> msgdma_0_csr_burst_adapter:sink0_endofpacket
	wire          msgdma_0_csr_burst_adapter_source0_valid;                                                    // msgdma_0_csr_burst_adapter:source0_valid -> msgdma_0_csr_agent:cp_valid
	wire  [133:0] msgdma_0_csr_burst_adapter_source0_data;                                                     // msgdma_0_csr_burst_adapter:source0_data -> msgdma_0_csr_agent:cp_data
	wire          msgdma_0_csr_burst_adapter_source0_ready;                                                    // msgdma_0_csr_agent:cp_ready -> msgdma_0_csr_burst_adapter:source0_ready
	wire   [16:0] msgdma_0_csr_burst_adapter_source0_channel;                                                  // msgdma_0_csr_burst_adapter:source0_channel -> msgdma_0_csr_agent:cp_channel
	wire          msgdma_0_csr_burst_adapter_source0_startofpacket;                                            // msgdma_0_csr_burst_adapter:source0_startofpacket -> msgdma_0_csr_agent:cp_startofpacket
	wire          msgdma_0_csr_burst_adapter_source0_endofpacket;                                              // msgdma_0_csr_burst_adapter:source0_endofpacket -> msgdma_0_csr_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                       // cmd_mux_011:src_valid -> msgdma_0_descriptor_slave_burst_adapter:sink0_valid
	wire  [241:0] cmd_mux_011_src_data;                                                                        // cmd_mux_011:src_data -> msgdma_0_descriptor_slave_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                       // msgdma_0_descriptor_slave_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [16:0] cmd_mux_011_src_channel;                                                                     // cmd_mux_011:src_channel -> msgdma_0_descriptor_slave_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                               // cmd_mux_011:src_startofpacket -> msgdma_0_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                 // cmd_mux_011:src_endofpacket -> msgdma_0_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_valid;                                       // msgdma_0_descriptor_slave_burst_adapter:source0_valid -> msgdma_0_descriptor_slave_agent:cp_valid
	wire  [241:0] msgdma_0_descriptor_slave_burst_adapter_source0_data;                                        // msgdma_0_descriptor_slave_burst_adapter:source0_data -> msgdma_0_descriptor_slave_agent:cp_data
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_ready;                                       // msgdma_0_descriptor_slave_agent:cp_ready -> msgdma_0_descriptor_slave_burst_adapter:source0_ready
	wire   [16:0] msgdma_0_descriptor_slave_burst_adapter_source0_channel;                                     // msgdma_0_descriptor_slave_burst_adapter:source0_channel -> msgdma_0_descriptor_slave_agent:cp_channel
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket;                               // msgdma_0_descriptor_slave_burst_adapter:source0_startofpacket -> msgdma_0_descriptor_slave_agent:cp_startofpacket
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket;                                 // msgdma_0_descriptor_slave_burst_adapter:source0_endofpacket -> msgdma_0_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                       // cmd_mux_012:src_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_012_src_data;                                                                        // cmd_mux_012:src_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [16:0] cmd_mux_012_src_channel;                                                                     // cmd_mux_012:src_channel -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                               // cmd_mux_012:src_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                 // cmd_mux_012:src_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:sink0_endofpacket
	wire          terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_valid;                                    // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_valid
	wire  [133:0] terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_data;                                     // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_data
	wire          terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_ready;                                    // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_ready
	wire   [16:0] terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_channel;                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_channel -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_channel
	wire          terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_startofpacket;                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_startofpacket
	wire          terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_endofpacket;                              // TERASIC_AUTO_FOCUS_0_mm_ctrl_burst_adapter:source0_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                       // cmd_mux_013:src_valid -> mipi_reset_n_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_013_src_data;                                                                        // cmd_mux_013:src_data -> mipi_reset_n_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                                       // mipi_reset_n_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [16:0] cmd_mux_013_src_channel;                                                                     // cmd_mux_013:src_channel -> mipi_reset_n_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                               // cmd_mux_013:src_startofpacket -> mipi_reset_n_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                 // cmd_mux_013:src_endofpacket -> mipi_reset_n_s1_burst_adapter:sink0_endofpacket
	wire          mipi_reset_n_s1_burst_adapter_source0_valid;                                                 // mipi_reset_n_s1_burst_adapter:source0_valid -> mipi_reset_n_s1_agent:cp_valid
	wire  [133:0] mipi_reset_n_s1_burst_adapter_source0_data;                                                  // mipi_reset_n_s1_burst_adapter:source0_data -> mipi_reset_n_s1_agent:cp_data
	wire          mipi_reset_n_s1_burst_adapter_source0_ready;                                                 // mipi_reset_n_s1_agent:cp_ready -> mipi_reset_n_s1_burst_adapter:source0_ready
	wire   [16:0] mipi_reset_n_s1_burst_adapter_source0_channel;                                               // mipi_reset_n_s1_burst_adapter:source0_channel -> mipi_reset_n_s1_agent:cp_channel
	wire          mipi_reset_n_s1_burst_adapter_source0_startofpacket;                                         // mipi_reset_n_s1_burst_adapter:source0_startofpacket -> mipi_reset_n_s1_agent:cp_startofpacket
	wire          mipi_reset_n_s1_burst_adapter_source0_endofpacket;                                           // mipi_reset_n_s1_burst_adapter:source0_endofpacket -> mipi_reset_n_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                       // cmd_mux_014:src_valid -> mipi_pwdn_n_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_014_src_data;                                                                        // cmd_mux_014:src_data -> mipi_pwdn_n_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                                       // mipi_pwdn_n_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [16:0] cmd_mux_014_src_channel;                                                                     // cmd_mux_014:src_channel -> mipi_pwdn_n_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                               // cmd_mux_014:src_startofpacket -> mipi_pwdn_n_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                 // cmd_mux_014:src_endofpacket -> mipi_pwdn_n_s1_burst_adapter:sink0_endofpacket
	wire          mipi_pwdn_n_s1_burst_adapter_source0_valid;                                                  // mipi_pwdn_n_s1_burst_adapter:source0_valid -> mipi_pwdn_n_s1_agent:cp_valid
	wire  [133:0] mipi_pwdn_n_s1_burst_adapter_source0_data;                                                   // mipi_pwdn_n_s1_burst_adapter:source0_data -> mipi_pwdn_n_s1_agent:cp_data
	wire          mipi_pwdn_n_s1_burst_adapter_source0_ready;                                                  // mipi_pwdn_n_s1_agent:cp_ready -> mipi_pwdn_n_s1_burst_adapter:source0_ready
	wire   [16:0] mipi_pwdn_n_s1_burst_adapter_source0_channel;                                                // mipi_pwdn_n_s1_burst_adapter:source0_channel -> mipi_pwdn_n_s1_agent:cp_channel
	wire          mipi_pwdn_n_s1_burst_adapter_source0_startofpacket;                                          // mipi_pwdn_n_s1_burst_adapter:source0_startofpacket -> mipi_pwdn_n_s1_agent:cp_startofpacket
	wire          mipi_pwdn_n_s1_burst_adapter_source0_endofpacket;                                            // mipi_pwdn_n_s1_burst_adapter:source0_endofpacket -> mipi_pwdn_n_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                       // cmd_mux_015:src_valid -> timer_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_015_src_data;                                                                        // cmd_mux_015:src_data -> timer_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                       // timer_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [16:0] cmd_mux_015_src_channel;                                                                     // cmd_mux_015:src_channel -> timer_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                               // cmd_mux_015:src_startofpacket -> timer_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                 // cmd_mux_015:src_endofpacket -> timer_s1_burst_adapter:sink0_endofpacket
	wire          timer_s1_burst_adapter_source0_valid;                                                        // timer_s1_burst_adapter:source0_valid -> timer_s1_agent:cp_valid
	wire  [133:0] timer_s1_burst_adapter_source0_data;                                                         // timer_s1_burst_adapter:source0_data -> timer_s1_agent:cp_data
	wire          timer_s1_burst_adapter_source0_ready;                                                        // timer_s1_agent:cp_ready -> timer_s1_burst_adapter:source0_ready
	wire   [16:0] timer_s1_burst_adapter_source0_channel;                                                      // timer_s1_burst_adapter:source0_channel -> timer_s1_agent:cp_channel
	wire          timer_s1_burst_adapter_source0_startofpacket;                                                // timer_s1_burst_adapter:source0_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          timer_s1_burst_adapter_source0_endofpacket;                                                  // timer_s1_burst_adapter:source0_endofpacket -> timer_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                                       // cmd_mux_016:src_valid -> onchip_s1_burst_adapter:sink0_valid
	wire  [133:0] cmd_mux_016_src_data;                                                                        // cmd_mux_016:src_data -> onchip_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                                       // onchip_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [16:0] cmd_mux_016_src_channel;                                                                     // cmd_mux_016:src_channel -> onchip_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                               // cmd_mux_016:src_startofpacket -> onchip_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                 // cmd_mux_016:src_endofpacket -> onchip_s1_burst_adapter:sink0_endofpacket
	wire          onchip_s1_burst_adapter_source0_valid;                                                       // onchip_s1_burst_adapter:source0_valid -> onchip_s1_agent:cp_valid
	wire  [133:0] onchip_s1_burst_adapter_source0_data;                                                        // onchip_s1_burst_adapter:source0_data -> onchip_s1_agent:cp_data
	wire          onchip_s1_burst_adapter_source0_ready;                                                       // onchip_s1_agent:cp_ready -> onchip_s1_burst_adapter:source0_ready
	wire   [16:0] onchip_s1_burst_adapter_source0_channel;                                                     // onchip_s1_burst_adapter:source0_channel -> onchip_s1_agent:cp_channel
	wire          onchip_s1_burst_adapter_source0_startofpacket;                                               // onchip_s1_burst_adapter:source0_startofpacket -> onchip_s1_agent:cp_startofpacket
	wire          onchip_s1_burst_adapter_source0_endofpacket;                                                 // onchip_s1_burst_adapter:source0_endofpacket -> onchip_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [169:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [16:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [169:0] cmd_demux_001_src0_data;                                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [16:0] cmd_demux_001_src0_channel;                                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                    // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [133:0] cmd_demux_002_src1_data;                                                                     // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire   [16:0] cmd_demux_002_src1_channel;                                                                  // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                            // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                              // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                    // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [133:0] cmd_demux_002_src2_data;                                                                     // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire   [16:0] cmd_demux_002_src2_channel;                                                                  // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                            // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                              // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                    // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [133:0] cmd_demux_002_src3_data;                                                                     // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                    // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire   [16:0] cmd_demux_002_src3_channel;                                                                  // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                            // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                              // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                    // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [133:0] cmd_demux_002_src4_data;                                                                     // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                    // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire   [16:0] cmd_demux_002_src4_channel;                                                                  // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                            // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                              // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                    // cmd_demux_002:src5_valid -> cmd_mux_005:sink0_valid
	wire  [133:0] cmd_demux_002_src5_data;                                                                     // cmd_demux_002:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_002_src5_ready;                                                                    // cmd_mux_005:sink0_ready -> cmd_demux_002:src5_ready
	wire   [16:0] cmd_demux_002_src5_channel;                                                                  // cmd_demux_002:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src5_startofpacket;                                                            // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                              // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                    // cmd_demux_002:src6_valid -> cmd_mux_006:sink0_valid
	wire  [133:0] cmd_demux_002_src6_data;                                                                     // cmd_demux_002:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src6_ready;                                                                    // cmd_mux_006:sink0_ready -> cmd_demux_002:src6_ready
	wire   [16:0] cmd_demux_002_src6_channel;                                                                  // cmd_demux_002:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src6_startofpacket;                                                            // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                              // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                    // cmd_demux_003:src0_valid -> cmd_mux_001:sink1_valid
	wire  [133:0] cmd_demux_003_src0_data;                                                                     // cmd_demux_003:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_003_src0_ready;                                                                    // cmd_mux_001:sink1_ready -> cmd_demux_003:src0_ready
	wire   [16:0] cmd_demux_003_src0_channel;                                                                  // cmd_demux_003:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                            // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                              // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                    // cmd_demux_003:src1_valid -> cmd_mux_003:sink1_valid
	wire  [133:0] cmd_demux_003_src1_data;                                                                     // cmd_demux_003:src1_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                    // cmd_mux_003:sink1_ready -> cmd_demux_003:src1_ready
	wire   [16:0] cmd_demux_003_src1_channel;                                                                  // cmd_demux_003:src1_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                            // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                              // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                    // cmd_demux_003:src2_valid -> cmd_mux_004:sink1_valid
	wire  [133:0] cmd_demux_003_src2_data;                                                                     // cmd_demux_003:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src2_ready;                                                                    // cmd_mux_004:sink1_ready -> cmd_demux_003:src2_ready
	wire   [16:0] cmd_demux_003_src2_channel;                                                                  // cmd_demux_003:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                            // cmd_demux_003:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                              // cmd_demux_003:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                    // cmd_demux_003:src3_valid -> cmd_mux_005:sink1_valid
	wire  [133:0] cmd_demux_003_src3_data;                                                                     // cmd_demux_003:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src3_ready;                                                                    // cmd_mux_005:sink1_ready -> cmd_demux_003:src3_ready
	wire   [16:0] cmd_demux_003_src3_channel;                                                                  // cmd_demux_003:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                            // cmd_demux_003:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                              // cmd_demux_003:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                    // cmd_demux_003:src4_valid -> cmd_mux_006:sink1_valid
	wire  [133:0] cmd_demux_003_src4_data;                                                                     // cmd_demux_003:src4_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src4_ready;                                                                    // cmd_mux_006:sink1_ready -> cmd_demux_003:src4_ready
	wire   [16:0] cmd_demux_003_src4_channel;                                                                  // cmd_demux_003:src4_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                            // cmd_demux_003:src4_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                              // cmd_demux_003:src4_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                    // cmd_demux_003:src5_valid -> cmd_mux_007:sink0_valid
	wire  [133:0] cmd_demux_003_src5_data;                                                                     // cmd_demux_003:src5_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_003_src5_ready;                                                                    // cmd_mux_007:sink0_ready -> cmd_demux_003:src5_ready
	wire   [16:0] cmd_demux_003_src5_channel;                                                                  // cmd_demux_003:src5_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_003_src5_startofpacket;                                                            // cmd_demux_003:src5_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                              // cmd_demux_003:src5_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                    // cmd_demux_003:src6_valid -> cmd_mux_008:sink0_valid
	wire  [133:0] cmd_demux_003_src6_data;                                                                     // cmd_demux_003:src6_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_003_src6_ready;                                                                    // cmd_mux_008:sink0_ready -> cmd_demux_003:src6_ready
	wire   [16:0] cmd_demux_003_src6_channel;                                                                  // cmd_demux_003:src6_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_003_src6_startofpacket;                                                            // cmd_demux_003:src6_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                              // cmd_demux_003:src6_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_003_src11_valid;                                                                   // cmd_demux_003:src11_valid -> cmd_mux_013:sink0_valid
	wire  [133:0] cmd_demux_003_src11_data;                                                                    // cmd_demux_003:src11_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_003_src11_ready;                                                                   // cmd_mux_013:sink0_ready -> cmd_demux_003:src11_ready
	wire   [16:0] cmd_demux_003_src11_channel;                                                                 // cmd_demux_003:src11_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_003_src11_startofpacket;                                                           // cmd_demux_003:src11_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                             // cmd_demux_003:src11_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_003_src12_valid;                                                                   // cmd_demux_003:src12_valid -> cmd_mux_014:sink0_valid
	wire  [133:0] cmd_demux_003_src12_data;                                                                    // cmd_demux_003:src12_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_003_src12_ready;                                                                   // cmd_mux_014:sink0_ready -> cmd_demux_003:src12_ready
	wire   [16:0] cmd_demux_003_src12_channel;                                                                 // cmd_demux_003:src12_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_003_src12_startofpacket;                                                           // cmd_demux_003:src12_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                                             // cmd_demux_003:src12_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_003_src13_valid;                                                                   // cmd_demux_003:src13_valid -> cmd_mux_015:sink0_valid
	wire  [133:0] cmd_demux_003_src13_data;                                                                    // cmd_demux_003:src13_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_003_src13_ready;                                                                   // cmd_mux_015:sink0_ready -> cmd_demux_003:src13_ready
	wire   [16:0] cmd_demux_003_src13_channel;                                                                 // cmd_demux_003:src13_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_003_src13_startofpacket;                                                           // cmd_demux_003:src13_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_003_src13_endofpacket;                                                             // cmd_demux_003:src13_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                    // cmd_demux_004:src0_valid -> cmd_mux_001:sink2_valid
	wire  [133:0] cmd_demux_004_src0_data;                                                                     // cmd_demux_004:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_004_src0_ready;                                                                    // cmd_mux_001:sink2_ready -> cmd_demux_004:src0_ready
	wire   [16:0] cmd_demux_004_src0_channel;                                                                  // cmd_demux_004:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                            // cmd_demux_004:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                              // cmd_demux_004:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                    // cmd_demux_004:src1_valid -> cmd_mux_003:sink2_valid
	wire  [133:0] cmd_demux_004_src1_data;                                                                     // cmd_demux_004:src1_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_004_src1_ready;                                                                    // cmd_mux_003:sink2_ready -> cmd_demux_004:src1_ready
	wire   [16:0] cmd_demux_004_src1_channel;                                                                  // cmd_demux_004:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_004_src1_startofpacket;                                                            // cmd_demux_004:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                              // cmd_demux_004:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                    // cmd_demux_004:src2_valid -> cmd_mux_004:sink2_valid
	wire  [133:0] cmd_demux_004_src2_data;                                                                     // cmd_demux_004:src2_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_004_src2_ready;                                                                    // cmd_mux_004:sink2_ready -> cmd_demux_004:src2_ready
	wire   [16:0] cmd_demux_004_src2_channel;                                                                  // cmd_demux_004:src2_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src2_startofpacket;                                                            // cmd_demux_004:src2_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                              // cmd_demux_004:src2_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src3_valid;                                                                    // cmd_demux_004:src3_valid -> cmd_mux_005:sink2_valid
	wire  [133:0] cmd_demux_004_src3_data;                                                                     // cmd_demux_004:src3_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_004_src3_ready;                                                                    // cmd_mux_005:sink2_ready -> cmd_demux_004:src3_ready
	wire   [16:0] cmd_demux_004_src3_channel;                                                                  // cmd_demux_004:src3_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src3_startofpacket;                                                            // cmd_demux_004:src3_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                              // cmd_demux_004:src3_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src4_valid;                                                                    // cmd_demux_004:src4_valid -> cmd_mux_006:sink2_valid
	wire  [133:0] cmd_demux_004_src4_data;                                                                     // cmd_demux_004:src4_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_004_src4_ready;                                                                    // cmd_mux_006:sink2_ready -> cmd_demux_004:src4_ready
	wire   [16:0] cmd_demux_004_src4_channel;                                                                  // cmd_demux_004:src4_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_004_src4_startofpacket;                                                            // cmd_demux_004:src4_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                              // cmd_demux_004:src4_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_004_src5_valid;                                                                    // cmd_demux_004:src5_valid -> cmd_mux_007:sink1_valid
	wire  [133:0] cmd_demux_004_src5_data;                                                                     // cmd_demux_004:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_004_src5_ready;                                                                    // cmd_mux_007:sink1_ready -> cmd_demux_004:src5_ready
	wire   [16:0] cmd_demux_004_src5_channel;                                                                  // cmd_demux_004:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_004_src5_startofpacket;                                                            // cmd_demux_004:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                              // cmd_demux_004:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_004_src6_valid;                                                                    // cmd_demux_004:src6_valid -> cmd_mux_008:sink1_valid
	wire  [133:0] cmd_demux_004_src6_data;                                                                     // cmd_demux_004:src6_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_004_src6_ready;                                                                    // cmd_mux_008:sink1_ready -> cmd_demux_004:src6_ready
	wire   [16:0] cmd_demux_004_src6_channel;                                                                  // cmd_demux_004:src6_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_004_src6_startofpacket;                                                            // cmd_demux_004:src6_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                              // cmd_demux_004:src6_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_004_src11_valid;                                                                   // cmd_demux_004:src11_valid -> cmd_mux_013:sink1_valid
	wire  [133:0] cmd_demux_004_src11_data;                                                                    // cmd_demux_004:src11_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_004_src11_ready;                                                                   // cmd_mux_013:sink1_ready -> cmd_demux_004:src11_ready
	wire   [16:0] cmd_demux_004_src11_channel;                                                                 // cmd_demux_004:src11_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_004_src11_startofpacket;                                                           // cmd_demux_004:src11_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_004_src11_endofpacket;                                                             // cmd_demux_004:src11_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_004_src12_valid;                                                                   // cmd_demux_004:src12_valid -> cmd_mux_014:sink1_valid
	wire  [133:0] cmd_demux_004_src12_data;                                                                    // cmd_demux_004:src12_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_004_src12_ready;                                                                   // cmd_mux_014:sink1_ready -> cmd_demux_004:src12_ready
	wire   [16:0] cmd_demux_004_src12_channel;                                                                 // cmd_demux_004:src12_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_004_src12_startofpacket;                                                           // cmd_demux_004:src12_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_004_src12_endofpacket;                                                             // cmd_demux_004:src12_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_004_src13_valid;                                                                   // cmd_demux_004:src13_valid -> cmd_mux_015:sink1_valid
	wire  [133:0] cmd_demux_004_src13_data;                                                                    // cmd_demux_004:src13_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_004_src13_ready;                                                                   // cmd_mux_015:sink1_ready -> cmd_demux_004:src13_ready
	wire   [16:0] cmd_demux_004_src13_channel;                                                                 // cmd_demux_004:src13_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_004_src13_startofpacket;                                                           // cmd_demux_004:src13_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_004_src13_endofpacket;                                                             // cmd_demux_004:src13_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                    // cmd_demux_006:src0_valid -> cmd_mux_016:sink3_valid
	wire  [133:0] cmd_demux_006_src0_data;                                                                     // cmd_demux_006:src0_data -> cmd_mux_016:sink3_data
	wire          cmd_demux_006_src0_ready;                                                                    // cmd_mux_016:sink3_ready -> cmd_demux_006:src0_ready
	wire   [16:0] cmd_demux_006_src0_channel;                                                                  // cmd_demux_006:src0_channel -> cmd_mux_016:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                                            // cmd_demux_006:src0_startofpacket -> cmd_mux_016:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                              // cmd_demux_006:src0_endofpacket -> cmd_mux_016:sink3_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                    // cmd_demux_007:src0_valid -> cmd_mux_016:sink4_valid
	wire  [133:0] cmd_demux_007_src0_data;                                                                     // cmd_demux_007:src0_data -> cmd_mux_016:sink4_data
	wire          cmd_demux_007_src0_ready;                                                                    // cmd_mux_016:sink4_ready -> cmd_demux_007:src0_ready
	wire   [16:0] cmd_demux_007_src0_channel;                                                                  // cmd_demux_007:src0_channel -> cmd_mux_016:sink4_channel
	wire          cmd_demux_007_src0_startofpacket;                                                            // cmd_demux_007:src0_startofpacket -> cmd_mux_016:sink4_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                              // cmd_demux_007:src0_endofpacket -> cmd_mux_016:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [169:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [16:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [169:0] rsp_demux_src1_data;                                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [16:0] rsp_demux_src1_channel;                                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                    // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [133:0] rsp_demux_001_src0_data;                                                                     // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                    // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire   [16:0] rsp_demux_001_src0_channel;                                                                  // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                            // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                              // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                    // rsp_demux_001:src1_valid -> rsp_mux_003:sink0_valid
	wire  [133:0] rsp_demux_001_src1_data;                                                                     // rsp_demux_001:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src1_ready;                                                                    // rsp_mux_003:sink0_ready -> rsp_demux_001:src1_ready
	wire   [16:0] rsp_demux_001_src1_channel;                                                                  // rsp_demux_001:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                            // rsp_demux_001:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                              // rsp_demux_001:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                    // rsp_demux_001:src2_valid -> rsp_mux_004:sink0_valid
	wire  [133:0] rsp_demux_001_src2_data;                                                                     // rsp_demux_001:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_001_src2_ready;                                                                    // rsp_mux_004:sink0_ready -> rsp_demux_001:src2_ready
	wire   [16:0] rsp_demux_001_src2_channel;                                                                  // rsp_demux_001:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                                            // rsp_demux_001:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                              // rsp_demux_001:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                    // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [133:0] rsp_demux_002_src0_data;                                                                     // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                    // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire   [16:0] rsp_demux_002_src0_channel;                                                                  // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                            // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                              // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                    // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [133:0] rsp_demux_003_src0_data;                                                                     // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                    // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire   [16:0] rsp_demux_003_src0_channel;                                                                  // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                            // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                              // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                    // rsp_demux_003:src1_valid -> rsp_mux_003:sink1_valid
	wire  [133:0] rsp_demux_003_src1_data;                                                                     // rsp_demux_003:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src1_ready;                                                                    // rsp_mux_003:sink1_ready -> rsp_demux_003:src1_ready
	wire   [16:0] rsp_demux_003_src1_channel;                                                                  // rsp_demux_003:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src1_startofpacket;                                                            // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                              // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                    // rsp_demux_003:src2_valid -> rsp_mux_004:sink1_valid
	wire  [133:0] rsp_demux_003_src2_data;                                                                     // rsp_demux_003:src2_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_003_src2_ready;                                                                    // rsp_mux_004:sink1_ready -> rsp_demux_003:src2_ready
	wire   [16:0] rsp_demux_003_src2_channel;                                                                  // rsp_demux_003:src2_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_003_src2_startofpacket;                                                            // rsp_demux_003:src2_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                              // rsp_demux_003:src2_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                    // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [133:0] rsp_demux_004_src0_data;                                                                     // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                    // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire   [16:0] rsp_demux_004_src0_channel;                                                                  // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                            // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                              // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                    // rsp_demux_004:src1_valid -> rsp_mux_003:sink2_valid
	wire  [133:0] rsp_demux_004_src1_data;                                                                     // rsp_demux_004:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_004_src1_ready;                                                                    // rsp_mux_003:sink2_ready -> rsp_demux_004:src1_ready
	wire   [16:0] rsp_demux_004_src1_channel;                                                                  // rsp_demux_004:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                                            // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                              // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                    // rsp_demux_004:src2_valid -> rsp_mux_004:sink2_valid
	wire  [133:0] rsp_demux_004_src2_data;                                                                     // rsp_demux_004:src2_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_004_src2_ready;                                                                    // rsp_mux_004:sink2_ready -> rsp_demux_004:src2_ready
	wire   [16:0] rsp_demux_004_src2_channel;                                                                  // rsp_demux_004:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_004_src2_startofpacket;                                                            // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                              // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                    // rsp_demux_005:src0_valid -> rsp_mux_002:sink5_valid
	wire  [133:0] rsp_demux_005_src0_data;                                                                     // rsp_demux_005:src0_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                    // rsp_mux_002:sink5_ready -> rsp_demux_005:src0_ready
	wire   [16:0] rsp_demux_005_src0_channel;                                                                  // rsp_demux_005:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                            // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                              // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                    // rsp_demux_005:src1_valid -> rsp_mux_003:sink3_valid
	wire  [133:0] rsp_demux_005_src1_data;                                                                     // rsp_demux_005:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_005_src1_ready;                                                                    // rsp_mux_003:sink3_ready -> rsp_demux_005:src1_ready
	wire   [16:0] rsp_demux_005_src1_channel;                                                                  // rsp_demux_005:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                                            // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                              // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                    // rsp_demux_005:src2_valid -> rsp_mux_004:sink3_valid
	wire  [133:0] rsp_demux_005_src2_data;                                                                     // rsp_demux_005:src2_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_005_src2_ready;                                                                    // rsp_mux_004:sink3_ready -> rsp_demux_005:src2_ready
	wire   [16:0] rsp_demux_005_src2_channel;                                                                  // rsp_demux_005:src2_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_005_src2_startofpacket;                                                            // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                              // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                    // rsp_demux_006:src0_valid -> rsp_mux_002:sink6_valid
	wire  [133:0] rsp_demux_006_src0_data;                                                                     // rsp_demux_006:src0_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                    // rsp_mux_002:sink6_ready -> rsp_demux_006:src0_ready
	wire   [16:0] rsp_demux_006_src0_channel;                                                                  // rsp_demux_006:src0_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                            // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                              // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                    // rsp_demux_006:src1_valid -> rsp_mux_003:sink4_valid
	wire  [133:0] rsp_demux_006_src1_data;                                                                     // rsp_demux_006:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_006_src1_ready;                                                                    // rsp_mux_003:sink4_ready -> rsp_demux_006:src1_ready
	wire   [16:0] rsp_demux_006_src1_channel;                                                                  // rsp_demux_006:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_006_src1_startofpacket;                                                            // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                              // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                    // rsp_demux_006:src2_valid -> rsp_mux_004:sink4_valid
	wire  [133:0] rsp_demux_006_src2_data;                                                                     // rsp_demux_006:src2_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_006_src2_ready;                                                                    // rsp_mux_004:sink4_ready -> rsp_demux_006:src2_ready
	wire   [16:0] rsp_demux_006_src2_channel;                                                                  // rsp_demux_006:src2_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_006_src2_startofpacket;                                                            // rsp_demux_006:src2_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                              // rsp_demux_006:src2_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                    // rsp_demux_007:src0_valid -> rsp_mux_003:sink5_valid
	wire  [133:0] rsp_demux_007_src0_data;                                                                     // rsp_demux_007:src0_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_007_src0_ready;                                                                    // rsp_mux_003:sink5_ready -> rsp_demux_007:src0_ready
	wire   [16:0] rsp_demux_007_src0_channel;                                                                  // rsp_demux_007:src0_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_007_src0_startofpacket;                                                            // rsp_demux_007:src0_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                              // rsp_demux_007:src0_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                    // rsp_demux_007:src1_valid -> rsp_mux_004:sink5_valid
	wire  [133:0] rsp_demux_007_src1_data;                                                                     // rsp_demux_007:src1_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_007_src1_ready;                                                                    // rsp_mux_004:sink5_ready -> rsp_demux_007:src1_ready
	wire   [16:0] rsp_demux_007_src1_channel;                                                                  // rsp_demux_007:src1_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                            // rsp_demux_007:src1_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                              // rsp_demux_007:src1_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                    // rsp_demux_008:src0_valid -> rsp_mux_003:sink6_valid
	wire  [133:0] rsp_demux_008_src0_data;                                                                     // rsp_demux_008:src0_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_008_src0_ready;                                                                    // rsp_mux_003:sink6_ready -> rsp_demux_008:src0_ready
	wire   [16:0] rsp_demux_008_src0_channel;                                                                  // rsp_demux_008:src0_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_008_src0_startofpacket;                                                            // rsp_demux_008:src0_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                              // rsp_demux_008:src0_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                    // rsp_demux_008:src1_valid -> rsp_mux_004:sink6_valid
	wire  [133:0] rsp_demux_008_src1_data;                                                                     // rsp_demux_008:src1_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_008_src1_ready;                                                                    // rsp_mux_004:sink6_ready -> rsp_demux_008:src1_ready
	wire   [16:0] rsp_demux_008_src1_channel;                                                                  // rsp_demux_008:src1_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_008_src1_startofpacket;                                                            // rsp_demux_008:src1_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                              // rsp_demux_008:src1_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                    // rsp_demux_013:src0_valid -> rsp_mux_003:sink11_valid
	wire  [133:0] rsp_demux_013_src0_data;                                                                     // rsp_demux_013:src0_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_013_src0_ready;                                                                    // rsp_mux_003:sink11_ready -> rsp_demux_013:src0_ready
	wire   [16:0] rsp_demux_013_src0_channel;                                                                  // rsp_demux_013:src0_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_013_src0_startofpacket;                                                            // rsp_demux_013:src0_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                              // rsp_demux_013:src0_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_013_src1_valid;                                                                    // rsp_demux_013:src1_valid -> rsp_mux_004:sink11_valid
	wire  [133:0] rsp_demux_013_src1_data;                                                                     // rsp_demux_013:src1_data -> rsp_mux_004:sink11_data
	wire          rsp_demux_013_src1_ready;                                                                    // rsp_mux_004:sink11_ready -> rsp_demux_013:src1_ready
	wire   [16:0] rsp_demux_013_src1_channel;                                                                  // rsp_demux_013:src1_channel -> rsp_mux_004:sink11_channel
	wire          rsp_demux_013_src1_startofpacket;                                                            // rsp_demux_013:src1_startofpacket -> rsp_mux_004:sink11_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                              // rsp_demux_013:src1_endofpacket -> rsp_mux_004:sink11_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                    // rsp_demux_014:src0_valid -> rsp_mux_003:sink12_valid
	wire  [133:0] rsp_demux_014_src0_data;                                                                     // rsp_demux_014:src0_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_014_src0_ready;                                                                    // rsp_mux_003:sink12_ready -> rsp_demux_014:src0_ready
	wire   [16:0] rsp_demux_014_src0_channel;                                                                  // rsp_demux_014:src0_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_014_src0_startofpacket;                                                            // rsp_demux_014:src0_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                              // rsp_demux_014:src0_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                    // rsp_demux_014:src1_valid -> rsp_mux_004:sink12_valid
	wire  [133:0] rsp_demux_014_src1_data;                                                                     // rsp_demux_014:src1_data -> rsp_mux_004:sink12_data
	wire          rsp_demux_014_src1_ready;                                                                    // rsp_mux_004:sink12_ready -> rsp_demux_014:src1_ready
	wire   [16:0] rsp_demux_014_src1_channel;                                                                  // rsp_demux_014:src1_channel -> rsp_mux_004:sink12_channel
	wire          rsp_demux_014_src1_startofpacket;                                                            // rsp_demux_014:src1_startofpacket -> rsp_mux_004:sink12_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                              // rsp_demux_014:src1_endofpacket -> rsp_mux_004:sink12_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                    // rsp_demux_015:src0_valid -> rsp_mux_003:sink13_valid
	wire  [133:0] rsp_demux_015_src0_data;                                                                     // rsp_demux_015:src0_data -> rsp_mux_003:sink13_data
	wire          rsp_demux_015_src0_ready;                                                                    // rsp_mux_003:sink13_ready -> rsp_demux_015:src0_ready
	wire   [16:0] rsp_demux_015_src0_channel;                                                                  // rsp_demux_015:src0_channel -> rsp_mux_003:sink13_channel
	wire          rsp_demux_015_src0_startofpacket;                                                            // rsp_demux_015:src0_startofpacket -> rsp_mux_003:sink13_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                              // rsp_demux_015:src0_endofpacket -> rsp_mux_003:sink13_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                    // rsp_demux_015:src1_valid -> rsp_mux_004:sink13_valid
	wire  [133:0] rsp_demux_015_src1_data;                                                                     // rsp_demux_015:src1_data -> rsp_mux_004:sink13_data
	wire          rsp_demux_015_src1_ready;                                                                    // rsp_mux_004:sink13_ready -> rsp_demux_015:src1_ready
	wire   [16:0] rsp_demux_015_src1_channel;                                                                  // rsp_demux_015:src1_channel -> rsp_mux_004:sink13_channel
	wire          rsp_demux_015_src1_startofpacket;                                                            // rsp_demux_015:src1_startofpacket -> rsp_mux_004:sink13_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                              // rsp_demux_015:src1_endofpacket -> rsp_mux_004:sink13_endofpacket
	wire          rsp_demux_016_src3_valid;                                                                    // rsp_demux_016:src3_valid -> rsp_mux_006:sink0_valid
	wire  [133:0] rsp_demux_016_src3_data;                                                                     // rsp_demux_016:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_016_src3_ready;                                                                    // rsp_mux_006:sink0_ready -> rsp_demux_016:src3_ready
	wire   [16:0] rsp_demux_016_src3_channel;                                                                  // rsp_demux_016:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_016_src3_startofpacket;                                                            // rsp_demux_016:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_016_src3_endofpacket;                                                              // rsp_demux_016:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_016_src4_valid;                                                                    // rsp_demux_016:src4_valid -> rsp_mux_007:sink0_valid
	wire  [133:0] rsp_demux_016_src4_data;                                                                     // rsp_demux_016:src4_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_016_src4_ready;                                                                    // rsp_mux_007:sink0_ready -> rsp_demux_016:src4_ready
	wire   [16:0] rsp_demux_016_src4_channel;                                                                  // rsp_demux_016:src4_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_016_src4_startofpacket;                                                            // rsp_demux_016:src4_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_016_src4_endofpacket;                                                              // rsp_demux_016:src4_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                    // cmd_demux_002:src0_valid -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [133:0] cmd_demux_002_src0_data;                                                                     // cmd_demux_002:src0_data -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                    // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [16:0] cmd_demux_002_src0_channel;                                                                  // cmd_demux_002:src0_channel -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                            // cmd_demux_002:src0_startofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                              // cmd_demux_002:src0_endofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;                  // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire  [169:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;                   // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;                  // cmd_mux:sink2_ready -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire   [16:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;                // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;          // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;            // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                    // cmd_demux_003:src9_valid -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_valid
	wire  [133:0] cmd_demux_003_src9_data;                                                                     // cmd_demux_003:src9_data -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_003_src9_ready;                                                                    // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_003:src9_ready
	wire   [16:0] cmd_demux_003_src9_channel;                                                                  // cmd_demux_003:src9_channel -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src9_startofpacket;                                                            // cmd_demux_003:src9_startofpacket -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                              // cmd_demux_003:src9_endofpacket -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_004_src9_valid;                                                                    // cmd_demux_004:src9_valid -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_valid
	wire  [133:0] cmd_demux_004_src9_data;                                                                     // cmd_demux_004:src9_data -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_004_src9_ready;                                                                    // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_004:src9_ready
	wire   [16:0] cmd_demux_004_src9_channel;                                                                  // cmd_demux_004:src9_channel -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src9_startofpacket;                                                            // cmd_demux_004:src9_startofpacket -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                              // cmd_demux_004:src9_endofpacket -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                    // cmd_demux_005:src0_valid -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_valid
	wire  [106:0] cmd_demux_005_src0_data;                                                                     // cmd_demux_005:src0_data -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_data
	wire          cmd_demux_005_src0_ready;                                                                    // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_ready -> cmd_demux_005:src0_ready
	wire   [16:0] cmd_demux_005_src0_channel;                                                                  // cmd_demux_005:src0_channel -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                            // cmd_demux_005:src0_startofpacket -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                              // cmd_demux_005:src0_endofpacket -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:in_endofpacket
	wire          msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_valid;                                  // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_valid -> cmd_mux_016:sink2_valid
	wire  [133:0] msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_data;                                   // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_data -> cmd_mux_016:sink2_data
	wire          msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_ready;                                  // cmd_mux_016:sink2_ready -> msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_ready
	wire   [16:0] msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_channel;                                // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_channel -> cmd_mux_016:sink2_channel
	wire          msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_startofpacket;                          // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_endofpacket;                            // msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          rsp_demux_src2_valid;                                                                        // rsp_demux:src2_valid -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_valid
	wire  [169:0] rsp_demux_src2_data;                                                                         // rsp_demux:src2_data -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                                        // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire   [16:0] rsp_demux_src2_channel;                                                                      // rsp_demux:src2_channel -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                                // rsp_demux:src2_startofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                  // rsp_demux:src2_endofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid;                  // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [133:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data;                   // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready;                  // rsp_mux_002:sink0_ready -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_ready
	wire   [16:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel;                // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket;          // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket;            // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                    // rsp_demux_011:src0_valid -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_valid
	wire  [241:0] rsp_demux_011_src0_data;                                                                     // rsp_demux_011:src0_data -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_011_src0_ready;                                                                    // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire   [16:0] rsp_demux_011_src0_channel;                                                                  // rsp_demux_011:src0_channel -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                            // rsp_demux_011:src0_startofpacket -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                              // rsp_demux_011:src0_endofpacket -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                    // rsp_demux_011:src1_valid -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_valid
	wire  [241:0] rsp_demux_011_src1_data;                                                                     // rsp_demux_011:src1_data -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_011_src1_ready;                                                                    // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_011:src1_ready
	wire   [16:0] rsp_demux_011_src1_channel;                                                                  // rsp_demux_011:src1_channel -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src1_startofpacket;                                                            // rsp_demux_011:src1_startofpacket -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                              // rsp_demux_011:src1_endofpacket -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_016_src2_valid;                                                                    // rsp_demux_016:src2_valid -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_valid
	wire  [133:0] rsp_demux_016_src2_data;                                                                     // rsp_demux_016:src2_data -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_data
	wire          rsp_demux_016_src2_ready;                                                                    // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_ready -> rsp_demux_016:src2_ready
	wire   [16:0] rsp_demux_016_src2_channel;                                                                  // rsp_demux_016:src2_channel -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_channel
	wire          rsp_demux_016_src2_startofpacket;                                                            // rsp_demux_016:src2_startofpacket -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                              // rsp_demux_016:src2_endofpacket -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:in_endofpacket
	wire          onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_valid;                                  // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_valid -> rsp_mux_005:sink0_valid
	wire  [106:0] onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_data;                                   // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_data -> rsp_mux_005:sink0_data
	wire          onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_ready;                                  // rsp_mux_005:sink0_ready -> onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_ready
	wire   [16:0] onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_channel;                                // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_channel -> rsp_mux_005:sink0_channel
	wire          onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_startofpacket;                          // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_endofpacket;                            // onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                    // cmd_demux_003:src7_valid -> crosser:in_valid
	wire  [133:0] cmd_demux_003_src7_data;                                                                     // cmd_demux_003:src7_data -> crosser:in_data
	wire          cmd_demux_003_src7_ready;                                                                    // crosser:in_ready -> cmd_demux_003:src7_ready
	wire   [16:0] cmd_demux_003_src7_channel;                                                                  // cmd_demux_003:src7_channel -> crosser:in_channel
	wire          cmd_demux_003_src7_startofpacket;                                                            // cmd_demux_003:src7_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                              // cmd_demux_003:src7_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                           // crosser:out_valid -> cmd_mux_009:sink0_valid
	wire  [133:0] crosser_out_data;                                                                            // crosser:out_data -> cmd_mux_009:sink0_data
	wire          crosser_out_ready;                                                                           // cmd_mux_009:sink0_ready -> crosser:out_ready
	wire   [16:0] crosser_out_channel;                                                                         // crosser:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_out_startofpacket;                                                                   // crosser:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                     // crosser:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                    // cmd_demux_003:src8_valid -> crosser_001:in_valid
	wire  [133:0] cmd_demux_003_src8_data;                                                                     // cmd_demux_003:src8_data -> crosser_001:in_data
	wire          cmd_demux_003_src8_ready;                                                                    // crosser_001:in_ready -> cmd_demux_003:src8_ready
	wire   [16:0] cmd_demux_003_src8_channel;                                                                  // cmd_demux_003:src8_channel -> crosser_001:in_channel
	wire          cmd_demux_003_src8_startofpacket;                                                            // cmd_demux_003:src8_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                              // cmd_demux_003:src8_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                       // crosser_001:out_valid -> cmd_mux_010:sink0_valid
	wire  [133:0] crosser_001_out_data;                                                                        // crosser_001:out_data -> cmd_mux_010:sink0_data
	wire          crosser_001_out_ready;                                                                       // cmd_mux_010:sink0_ready -> crosser_001:out_ready
	wire   [16:0] crosser_001_out_channel;                                                                     // crosser_001:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_001_out_startofpacket;                                                               // crosser_001:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                 // crosser_001:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_003_src10_valid;                                                                   // cmd_demux_003:src10_valid -> crosser_002:in_valid
	wire  [133:0] cmd_demux_003_src10_data;                                                                    // cmd_demux_003:src10_data -> crosser_002:in_data
	wire          cmd_demux_003_src10_ready;                                                                   // crosser_002:in_ready -> cmd_demux_003:src10_ready
	wire   [16:0] cmd_demux_003_src10_channel;                                                                 // cmd_demux_003:src10_channel -> crosser_002:in_channel
	wire          cmd_demux_003_src10_startofpacket;                                                           // cmd_demux_003:src10_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                             // cmd_demux_003:src10_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                       // crosser_002:out_valid -> cmd_mux_012:sink0_valid
	wire  [133:0] crosser_002_out_data;                                                                        // crosser_002:out_data -> cmd_mux_012:sink0_data
	wire          crosser_002_out_ready;                                                                       // cmd_mux_012:sink0_ready -> crosser_002:out_ready
	wire   [16:0] crosser_002_out_channel;                                                                     // crosser_002:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_002_out_startofpacket;                                                               // crosser_002:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                 // crosser_002:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_003_src14_valid;                                                                   // cmd_demux_003:src14_valid -> crosser_003:in_valid
	wire  [133:0] cmd_demux_003_src14_data;                                                                    // cmd_demux_003:src14_data -> crosser_003:in_data
	wire          cmd_demux_003_src14_ready;                                                                   // crosser_003:in_ready -> cmd_demux_003:src14_ready
	wire   [16:0] cmd_demux_003_src14_channel;                                                                 // cmd_demux_003:src14_channel -> crosser_003:in_channel
	wire          cmd_demux_003_src14_startofpacket;                                                           // cmd_demux_003:src14_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_003_src14_endofpacket;                                                             // cmd_demux_003:src14_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                       // crosser_003:out_valid -> cmd_mux_016:sink0_valid
	wire  [133:0] crosser_003_out_data;                                                                        // crosser_003:out_data -> cmd_mux_016:sink0_data
	wire          crosser_003_out_ready;                                                                       // cmd_mux_016:sink0_ready -> crosser_003:out_ready
	wire   [16:0] crosser_003_out_channel;                                                                     // crosser_003:out_channel -> cmd_mux_016:sink0_channel
	wire          crosser_003_out_startofpacket;                                                               // crosser_003:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                 // crosser_003:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_004_src7_valid;                                                                    // cmd_demux_004:src7_valid -> crosser_004:in_valid
	wire  [133:0] cmd_demux_004_src7_data;                                                                     // cmd_demux_004:src7_data -> crosser_004:in_data
	wire          cmd_demux_004_src7_ready;                                                                    // crosser_004:in_ready -> cmd_demux_004:src7_ready
	wire   [16:0] cmd_demux_004_src7_channel;                                                                  // cmd_demux_004:src7_channel -> crosser_004:in_channel
	wire          cmd_demux_004_src7_startofpacket;                                                            // cmd_demux_004:src7_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                              // cmd_demux_004:src7_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                       // crosser_004:out_valid -> cmd_mux_009:sink1_valid
	wire  [133:0] crosser_004_out_data;                                                                        // crosser_004:out_data -> cmd_mux_009:sink1_data
	wire          crosser_004_out_ready;                                                                       // cmd_mux_009:sink1_ready -> crosser_004:out_ready
	wire   [16:0] crosser_004_out_channel;                                                                     // crosser_004:out_channel -> cmd_mux_009:sink1_channel
	wire          crosser_004_out_startofpacket;                                                               // crosser_004:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                                 // crosser_004:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_004_src8_valid;                                                                    // cmd_demux_004:src8_valid -> crosser_005:in_valid
	wire  [133:0] cmd_demux_004_src8_data;                                                                     // cmd_demux_004:src8_data -> crosser_005:in_data
	wire          cmd_demux_004_src8_ready;                                                                    // crosser_005:in_ready -> cmd_demux_004:src8_ready
	wire   [16:0] cmd_demux_004_src8_channel;                                                                  // cmd_demux_004:src8_channel -> crosser_005:in_channel
	wire          cmd_demux_004_src8_startofpacket;                                                            // cmd_demux_004:src8_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                              // cmd_demux_004:src8_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                       // crosser_005:out_valid -> cmd_mux_010:sink1_valid
	wire  [133:0] crosser_005_out_data;                                                                        // crosser_005:out_data -> cmd_mux_010:sink1_data
	wire          crosser_005_out_ready;                                                                       // cmd_mux_010:sink1_ready -> crosser_005:out_ready
	wire   [16:0] crosser_005_out_channel;                                                                     // crosser_005:out_channel -> cmd_mux_010:sink1_channel
	wire          crosser_005_out_startofpacket;                                                               // crosser_005:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                                                 // crosser_005:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_004_src10_valid;                                                                   // cmd_demux_004:src10_valid -> crosser_006:in_valid
	wire  [133:0] cmd_demux_004_src10_data;                                                                    // cmd_demux_004:src10_data -> crosser_006:in_data
	wire          cmd_demux_004_src10_ready;                                                                   // crosser_006:in_ready -> cmd_demux_004:src10_ready
	wire   [16:0] cmd_demux_004_src10_channel;                                                                 // cmd_demux_004:src10_channel -> crosser_006:in_channel
	wire          cmd_demux_004_src10_startofpacket;                                                           // cmd_demux_004:src10_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                             // cmd_demux_004:src10_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                       // crosser_006:out_valid -> cmd_mux_012:sink1_valid
	wire  [133:0] crosser_006_out_data;                                                                        // crosser_006:out_data -> cmd_mux_012:sink1_data
	wire          crosser_006_out_ready;                                                                       // cmd_mux_012:sink1_ready -> crosser_006:out_ready
	wire   [16:0] crosser_006_out_channel;                                                                     // crosser_006:out_channel -> cmd_mux_012:sink1_channel
	wire          crosser_006_out_startofpacket;                                                               // crosser_006:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                                                 // crosser_006:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_004_src14_valid;                                                                   // cmd_demux_004:src14_valid -> crosser_007:in_valid
	wire  [133:0] cmd_demux_004_src14_data;                                                                    // cmd_demux_004:src14_data -> crosser_007:in_data
	wire          cmd_demux_004_src14_ready;                                                                   // crosser_007:in_ready -> cmd_demux_004:src14_ready
	wire   [16:0] cmd_demux_004_src14_channel;                                                                 // cmd_demux_004:src14_channel -> crosser_007:in_channel
	wire          cmd_demux_004_src14_startofpacket;                                                           // cmd_demux_004:src14_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_004_src14_endofpacket;                                                             // cmd_demux_004:src14_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                       // crosser_007:out_valid -> cmd_mux_016:sink1_valid
	wire  [133:0] crosser_007_out_data;                                                                        // crosser_007:out_data -> cmd_mux_016:sink1_data
	wire          crosser_007_out_ready;                                                                       // cmd_mux_016:sink1_ready -> crosser_007:out_ready
	wire   [16:0] crosser_007_out_channel;                                                                     // crosser_007:out_channel -> cmd_mux_016:sink1_channel
	wire          crosser_007_out_startofpacket;                                                               // crosser_007:out_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                                 // crosser_007:out_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                    // rsp_demux_009:src0_valid -> crosser_008:in_valid
	wire  [133:0] rsp_demux_009_src0_data;                                                                     // rsp_demux_009:src0_data -> crosser_008:in_data
	wire          rsp_demux_009_src0_ready;                                                                    // crosser_008:in_ready -> rsp_demux_009:src0_ready
	wire   [16:0] rsp_demux_009_src0_channel;                                                                  // rsp_demux_009:src0_channel -> crosser_008:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                            // rsp_demux_009:src0_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                              // rsp_demux_009:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                       // crosser_008:out_valid -> rsp_mux_003:sink7_valid
	wire  [133:0] crosser_008_out_data;                                                                        // crosser_008:out_data -> rsp_mux_003:sink7_data
	wire          crosser_008_out_ready;                                                                       // rsp_mux_003:sink7_ready -> crosser_008:out_ready
	wire   [16:0] crosser_008_out_channel;                                                                     // crosser_008:out_channel -> rsp_mux_003:sink7_channel
	wire          crosser_008_out_startofpacket;                                                               // crosser_008:out_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          crosser_008_out_endofpacket;                                                                 // crosser_008:out_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                    // rsp_demux_009:src1_valid -> crosser_009:in_valid
	wire  [133:0] rsp_demux_009_src1_data;                                                                     // rsp_demux_009:src1_data -> crosser_009:in_data
	wire          rsp_demux_009_src1_ready;                                                                    // crosser_009:in_ready -> rsp_demux_009:src1_ready
	wire   [16:0] rsp_demux_009_src1_channel;                                                                  // rsp_demux_009:src1_channel -> crosser_009:in_channel
	wire          rsp_demux_009_src1_startofpacket;                                                            // rsp_demux_009:src1_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                              // rsp_demux_009:src1_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                       // crosser_009:out_valid -> rsp_mux_004:sink7_valid
	wire  [133:0] crosser_009_out_data;                                                                        // crosser_009:out_data -> rsp_mux_004:sink7_data
	wire          crosser_009_out_ready;                                                                       // rsp_mux_004:sink7_ready -> crosser_009:out_ready
	wire   [16:0] crosser_009_out_channel;                                                                     // crosser_009:out_channel -> rsp_mux_004:sink7_channel
	wire          crosser_009_out_startofpacket;                                                               // crosser_009:out_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          crosser_009_out_endofpacket;                                                                 // crosser_009:out_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                    // rsp_demux_010:src0_valid -> crosser_010:in_valid
	wire  [133:0] rsp_demux_010_src0_data;                                                                     // rsp_demux_010:src0_data -> crosser_010:in_data
	wire          rsp_demux_010_src0_ready;                                                                    // crosser_010:in_ready -> rsp_demux_010:src0_ready
	wire   [16:0] rsp_demux_010_src0_channel;                                                                  // rsp_demux_010:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                            // rsp_demux_010:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                              // rsp_demux_010:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                       // crosser_010:out_valid -> rsp_mux_003:sink8_valid
	wire  [133:0] crosser_010_out_data;                                                                        // crosser_010:out_data -> rsp_mux_003:sink8_data
	wire          crosser_010_out_ready;                                                                       // rsp_mux_003:sink8_ready -> crosser_010:out_ready
	wire   [16:0] crosser_010_out_channel;                                                                     // crosser_010:out_channel -> rsp_mux_003:sink8_channel
	wire          crosser_010_out_startofpacket;                                                               // crosser_010:out_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          crosser_010_out_endofpacket;                                                                 // crosser_010:out_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                    // rsp_demux_010:src1_valid -> crosser_011:in_valid
	wire  [133:0] rsp_demux_010_src1_data;                                                                     // rsp_demux_010:src1_data -> crosser_011:in_data
	wire          rsp_demux_010_src1_ready;                                                                    // crosser_011:in_ready -> rsp_demux_010:src1_ready
	wire   [16:0] rsp_demux_010_src1_channel;                                                                  // rsp_demux_010:src1_channel -> crosser_011:in_channel
	wire          rsp_demux_010_src1_startofpacket;                                                            // rsp_demux_010:src1_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                              // rsp_demux_010:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                       // crosser_011:out_valid -> rsp_mux_004:sink8_valid
	wire  [133:0] crosser_011_out_data;                                                                        // crosser_011:out_data -> rsp_mux_004:sink8_data
	wire          crosser_011_out_ready;                                                                       // rsp_mux_004:sink8_ready -> crosser_011:out_ready
	wire   [16:0] crosser_011_out_channel;                                                                     // crosser_011:out_channel -> rsp_mux_004:sink8_channel
	wire          crosser_011_out_startofpacket;                                                               // crosser_011:out_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          crosser_011_out_endofpacket;                                                                 // crosser_011:out_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                    // rsp_demux_012:src0_valid -> crosser_012:in_valid
	wire  [133:0] rsp_demux_012_src0_data;                                                                     // rsp_demux_012:src0_data -> crosser_012:in_data
	wire          rsp_demux_012_src0_ready;                                                                    // crosser_012:in_ready -> rsp_demux_012:src0_ready
	wire   [16:0] rsp_demux_012_src0_channel;                                                                  // rsp_demux_012:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                            // rsp_demux_012:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                              // rsp_demux_012:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                       // crosser_012:out_valid -> rsp_mux_003:sink10_valid
	wire  [133:0] crosser_012_out_data;                                                                        // crosser_012:out_data -> rsp_mux_003:sink10_data
	wire          crosser_012_out_ready;                                                                       // rsp_mux_003:sink10_ready -> crosser_012:out_ready
	wire   [16:0] crosser_012_out_channel;                                                                     // crosser_012:out_channel -> rsp_mux_003:sink10_channel
	wire          crosser_012_out_startofpacket;                                                               // crosser_012:out_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          crosser_012_out_endofpacket;                                                                 // crosser_012:out_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                    // rsp_demux_012:src1_valid -> crosser_013:in_valid
	wire  [133:0] rsp_demux_012_src1_data;                                                                     // rsp_demux_012:src1_data -> crosser_013:in_data
	wire          rsp_demux_012_src1_ready;                                                                    // crosser_013:in_ready -> rsp_demux_012:src1_ready
	wire   [16:0] rsp_demux_012_src1_channel;                                                                  // rsp_demux_012:src1_channel -> crosser_013:in_channel
	wire          rsp_demux_012_src1_startofpacket;                                                            // rsp_demux_012:src1_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                              // rsp_demux_012:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                       // crosser_013:out_valid -> rsp_mux_004:sink10_valid
	wire  [133:0] crosser_013_out_data;                                                                        // crosser_013:out_data -> rsp_mux_004:sink10_data
	wire          crosser_013_out_ready;                                                                       // rsp_mux_004:sink10_ready -> crosser_013:out_ready
	wire   [16:0] crosser_013_out_channel;                                                                     // crosser_013:out_channel -> rsp_mux_004:sink10_channel
	wire          crosser_013_out_startofpacket;                                                               // crosser_013:out_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          crosser_013_out_endofpacket;                                                                 // crosser_013:out_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                    // rsp_demux_016:src0_valid -> crosser_014:in_valid
	wire  [133:0] rsp_demux_016_src0_data;                                                                     // rsp_demux_016:src0_data -> crosser_014:in_data
	wire          rsp_demux_016_src0_ready;                                                                    // crosser_014:in_ready -> rsp_demux_016:src0_ready
	wire   [16:0] rsp_demux_016_src0_channel;                                                                  // rsp_demux_016:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                                            // rsp_demux_016:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                              // rsp_demux_016:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                                       // crosser_014:out_valid -> rsp_mux_003:sink14_valid
	wire  [133:0] crosser_014_out_data;                                                                        // crosser_014:out_data -> rsp_mux_003:sink14_data
	wire          crosser_014_out_ready;                                                                       // rsp_mux_003:sink14_ready -> crosser_014:out_ready
	wire   [16:0] crosser_014_out_channel;                                                                     // crosser_014:out_channel -> rsp_mux_003:sink14_channel
	wire          crosser_014_out_startofpacket;                                                               // crosser_014:out_startofpacket -> rsp_mux_003:sink14_startofpacket
	wire          crosser_014_out_endofpacket;                                                                 // crosser_014:out_endofpacket -> rsp_mux_003:sink14_endofpacket
	wire          rsp_demux_016_src1_valid;                                                                    // rsp_demux_016:src1_valid -> crosser_015:in_valid
	wire  [133:0] rsp_demux_016_src1_data;                                                                     // rsp_demux_016:src1_data -> crosser_015:in_data
	wire          rsp_demux_016_src1_ready;                                                                    // crosser_015:in_ready -> rsp_demux_016:src1_ready
	wire   [16:0] rsp_demux_016_src1_channel;                                                                  // rsp_demux_016:src1_channel -> crosser_015:in_channel
	wire          rsp_demux_016_src1_startofpacket;                                                            // rsp_demux_016:src1_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                              // rsp_demux_016:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                                       // crosser_015:out_valid -> rsp_mux_004:sink14_valid
	wire  [133:0] crosser_015_out_data;                                                                        // crosser_015:out_data -> rsp_mux_004:sink14_data
	wire          crosser_015_out_ready;                                                                       // rsp_mux_004:sink14_ready -> crosser_015:out_ready
	wire   [16:0] crosser_015_out_channel;                                                                     // crosser_015:out_channel -> rsp_mux_004:sink14_channel
	wire          crosser_015_out_startofpacket;                                                               // crosser_015:out_startofpacket -> rsp_mux_004:sink14_startofpacket
	wire          crosser_015_out_endofpacket;                                                                 // crosser_015:out_endofpacket -> rsp_mux_004:sink14_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_valid -> crosser_016:in_valid
	wire  [241:0] hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_data -> crosser_016:in_data
	wire          hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready;         // crosser_016:in_ready -> hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_channel -> crosser_016:in_channel
	wire          hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_startofpacket -> crosser_016:in_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                                       // crosser_016:out_valid -> cmd_mux_011:sink0_valid
	wire  [241:0] crosser_016_out_data;                                                                        // crosser_016:out_data -> cmd_mux_011:sink0_data
	wire          crosser_016_out_ready;                                                                       // cmd_mux_011:sink0_ready -> crosser_016:out_ready
	wire   [16:0] crosser_016_out_channel;                                                                     // crosser_016:out_channel -> cmd_mux_011:sink0_channel
	wire          crosser_016_out_startofpacket;                                                               // crosser_016:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          crosser_016_out_endofpacket;                                                                 // crosser_016:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_valid -> crosser_017:in_valid
	wire  [241:0] hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_data -> crosser_017:in_data
	wire          hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready;         // crosser_017:in_ready -> hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_ready
	wire   [16:0] hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_channel -> crosser_017:in_channel
	wire          hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_startofpacket -> crosser_017:in_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter:out_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                                       // crosser_017:out_valid -> cmd_mux_011:sink1_valid
	wire  [241:0] crosser_017_out_data;                                                                        // crosser_017:out_data -> cmd_mux_011:sink1_data
	wire          crosser_017_out_ready;                                                                       // cmd_mux_011:sink1_ready -> crosser_017:out_ready
	wire   [16:0] crosser_017_out_channel;                                                                     // crosser_017:out_channel -> cmd_mux_011:sink1_channel
	wire          crosser_017_out_startofpacket;                                                               // crosser_017:out_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          crosser_017_out_endofpacket;                                                                 // crosser_017:out_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid;         // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_valid -> crosser_018:in_valid
	wire  [133:0] msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data;          // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_data -> crosser_018:in_data
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready;         // crosser_018:in_ready -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_ready
	wire   [16:0] msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel;       // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_channel -> crosser_018:in_channel
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket; // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_startofpacket -> crosser_018:in_startofpacket
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket;   // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                                       // crosser_018:out_valid -> rsp_mux_003:sink9_valid
	wire  [133:0] crosser_018_out_data;                                                                        // crosser_018:out_data -> rsp_mux_003:sink9_data
	wire          crosser_018_out_ready;                                                                       // rsp_mux_003:sink9_ready -> crosser_018:out_ready
	wire   [16:0] crosser_018_out_channel;                                                                     // crosser_018:out_channel -> rsp_mux_003:sink9_channel
	wire          crosser_018_out_startofpacket;                                                               // crosser_018:out_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          crosser_018_out_endofpacket;                                                                 // crosser_018:out_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid;         // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_valid -> crosser_019:in_valid
	wire  [133:0] msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data;          // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_data -> crosser_019:in_data
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready;         // crosser_019:in_ready -> msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_ready
	wire   [16:0] msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel;       // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_channel -> crosser_019:in_channel
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket; // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_startofpacket -> crosser_019:in_startofpacket
	wire          msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket;   // msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                                       // crosser_019:out_valid -> rsp_mux_004:sink9_valid
	wire  [133:0] crosser_019_out_data;                                                                        // crosser_019:out_data -> rsp_mux_004:sink9_data
	wire          crosser_019_out_ready;                                                                       // rsp_mux_004:sink9_ready -> crosser_019:out_ready
	wire   [16:0] crosser_019_out_channel;                                                                     // crosser_019:out_channel -> rsp_mux_004:sink9_channel
	wire          crosser_019_out_startofpacket;                                                               // crosser_019:out_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          crosser_019_out_endofpacket;                                                                 // crosser_019:out_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire   [16:0] fpga_only_master_master_limiter_cmd_valid_data;                                              // fpga_only_master_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [16:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [16:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                                              // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                                               // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                               // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                                // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                               // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                               // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                      // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                       // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_001:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                           // avalon_st_adapter_001:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                            // avalon_st_adapter_001:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                           // avalon_st_adapter_001:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid;                                   // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data;                                    // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_002:in_0_ready -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                           // avalon_st_adapter_002:out_0_valid -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                            // avalon_st_adapter_002:out_0_data -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                           // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                           // avalon_st_adapter_002:out_0_error -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                                         // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                                          // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_003:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                           // avalon_st_adapter_003:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                            // avalon_st_adapter_003:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                           // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                           // avalon_st_adapter_003:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_out_valid;                                                       // led_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_out_data;                                                        // led_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_out_ready;                                                       // avalon_st_adapter_004:in_0_ready -> led_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                           // avalon_st_adapter_004:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                            // avalon_st_adapter_004:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                           // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                           // avalon_st_adapter_004:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire          dipsw_pio_s1_agent_rdata_fifo_out_valid;                                                     // dipsw_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_out_data;                                                      // dipsw_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          dipsw_pio_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_005:in_0_ready -> dipsw_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                           // avalon_st_adapter_005:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                            // avalon_st_adapter_005:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                           // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                           // avalon_st_adapter_005:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_out_valid;                                                    // button_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_out_data;                                                     // button_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_006:in_0_ready -> button_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                           // avalon_st_adapter_006:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                            // avalon_st_adapter_006:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                           // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                           // avalon_st_adapter_006:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_valid;                                // i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_data;                                 // i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_007:in_0_ready -> i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                           // avalon_st_adapter_007:out_0_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                            // avalon_st_adapter_007:out_0_data -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                           // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                           // avalon_st_adapter_007:out_0_error -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_valid;                              // i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_data;                               // i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_008:in_0_ready -> i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                           // avalon_st_adapter_008:out_0_valid -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                            // avalon_st_adapter_008:out_0_data -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                           // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                           // avalon_st_adapter_008:out_0_error -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_valid;                                         // dma_0_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_out_data;                                          // dma_0_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_009:in_0_ready -> dma_0_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                           // avalon_st_adapter_009:out_0_valid -> dma_0_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                            // avalon_st_adapter_009:out_0_data -> dma_0_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                           // dma_0_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                           // avalon_st_adapter_009:out_0_error -> dma_0_control_port_slave_agent:rdata_fifo_sink_error
	wire          msgdma_0_csr_agent_rdata_fifo_out_valid;                                                     // msgdma_0_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_out_data;                                                      // msgdma_0_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          msgdma_0_csr_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_010:in_0_ready -> msgdma_0_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                           // avalon_st_adapter_010:out_0_valid -> msgdma_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                            // avalon_st_adapter_010:out_0_data -> msgdma_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                           // msgdma_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                           // avalon_st_adapter_010:out_0_error -> msgdma_0_csr_agent:rdata_fifo_sink_error
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid;                                        // msgdma_0_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire  [129:0] msgdma_0_descriptor_slave_agent_rdata_fifo_out_data;                                         // msgdma_0_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_011:in_0_ready -> msgdma_0_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                           // avalon_st_adapter_011:out_0_valid -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_011_out_0_data;                                                            // avalon_st_adapter_011:out_0_data -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                           // msgdma_0_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                           // avalon_st_adapter_011:out_0_error -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_error
	wire          terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid;                                     // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data;                                      // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_012:in_0_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                           // avalon_st_adapter_012:out_0_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                            // avalon_st_adapter_012:out_0_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                           // avalon_st_adapter_012:out_0_error -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_error
	wire          mipi_reset_n_s1_agent_rdata_fifo_out_valid;                                                  // mipi_reset_n_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] mipi_reset_n_s1_agent_rdata_fifo_out_data;                                                   // mipi_reset_n_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          mipi_reset_n_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_013:in_0_ready -> mipi_reset_n_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                           // avalon_st_adapter_013:out_0_valid -> mipi_reset_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                            // avalon_st_adapter_013:out_0_data -> mipi_reset_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                           // mipi_reset_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                           // avalon_st_adapter_013:out_0_error -> mipi_reset_n_s1_agent:rdata_fifo_sink_error
	wire          mipi_pwdn_n_s1_agent_rdata_fifo_out_valid;                                                   // mipi_pwdn_n_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] mipi_pwdn_n_s1_agent_rdata_fifo_out_data;                                                    // mipi_pwdn_n_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          mipi_pwdn_n_s1_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_014:in_0_ready -> mipi_pwdn_n_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                           // avalon_st_adapter_014:out_0_valid -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                            // avalon_st_adapter_014:out_0_data -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                           // mipi_pwdn_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                           // avalon_st_adapter_014:out_0_error -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_out_valid;                                                         // timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_out_data;                                                          // timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          timer_s1_agent_rdata_fifo_out_ready;                                                         // avalon_st_adapter_015:in_0_ready -> timer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                           // avalon_st_adapter_015:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                            // avalon_st_adapter_015:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                           // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                           // avalon_st_adapter_015:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire          onchip_s1_agent_rdata_fifo_out_valid;                                                        // onchip_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] onchip_s1_agent_rdata_fifo_out_data;                                                         // onchip_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          onchip_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_016:in_0_ready -> onchip_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                           // avalon_st_adapter_016:out_0_valid -> onchip_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                            // avalon_st_adapter_016:out_0_data -> onchip_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                           // onchip_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                           // avalon_st_adapter_016:out_0_error -> onchip_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_only_master_master_translator (
		.clk                    (clk_50_clk_clk),                                                             //                       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fpga_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fpga_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (fpga_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (fpga_only_master_master_read),                                               //                          .read
		.av_readdata            (fpga_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (fpga_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fpga_only_master_master_write),                                              //                          .write
		.av_writedata           (fpga_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_0_mm_write_translator (
		.clk                    (pll_0_outclk2_clk),                                                    //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_0_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_0_mm_write_waitrequest),                                        //                          .waitrequest
		.av_write               (msgdma_0_mm_write_write),                                              //                          .write
		.av_writedata           (msgdma_0_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_byteenable          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_read                (1'b0),                                                                 //               (terminated)
		.av_readdata            (),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_read_master_translator (
		.clk                    (pll_0_outclk2_clk),                                                    //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_0_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_0_read_master_read),                                               //                          .read
		.av_readdata            (dma_0_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_0_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_byteenable          (4'b1111),                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                    (pll_0_outclk2_clk),                                                     //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),           //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                   //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                    //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),               //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),             //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intr_capturer_0_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                        //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (intr_capturer_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (intr_capturer_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (intr_capturer_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (intr_capturer_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (intr_capturer_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (intr_capturer_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (intr_capturer_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (intr_capturer_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (intr_capturer_0_avalon_slave_0_readdata),               //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),              //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                    //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),                   //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                            //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (led_pio_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                    //                         .write
		.av_readdata            (led_pio_s1_readdata),                                 //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                                  //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                               //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                              //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_50_clk_clk),                                      //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                         //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (button_pio_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                                 //                         .write
		.av_readdata            (button_pio_s1_readdata),                              //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                             //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_mipi_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),            //                         .read
		.uav_write              (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),           //                         .write
		.uav_waitrequest        (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (i2c_opencores_mipi_avalon_slave_0_address),                  //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_mipi_avalon_slave_0_write),                    //                         .write
		.av_readdata            (i2c_opencores_mipi_avalon_slave_0_readdata),                 //                         .readdata
		.av_writedata           (i2c_opencores_mipi_avalon_slave_0_writedata),                //                         .writedata
		.av_waitrequest         (i2c_opencores_mipi_avalon_slave_0_waitrequest),              //                         .waitrequest
		.av_chipselect          (i2c_opencores_mipi_avalon_slave_0_chipselect),               //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_camera_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_opencores_camera_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_camera_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_camera_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_camera_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_camera_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_camera_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_camera_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_camera_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_camera_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (20),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_control_port_slave_translator (
		.clk                    (pll_0_outclk2_clk),                               //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (dma_0_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_0_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_0_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_0_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_0_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_0_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_0_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_0_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_0_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_0_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_0_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_0_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_0_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_0_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_0_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_csr_translator (
		.clk                    (pll_0_outclk2_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_0_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (msgdma_0_csr_agent_m0_read),                   //                         .read
		.uav_write              (msgdma_0_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (msgdma_0_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (msgdma_0_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (msgdma_0_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (msgdma_0_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (msgdma_0_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (msgdma_0_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (msgdma_0_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (msgdma_0_csr_write),                           //                         .write
		.av_read                (msgdma_0_csr_read),                            //                         .read
		.av_readdata            (msgdma_0_csr_readdata),                        //                         .readdata
		.av_writedata           (msgdma_0_csr_writedata),                       //                         .writedata
		.av_byteenable          (msgdma_0_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_descriptor_slave_translator (
		.clk                    (pll_0_outclk2_clk),                                                                                                                     //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                                                          //                    reset.reset
		.uav_address            (msgdma_0_descriptor_slave_agent_m0_address),                                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_descriptor_slave_agent_m0_burstcount),                                                                                         //                         .burstcount
		.uav_read               (msgdma_0_descriptor_slave_agent_m0_read),                                                                                               //                         .read
		.uav_write              (msgdma_0_descriptor_slave_agent_m0_write),                                                                                              //                         .write
		.uav_waitrequest        (msgdma_0_descriptor_slave_agent_m0_waitrequest),                                                                                        //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_descriptor_slave_agent_m0_readdatavalid),                                                                                      //                         .readdatavalid
		.uav_byteenable         (msgdma_0_descriptor_slave_agent_m0_byteenable),                                                                                         //                         .byteenable
		.uav_readdata           (msgdma_0_descriptor_slave_agent_m0_readdata),                                                                                           //                         .readdata
		.uav_writedata          (msgdma_0_descriptor_slave_agent_m0_writedata),                                                                                          //                         .writedata
		.uav_lock               (msgdma_0_descriptor_slave_agent_m0_lock),                                                                                               //                         .lock
		.uav_debugaccess        (msgdma_0_descriptor_slave_agent_m0_debugaccess),                                                                                        //                         .debugaccess
		.av_write               (msgdma_0_descriptor_slave_write),                                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (msgdma_0_descriptor_slave_writedata),                                                                                                   //                         .writedata
		.av_byteenable          (msgdma_0_descriptor_slave_byteenable),                                                                                                  //                         .byteenable
		.av_waitrequest         (msgdma_0_descriptor_slave_waitrequest),                                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terasic_auto_focus_0_mm_ctrl_translator (
		.clk                    (pll_0_outclk2_clk),                                   //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (terasic_auto_focus_0_mm_ctrl_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (terasic_auto_focus_0_mm_ctrl_agent_m0_read),          //                         .read
		.uav_write              (terasic_auto_focus_0_mm_ctrl_agent_m0_write),         //                         .write
		.uav_waitrequest        (terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (terasic_auto_focus_0_mm_ctrl_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (terasic_auto_focus_0_mm_ctrl_agent_m0_writedata),     //                         .writedata
		.uav_lock               (terasic_auto_focus_0_mm_ctrl_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (TERASIC_AUTO_FOCUS_0_mm_ctrl_address),                //      avalon_anti_slave_0.address
		.av_write               (TERASIC_AUTO_FOCUS_0_mm_ctrl_write),                  //                         .write
		.av_read                (TERASIC_AUTO_FOCUS_0_mm_ctrl_read),                   //                         .read
		.av_readdata            (TERASIC_AUTO_FOCUS_0_mm_ctrl_readdata),               //                         .readdata
		.av_writedata           (TERASIC_AUTO_FOCUS_0_mm_ctrl_writedata),              //                         .writedata
		.av_chipselect          (TERASIC_AUTO_FOCUS_0_mm_ctrl_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mipi_reset_n_s1_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mipi_reset_n_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (mipi_reset_n_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (mipi_reset_n_s1_agent_m0_read),                              //                         .read
		.uav_write              (mipi_reset_n_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (mipi_reset_n_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (mipi_reset_n_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (mipi_reset_n_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (mipi_reset_n_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (mipi_reset_n_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (mipi_reset_n_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (mipi_reset_n_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (mipi_reset_n_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (mipi_reset_n_s1_write),                                      //                         .write
		.av_readdata            (mipi_reset_n_s1_readdata),                                   //                         .readdata
		.av_writedata           (mipi_reset_n_s1_writedata),                                  //                         .writedata
		.av_chipselect          (mipi_reset_n_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mipi_pwdn_n_s1_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mipi_pwdn_n_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (mipi_pwdn_n_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (mipi_pwdn_n_s1_agent_m0_read),                               //                         .read
		.uav_write              (mipi_pwdn_n_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (mipi_pwdn_n_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (mipi_pwdn_n_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (mipi_pwdn_n_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (mipi_pwdn_n_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (mipi_pwdn_n_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (mipi_pwdn_n_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (mipi_pwdn_n_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (mipi_pwdn_n_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (mipi_pwdn_n_s1_write),                                       //                         .write
		.av_readdata            (mipi_pwdn_n_s1_readdata),                                    //                         .readdata
		.av_writedata           (mipi_pwdn_n_s1_writedata),                                   //                         .writedata
		.av_chipselect          (mipi_pwdn_n_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                                     //                         .read
		.uav_write              (timer_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (timer_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                                             //                         .write
		.av_readdata            (timer_s1_readdata),                                          //                         .readdata
		.av_writedata           (timer_s1_writedata),                                         //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_s1_translator (
		.clk                    (pll_0_outclk2_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (onchip_s1_agent_m0_read),                      //                         .read
		.uav_write              (onchip_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (onchip_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (onchip_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (onchip_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (onchip_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (onchip_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (onchip_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (onchip_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (onchip_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (onchip_s1_write),                              //                         .write
		.av_readdata            (onchip_s1_readdata),                           //                         .readdata
		.av_writedata           (onchip_s1_writedata),                          //                         .writedata
		.av_byteenable          (onchip_s1_byteenable),                         //                         .byteenable
		.av_chipselect          (onchip_s1_chipselect),                         //                         .chipselect
		.av_clken               (onchip_s1_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (134),
		.PKT_CACHE_H               (164),
		.PKT_CACHE_L               (161),
		.PKT_ADDR_SIDEBAND_H       (132),
		.PKT_ADDR_SIDEBAND_L       (132),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURST_SIZE_H          (129),
		.PKT_BURST_SIZE_L          (127),
		.PKT_BURST_TYPE_H          (131),
		.PKT_BURST_TYPE_L          (130),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_BURSTWRAP_H           (126),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (136),
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (141),
		.PKT_THREAD_ID_H           (157),
		.PKT_THREAD_ID_L           (146),
		.PKT_QOS_L                 (135),
		.PKT_QOS_H                 (135),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_DATA_SIDEBAND_H       (133),
		.PKT_DATA_SIDEBAND_L       (133),
		.ST_DATA_W                 (170),
		.ST_CHANNEL_W              (17),
		.ID                        (3)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_50_clk_clk),                                                    //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                 //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                  //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                               //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                         //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                           //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                 //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                             //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                              //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                           //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                     //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                       //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                             //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_QOS_H                 (99),
		.PKT_QOS_L                 (99),
		.PKT_DATA_SIDEBAND_H       (97),
		.PKT_DATA_SIDEBAND_L       (97),
		.PKT_ADDR_SIDEBAND_H       (96),
		.PKT_ADDR_SIDEBAND_L       (96),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_only_master_master_agent (
		.clk                   (clk_50_clk_clk),                                                             //       clk.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fpga_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fpga_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fpga_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fpga_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fpga_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (fpga_only_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (fpga_only_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (fpga_only_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (fpga_only_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (fpga_only_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (fpga_only_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (98),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_ADDR_SIDEBAND_H       (96),
		.PKT_ADDR_SIDEBAND_L       (96),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (110),
		.PKT_QOS_L                 (99),
		.PKT_QOS_H                 (99),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_DATA_SIDEBAND_H       (97),
		.PKT_DATA_SIDEBAND_L       (97),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.ID                        (4)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_50_clk_clk),                                                    //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (83),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (5),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_0_mm_write_agent (
		.clk                   (pll_0_outclk2_clk),                                                    //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_0_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_0_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_0_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_0_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_0_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_QOS_H                 (99),
		.PKT_QOS_L                 (99),
		.PKT_DATA_SIDEBAND_H       (97),
		.PKT_DATA_SIDEBAND_L       (97),
		.PKT_ADDR_SIDEBAND_H       (96),
		.PKT_ADDR_SIDEBAND_L       (96),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_read_master_agent (
		.clk                   (pll_0_outclk2_clk),                                                    //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_QOS_H                 (99),
		.PKT_QOS_L                 (99),
		.PKT_DATA_SIDEBAND_H       (97),
		.PKT_DATA_SIDEBAND_L       (97),
		.PKT_ADDR_SIDEBAND_H       (96),
		.PKT_ADDR_SIDEBAND_L       (96),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_agent (
		.clk                   (pll_0_outclk2_clk),                                                     //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (129),
		.PKT_BURST_SIZE_L          (127),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (134),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (126),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (136),
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (141),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (170),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (171),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                         //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intr_capturer_0_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (intr_capturer_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intr_capturer_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (intr_capturer_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intr_capturer_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intr_capturer_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (intr_capturer_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intr_capturer_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (intr_capturer_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (intr_capturer_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                         //                .channel
		.rf_sink_ready           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (led_pio_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (led_pio_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (led_pio_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (led_pio_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (led_pio_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (dipsw_pio_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (dipsw_pio_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (dipsw_pio_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (dipsw_pio_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (dipsw_pio_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (button_pio_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (button_pio_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (button_pio_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_mipi_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                        //             clk.clk
		.reset                   (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                     //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_camera_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                          //             clk.clk
		.reset                   (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (i2c_opencores_camera_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (i2c_opencores_camera_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (i2c_opencores_camera_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (i2c_opencores_camera_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                       //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                                 //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_control_port_slave_agent (
		.clk                     (pll_0_outclk2_clk),                                            //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (dma_0_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_0_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_0_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_0_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (dma_0_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                                         //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                                   //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_csr_agent (
		.clk                     (pll_0_outclk2_clk),                                //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (msgdma_0_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_0_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_0_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_0_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_0_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_0_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_0_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_0_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_0_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_0_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_0_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_0_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_0_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_0_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_0_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_0_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_0_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (msgdma_0_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (msgdma_0_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (msgdma_0_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_0_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_0_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (msgdma_0_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_0_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_0_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_0_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_0_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_0_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_0_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                //                .error
		.rdata_fifo_src_ready    (msgdma_0_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_0_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                             //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                            //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (msgdma_0_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (msgdma_0_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (msgdma_0_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (msgdma_0_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (msgdma_0_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (241),
		.PKT_ORI_BURST_SIZE_L      (239),
		.PKT_RESPONSE_STATUS_H     (238),
		.PKT_RESPONSE_STATUS_L     (237),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (206),
		.PKT_PROTECTION_H          (232),
		.PKT_PROTECTION_L          (230),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (212),
		.PKT_SRC_ID_L              (208),
		.PKT_DEST_ID_H             (217),
		.PKT_DEST_ID_L             (213),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (242),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_descriptor_slave_agent (
		.clk                     (pll_0_outclk2_clk),                                             //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (msgdma_0_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_0_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_0_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_0_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_0_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_0_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_0_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_0_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_0_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_0_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_0_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_0_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_0_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_0_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_0_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_0_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_0_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (msgdma_0_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (msgdma_0_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_0_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_0_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_0_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_0_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (243),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                                          //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                                    //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (msgdma_0_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terasic_auto_focus_0_mm_ctrl_agent (
		.clk                     (pll_0_outclk2_clk),                                                //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (terasic_auto_focus_0_mm_ctrl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terasic_auto_focus_0_mm_ctrl_agent_m0_lock),                       //                .lock
		.m0_readdata             (terasic_auto_focus_0_mm_ctrl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terasic_auto_focus_0_mm_ctrl_agent_m0_read),                       //                .read
		.m0_waitrequest          (terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terasic_auto_focus_0_mm_ctrl_agent_m0_writedata),                  //                .writedata
		.m0_write                (terasic_auto_focus_0_mm_ctrl_agent_m0_write),                      //                .write
		.rp_endofpacket          (terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terasic_auto_focus_0_mm_ctrl_agent_rp_ready),                      //                .ready
		.rp_valid                (terasic_auto_focus_0_mm_ctrl_agent_rp_valid),                      //                .valid
		.rp_data                 (terasic_auto_focus_0_mm_ctrl_agent_rp_data),                       //                .data
		.rp_startofpacket        (terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                                             //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (terasic_auto_focus_0_mm_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                                       //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mipi_reset_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                             //             clk.clk
		.reset                   (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mipi_reset_n_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (mipi_reset_n_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (mipi_reset_n_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (mipi_reset_n_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (mipi_reset_n_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (mipi_reset_n_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (mipi_reset_n_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (mipi_reset_n_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (mipi_reset_n_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (mipi_reset_n_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (mipi_reset_n_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (mipi_reset_n_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (mipi_reset_n_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (mipi_reset_n_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (mipi_reset_n_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (mipi_reset_n_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (mipi_reset_n_s1_burst_adapter_source0_ready),                //              cp.ready
		.cp_valid                (mipi_reset_n_s1_burst_adapter_source0_valid),                //                .valid
		.cp_data                 (mipi_reset_n_s1_burst_adapter_source0_data),                 //                .data
		.cp_startofpacket        (mipi_reset_n_s1_burst_adapter_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (mipi_reset_n_s1_burst_adapter_source0_endofpacket),          //                .endofpacket
		.cp_channel              (mipi_reset_n_s1_burst_adapter_source0_channel),              //                .channel
		.rf_sink_ready           (mipi_reset_n_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (mipi_reset_n_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (mipi_reset_n_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (mipi_reset_n_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (mipi_reset_n_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (mipi_reset_n_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (mipi_reset_n_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (mipi_reset_n_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mipi_reset_n_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mipi_reset_n_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (mipi_reset_n_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_reset_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mipi_reset_n_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (mipi_reset_n_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (mipi_reset_n_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (mipi_reset_n_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (mipi_reset_n_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (mipi_reset_n_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (mipi_reset_n_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (mipi_reset_n_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_reset_n_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mipi_reset_n_s1_agent_rdata_fifo_src_data),                  //        in.data
		.in_valid          (mipi_reset_n_s1_agent_rdata_fifo_src_valid),                 //          .valid
		.in_ready          (mipi_reset_n_s1_agent_rdata_fifo_src_ready),                 //          .ready
		.out_data          (mipi_reset_n_s1_agent_rdata_fifo_out_data),                  //       out.data
		.out_valid         (mipi_reset_n_s1_agent_rdata_fifo_out_valid),                 //          .valid
		.out_ready         (mipi_reset_n_s1_agent_rdata_fifo_out_ready),                 //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mipi_pwdn_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                             //             clk.clk
		.reset                   (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mipi_pwdn_n_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (mipi_pwdn_n_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (mipi_pwdn_n_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (mipi_pwdn_n_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (mipi_pwdn_n_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (mipi_pwdn_n_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (mipi_pwdn_n_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (mipi_pwdn_n_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (mipi_pwdn_n_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (mipi_pwdn_n_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (mipi_pwdn_n_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (mipi_pwdn_n_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (mipi_pwdn_n_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (mipi_pwdn_n_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (mipi_pwdn_n_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (mipi_pwdn_n_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (mipi_pwdn_n_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (mipi_pwdn_n_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (mipi_pwdn_n_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (mipi_pwdn_n_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (mipi_pwdn_n_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (mipi_pwdn_n_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (mipi_pwdn_n_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (mipi_pwdn_n_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (mipi_pwdn_n_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (mipi_pwdn_n_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (mipi_pwdn_n_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (mipi_pwdn_n_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (mipi_pwdn_n_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (mipi_pwdn_n_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mipi_pwdn_n_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mipi_pwdn_n_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (mipi_pwdn_n_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_pwdn_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mipi_pwdn_n_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (mipi_pwdn_n_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (mipi_pwdn_n_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (mipi_pwdn_n_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (mipi_pwdn_n_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (mipi_pwdn_n_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (mipi_pwdn_n_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (mipi_pwdn_n_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_pwdn_n_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mipi_pwdn_n_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (mipi_pwdn_n_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (mipi_pwdn_n_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (mipi_pwdn_n_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (mipi_pwdn_n_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (mipi_pwdn_n_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_50_clk_clk),                                             //             clk.clk
		.reset                   (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (timer_s1_burst_adapter_source0_ready),                       //              cp.ready
		.cp_valid                (timer_s1_burst_adapter_source0_valid),                       //                .valid
		.cp_data                 (timer_s1_burst_adapter_source0_data),                        //                .data
		.cp_startofpacket        (timer_s1_burst_adapter_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (timer_s1_burst_adapter_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (timer_s1_burst_adapter_source0_channel),                     //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rdata_fifo_src_data),                         //        in.data
		.in_valid          (timer_s1_agent_rdata_fifo_src_valid),                        //          .valid
		.in_ready          (timer_s1_agent_rdata_fifo_src_ready),                        //          .ready
		.out_data          (timer_s1_agent_rdata_fifo_out_data),                         //       out.data
		.out_valid         (timer_s1_agent_rdata_fifo_out_valid),                        //          .valid
		.out_ready         (timer_s1_agent_rdata_fifo_out_ready),                        //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_s1_agent (
		.clk                     (pll_0_outclk2_clk),                             //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (onchip_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),             //                .error
		.rdata_fifo_src_ready    (onchip_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                            //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_s1_agent_rf_source_data),               //        in.data
		.in_valid          (onchip_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (onchip_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (onchip_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (onchip_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (onchip_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (onchip_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (onchip_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (onchip_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (onchip_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                            //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (onchip_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (onchip_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (onchip_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (onchip_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (onchip_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (fpga_only_master_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (fpga_only_master_master_agent_cp_valid),              //          .valid
		.sink_data          (fpga_only_master_master_agent_cp_data),               //          .data
		.sink_startofpacket (fpga_only_master_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (msgdma_0_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (msgdma_0_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (msgdma_0_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (msgdma_0_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (msgdma_0_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (dma_0_read_master_agent_cp_ready),             //      sink.ready
		.sink_valid         (dma_0_read_master_agent_cp_valid),             //          .valid
		.sink_data          (dma_0_read_master_agent_cp_data),              //          .data
		.sink_startofpacket (dma_0_read_master_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_0_read_master_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (dma_0_write_master_agent_cp_ready),            //      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),            //          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),             //          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                //       src.ready
		.src_valid          (router_008_src_valid),                                //          .valid
		.src_data           (router_008_src_data),                                 //          .data
		.src_channel        (router_008_src_channel),                              //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),          //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),           //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                //       src.ready
		.src_valid          (router_009_src_valid),                                //          .valid
		.src_data           (router_009_src_data),                                 //          .data
		.src_channel        (router_009_src_channel),                              //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (intr_capturer_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (intr_capturer_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (intr_capturer_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_010_src_ready),                                  //       src.ready
		.src_valid          (router_010_src_valid),                                  //          .valid
		.src_data           (router_010_src_data),                                   //          .data
		.src_channel        (router_010_src_channel),                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_009 router_011 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),             //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),              //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_009 router_012 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                           //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_009 router_013 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_009 router_014 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                        //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                //       src.ready
		.src_valid          (router_014_src_valid),                                //          .valid
		.src_data           (router_014_src_data),                                 //          .data
		.src_channel        (router_014_src_channel),                              //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_015 (
		.sink_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),           //      sink.ready
		.sink_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),           //          .valid
		.sink_data          (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),            //          .data
		.sink_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                       //       src.ready
		.src_valid          (router_015_src_valid),                                       //          .valid
		.src_data           (router_015_src_data),                                        //          .data
		.src_channel        (router_015_src_channel),                                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_016 (
		.sink_ready         (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_camera_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                       //       src.ready
		.src_valid          (router_016_src_valid),                                       //          .valid
		.src_data           (router_016_src_data),                                        //          .data
		.src_channel        (router_016_src_channel),                                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_017 (
		.sink_ready         (dma_0_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_0_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_0_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_0_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk2_clk),                               //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_017_src_ready),                            //       src.ready
		.src_valid          (router_017_src_valid),                            //          .valid
		.src_data           (router_017_src_data),                             //          .data
		.src_channel        (router_017_src_channel),                          //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_018 (
		.sink_ready         (msgdma_0_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (msgdma_0_csr_agent_rp_valid),                  //          .valid
		.sink_data          (msgdma_0_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (msgdma_0_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (msgdma_0_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (msgdma_0_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (msgdma_0_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (msgdma_0_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_019_src_ready),                             //       src.ready
		.src_valid          (router_019_src_valid),                             //          .valid
		.src_data           (router_019_src_data),                              //          .data
		.src_channel        (router_019_src_channel),                           //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_020 (
		.sink_ready         (terasic_auto_focus_0_mm_ctrl_agent_rp_ready),         //      sink.ready
		.sink_valid         (terasic_auto_focus_0_mm_ctrl_agent_rp_valid),         //          .valid
		.sink_data          (terasic_auto_focus_0_mm_ctrl_agent_rp_data),          //          .data
		.sink_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                   //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_020_src_ready),                                //       src.ready
		.src_valid          (router_020_src_valid),                                //          .valid
		.src_data           (router_020_src_data),                                 //          .data
		.src_channel        (router_020_src_channel),                              //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_021 (
		.sink_ready         (mipi_reset_n_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (mipi_reset_n_s1_agent_rp_valid),                             //          .valid
		.sink_data          (mipi_reset_n_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (mipi_reset_n_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (mipi_reset_n_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                       //       src.ready
		.src_valid          (router_021_src_valid),                                       //          .valid
		.src_data           (router_021_src_data),                                        //          .data
		.src_channel        (router_021_src_channel),                                     //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_022 (
		.sink_ready         (mipi_pwdn_n_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (mipi_pwdn_n_s1_agent_rp_valid),                              //          .valid
		.sink_data          (mipi_pwdn_n_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (mipi_pwdn_n_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (mipi_pwdn_n_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                       //       src.ready
		.src_valid          (router_022_src_valid),                                       //          .valid
		.src_data           (router_022_src_data),                                        //          .data
		.src_channel        (router_022_src_channel),                                     //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_015 router_023 (
		.sink_ready         (timer_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (timer_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                       //       src.ready
		.src_valid          (router_023_src_valid),                                       //          .valid
		.src_data           (router_023_src_data),                                        //          .data
		.src_channel        (router_023_src_channel),                                     //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_024 router_024 (
		.sink_ready         (onchip_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (onchip_s1_agent_rp_valid),                     //          .valid
		.sink_data          (onchip_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (onchip_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (onchip_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                         //       src.ready
		.src_valid          (router_024_src_valid),                         //          .valid
		.src_data           (router_024_src_data),                          //          .data
		.src_channel        (router_024_src_channel),                       //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) fpga_only_master_master_limiter (
		.clk                    (clk_50_clk_clk),                                        //       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                  //          .valid
		.cmd_sink_data          (router_002_src_data),                                   //          .data
		.cmd_sink_channel       (router_002_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (fpga_only_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (fpga_only_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (fpga_only_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (fpga_only_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (fpga_only_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (fpga_only_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (fpga_only_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (fpga_only_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (fpga_only_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (fpga_only_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_50_clk_clk),                                                   //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                             //          .valid
		.cmd_sink_data          (router_003_src_data),                                              //          .data
		.cmd_sink_channel       (router_003_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (100),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_50_clk_clk),                                                   //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                             //          .valid
		.cmd_sink_data          (router_004_src_data),                                              //          .data
		.cmd_sink_channel       (router_004_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (134),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (129),
		.PKT_BURST_SIZE_L          (127),
		.PKT_BURST_TYPE_H          (131),
		.PKT_BURST_TYPE_L          (130),
		.PKT_BURSTWRAP_H           (126),
		.PKT_BURSTWRAP_L           (119),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (170),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (126),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                  //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                           //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_50_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                      //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                               //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                      //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                               //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                      //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                               //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_opencores_mipi_avalon_slave_0_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                        //       cr0.clk
		.reset                 (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                                 //          .ready
		.source0_valid         (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_opencores_mipi_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_opencores_camera_avalon_slave_0_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                          //       cr0.clk
		.reset                 (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                                   //          .ready
		.source0_valid         (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_opencores_camera_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_0_control_port_slave_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                            //       cr0.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                        //          .ready
		.source0_valid         (dma_0_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_0_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_0_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_0_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_0_csr_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                //       cr0.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                             //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                            //          .ready
		.source0_valid         (msgdma_0_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (msgdma_0_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (msgdma_0_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (msgdma_0_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (msgdma_0_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (msgdma_0_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (206),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_BURST_TYPE_H          (203),
		.PKT_BURST_TYPE_L          (202),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (242),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (198),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_0_descriptor_slave_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                             //       cr0.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                         //          .ready
		.source0_valid         (msgdma_0_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (msgdma_0_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (msgdma_0_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (msgdma_0_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terasic_auto_focus_0_mm_ctrl_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                                //       cr0.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                            //          .ready
		.source0_valid         (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_data),          //          .data
		.source0_channel       (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terasic_auto_focus_0_mm_ctrl_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mipi_reset_n_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                             //       cr0.clk
		.reset                 (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                      //          .ready
		.source0_valid         (mipi_reset_n_s1_burst_adapter_source0_valid),                //   source0.valid
		.source0_data          (mipi_reset_n_s1_burst_adapter_source0_data),                 //          .data
		.source0_channel       (mipi_reset_n_s1_burst_adapter_source0_channel),              //          .channel
		.source0_startofpacket (mipi_reset_n_s1_burst_adapter_source0_startofpacket),        //          .startofpacket
		.source0_endofpacket   (mipi_reset_n_s1_burst_adapter_source0_endofpacket),          //          .endofpacket
		.source0_ready         (mipi_reset_n_s1_burst_adapter_source0_ready)                 //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mipi_pwdn_n_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                             //       cr0.clk
		.reset                 (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                      //          .ready
		.source0_valid         (mipi_pwdn_n_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (mipi_pwdn_n_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (mipi_pwdn_n_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (mipi_pwdn_n_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (mipi_pwdn_n_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (mipi_pwdn_n_s1_burst_adapter_source0_ready)                  //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) timer_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                             //       cr0.clk
		.reset                 (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                      //          .ready
		.source0_valid         (timer_s1_burst_adapter_source0_valid),                       //   source0.valid
		.source0_data          (timer_s1_burst_adapter_source0_data),                        //          .data
		.source0_channel       (timer_s1_burst_adapter_source0_channel),                     //          .channel
		.source0_startofpacket (timer_s1_burst_adapter_source0_startofpacket),               //          .startofpacket
		.source0_endofpacket   (timer_s1_burst_adapter_source0_endofpacket),                 //          .endofpacket
		.source0_ready         (timer_s1_burst_adapter_source0_ready)                        //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (134),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_s1_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                             //       cr0.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                          //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                         //          .ready
		.source0_valid         (onchip_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //      sink.ready
		.sink_channel       (router_src_channel),                                               //          .channel
		.sink_data          (router_src_data),                                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.sink_valid         (router_src_valid),                                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //      sink.ready
		.sink_channel       (router_001_src_channel),                                           //          .channel
		.sink_data          (router_001_src_data),                                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_50_clk_clk),                                        //        clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //  clk_reset.reset
		.sink_ready         (fpga_only_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (fpga_only_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (fpga_only_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (fpga_only_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (fpga_only_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (fpga_only_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_002_src0_data),                               //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_002_src1_data),                               //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_002_src2_data),                               //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_002_src3_data),                               //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                        //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                              //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                              //           .valid
		.src4_data          (cmd_demux_002_src4_data),                               //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                            //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                        //           .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                              //       src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                              //           .valid
		.src5_data          (cmd_demux_002_src5_data),                               //           .data
		.src5_channel       (cmd_demux_002_src5_channel),                            //           .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                      //           .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket),                        //           .endofpacket
		.src6_ready         (cmd_demux_002_src6_ready),                              //       src6.ready
		.src6_valid         (cmd_demux_002_src6_valid),                              //           .valid
		.src6_data          (cmd_demux_002_src6_data),                               //           .data
		.src6_channel       (cmd_demux_002_src6_channel),                            //           .channel
		.src6_startofpacket (cmd_demux_002_src6_startofpacket),                      //           .startofpacket
		.src6_endofpacket   (cmd_demux_002_src6_endofpacket)                         //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                 (clk_50_clk_clk),                                                   //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_003_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_003_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_003_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_003_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_003_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_003_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_003_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_003_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_003_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_003_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_003_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_003_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_003_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_003_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_003_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_003_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_003_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_003_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_003_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_003_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_003_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_003_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_003_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_003_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_003_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_003_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_003_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_003_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_003_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_003_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_003_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_003_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_003_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_003_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_003_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_003_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_003_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_003_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_003_src14_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                 (clk_50_clk_clk),                                                   //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_004_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_004_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_004_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_004_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_004_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_004_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_004_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_004_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_004_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_004_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_004_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_004_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_004_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_004_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_004_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_004_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_004_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_004_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_004_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_004_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_004_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_004_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_004_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_004_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_004_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_004_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_004_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_004_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_004_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_004_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_004_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_004_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_004_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_004_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_004_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_004_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_004_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_004_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_004_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_004_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_004_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_004_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_004_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_004_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_004_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_004_src14_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_005_src0_data),                      //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_006 cmd_demux_006 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_006_src0_data),                      //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_006 cmd_demux_007 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_007_src0_data),                      //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                                                     //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src1_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src1_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src1_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src1_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src1_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src5_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src3_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src3_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src3_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src3_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src3_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src3_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src6_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src4_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src4_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src4_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src4_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src4_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src4_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_007 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                      //          .valid
		.src_data            (cmd_mux_007_src_data),                                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_003_src5_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_003_src5_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_003_src5_channel),                                 //          .channel
		.sink0_data          (cmd_demux_003_src5_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_003_src5_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src5_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_004_src5_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_004_src5_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_004_src5_channel),                                 //          .channel
		.sink1_data          (cmd_demux_004_src5_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_004_src5_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src5_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_008 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                      //          .valid
		.src_data            (cmd_mux_008_src_data),                                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_003_src6_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_003_src6_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_003_src6_channel),                                 //          .channel
		.sink0_data          (cmd_demux_003_src6_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_003_src6_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src6_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_004_src6_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_004_src6_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_004_src6_channel),                                 //          .channel
		.sink1_data          (cmd_demux_004_src6_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_004_src6_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src6_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_009 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_out_valid),                            //          .valid
		.sink0_channel       (crosser_out_channel),                          //          .channel
		.sink0_data          (crosser_out_data),                             //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                      //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                        //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                        //          .valid
		.sink1_channel       (crosser_004_out_channel),                      //          .channel
		.sink1_data          (crosser_004_out_data),                         //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_010 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                        //          .valid
		.sink0_channel       (crosser_001_out_channel),                      //          .channel
		.sink0_data          (crosser_001_out_data),                         //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                  //          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                        //     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                        //          .valid
		.sink1_channel       (crosser_005_out_channel),                      //          .channel
		.sink1_data          (crosser_005_out_data),                         //          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_011 cmd_mux_011 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                        //          .valid
		.sink0_channel       (crosser_016_out_channel),                      //          .channel
		.sink0_data          (crosser_016_out_data),                         //          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket),                  //          .endofpacket
		.sink1_ready         (crosser_017_out_ready),                        //     sink1.ready
		.sink1_valid         (crosser_017_out_valid),                        //          .valid
		.sink1_channel       (crosser_017_out_channel),                      //          .channel
		.sink1_data          (crosser_017_out_data),                         //          .data
		.sink1_startofpacket (crosser_017_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (crosser_017_out_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_012 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                        //          .valid
		.sink0_channel       (crosser_002_out_channel),                      //          .channel
		.sink0_data          (crosser_002_out_data),                         //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                  //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                        //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                        //          .valid
		.sink1_channel       (crosser_006_out_channel),                      //          .channel
		.sink1_data          (crosser_006_out_data),                         //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_013 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                      //          .valid
		.src_data            (cmd_mux_013_src_data),                                       //          .data
		.src_channel         (cmd_mux_013_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_003_src11_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_003_src11_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_003_src11_channel),                                //          .channel
		.sink0_data          (cmd_demux_003_src11_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_003_src11_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src11_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_004_src11_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_004_src11_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_004_src11_channel),                                //          .channel
		.sink1_data          (cmd_demux_004_src11_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_004_src11_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src11_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_014 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                      //          .valid
		.src_data            (cmd_mux_014_src_data),                                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_003_src12_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_003_src12_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_003_src12_channel),                                //          .channel
		.sink0_data          (cmd_demux_003_src12_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_003_src12_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src12_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_004_src12_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_004_src12_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_004_src12_channel),                                //          .channel
		.sink1_data          (cmd_demux_004_src12_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_004_src12_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src12_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_007 cmd_mux_015 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                      //          .valid
		.src_data            (cmd_mux_015_src_data),                                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_003_src13_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_003_src13_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_003_src13_channel),                                //          .channel
		.sink0_data          (cmd_demux_003_src13_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_003_src13_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src13_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_004_src13_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_004_src13_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_004_src13_channel),                                //          .channel
		.sink1_data          (cmd_demux_004_src13_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_004_src13_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src13_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_016 cmd_mux_016 (
		.clk                 (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                              //          .valid
		.src_data            (cmd_mux_016_src_data),                                               //          .data
		.src_channel         (cmd_mux_016_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                              //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                              //          .valid
		.sink0_channel       (crosser_003_out_channel),                                            //          .channel
		.sink0_data          (crosser_003_out_data),                                               //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                                        //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                                              //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                                              //          .valid
		.sink1_channel       (crosser_007_out_channel),                                            //          .channel
		.sink1_data          (crosser_007_out_data),                                               //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket),                                        //          .endofpacket
		.sink2_ready         (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                                           //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                                           //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                                         //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                                            //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),                                   //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),                                     //          .endofpacket
		.sink4_ready         (cmd_demux_007_src0_ready),                                           //     sink4.ready
		.sink4_valid         (cmd_demux_007_src0_valid),                                           //          .valid
		.sink4_channel       (cmd_demux_007_src0_channel),                                         //          .channel
		.sink4_data          (cmd_demux_007_src0_data),                                            //          .data
		.sink4_startofpacket (cmd_demux_007_src0_startofpacket),                                   //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src0_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                //      sink.ready
		.sink_channel       (router_008_src_channel),                              //          .channel
		.sink_data          (router_008_src_data),                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                          //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                //          .valid
		.src2_data          (rsp_demux_src2_data),                                 //          .data
		.src2_channel       (rsp_demux_src2_channel),                              //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                //      sink.ready
		.sink_channel       (router_009_src_channel),                              //          .channel
		.sink_data          (router_009_src_data),                                 //          .data
		.sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_009_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_001_src2_data),                             //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                //      sink.ready
		.sink_channel       (router_010_src_channel),                              //          .channel
		.sink_data          (router_010_src_data),                                 //          .data
		.sink_startofpacket (router_010_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_010_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                //      sink.ready
		.sink_channel       (router_011_src_channel),                              //          .channel
		.sink_data          (router_011_src_data),                                 //          .data
		.sink_startofpacket (router_011_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_011_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_003_src1_data),                             //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_003_src2_data),                             //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                //      sink.ready
		.sink_channel       (router_012_src_channel),                              //          .channel
		.sink_data          (router_012_src_data),                                 //          .data
		.sink_startofpacket (router_012_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_012_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_004_src1_data),                             //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_004_src2_data),                             //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                //      sink.ready
		.sink_channel       (router_013_src_channel),                              //          .channel
		.sink_data          (router_013_src_data),                                 //          .data
		.sink_startofpacket (router_013_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_013_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_005_src1_data),                             //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_005_src2_data),                             //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                //      sink.ready
		.sink_channel       (router_014_src_channel),                              //          .channel
		.sink_data          (router_014_src_data),                                 //          .data
		.sink_startofpacket (router_014_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_014_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_006_src1_data),                             //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_006_src2_data),                             //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_007 rsp_demux_007 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                       //      sink.ready
		.sink_channel       (router_015_src_channel),                                     //          .channel
		.sink_data          (router_015_src_data),                                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_007 rsp_demux_008 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                       //      sink.ready
		.sink_channel       (router_016_src_channel),                                     //          .channel
		.sink_data          (router_016_src_data),                                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_009 rsp_demux_009 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                         //      sink.ready
		.sink_channel       (router_017_src_channel),                       //          .channel
		.sink_data          (router_017_src_data),                          //          .data
		.sink_startofpacket (router_017_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_017_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_009_src1_data),                      //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_009 rsp_demux_010 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                         //      sink.ready
		.sink_channel       (router_018_src_channel),                       //          .channel
		.sink_data          (router_018_src_data),                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_010_src1_data),                      //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_011 rsp_demux_011 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                         //      sink.ready
		.sink_channel       (router_019_src_channel),                       //          .channel
		.sink_data          (router_019_src_data),                          //          .data
		.sink_startofpacket (router_019_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_019_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_011_src1_data),                      //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_009 rsp_demux_012 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                         //      sink.ready
		.sink_channel       (router_020_src_channel),                       //          .channel
		.sink_data          (router_020_src_data),                          //          .data
		.sink_startofpacket (router_020_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_020_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_012_src1_data),                      //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_007 rsp_demux_013 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                       //      sink.ready
		.sink_channel       (router_021_src_channel),                                     //          .channel
		.sink_data          (router_021_src_data),                                        //          .data
		.sink_startofpacket (router_021_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_021_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_013_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_007 rsp_demux_014 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                       //      sink.ready
		.sink_channel       (router_022_src_channel),                                     //          .channel
		.sink_data          (router_022_src_data),                                        //          .data
		.sink_startofpacket (router_022_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_022_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_007 rsp_demux_015 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                       //      sink.ready
		.sink_channel       (router_023_src_channel),                                     //          .channel
		.sink_data          (router_023_src_data),                                        //          .data
		.sink_startofpacket (router_023_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_023_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_015_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_016 rsp_demux_016 (
		.clk                (pll_0_outclk2_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                         //      sink.ready
		.sink_channel       (router_024_src_channel),                       //          .channel
		.sink_data          (router_024_src_data),                          //          .data
		.sink_startofpacket (router_024_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_024_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_016_src0_data),                      //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_016_src1_data),                      //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_016_src2_data),                      //          .data
		.src2_channel       (rsp_demux_016_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket),               //          .endofpacket
		.src3_ready         (rsp_demux_016_src3_ready),                     //      src3.ready
		.src3_valid         (rsp_demux_016_src3_valid),                     //          .valid
		.src3_data          (rsp_demux_016_src3_data),                      //          .data
		.src3_channel       (rsp_demux_016_src3_channel),                   //          .channel
		.src3_startofpacket (rsp_demux_016_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (rsp_demux_016_src3_endofpacket),               //          .endofpacket
		.src4_ready         (rsp_demux_016_src4_ready),                     //      src4.ready
		.src4_valid         (rsp_demux_016_src4_valid),                     //          .valid
		.src4_data          (rsp_demux_016_src4_data),                      //          .data
		.src4_channel       (rsp_demux_016_src4_channel),                   //          .channel
		.src4_startofpacket (rsp_demux_016_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket   (rsp_demux_016_src4_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_50_clk_clk),                                                                     //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                              //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                              //          .valid
		.src_data            (rsp_mux_002_src_data),                                                               //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                            //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                           //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                           //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                         //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                            //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                           //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                           //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                         //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                            //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                           //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                           //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                         //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                            //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                                   //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                     //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                           //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                           //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                         //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                            //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                                   //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                                     //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                           //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                           //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                                         //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                            //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                                   //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                                     //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                           //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                           //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                         //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                            //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                                   //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                  (clk_50_clk_clk),                                                   //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                            //          .valid
		.src_data             (rsp_mux_003_src_data),                                             //          .data
		.src_channel          (rsp_mux_003_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_001_src1_ready),                                         //     sink0.ready
		.sink0_valid          (rsp_demux_001_src1_valid),                                         //          .valid
		.sink0_channel        (rsp_demux_001_src1_channel),                                       //          .channel
		.sink0_data           (rsp_demux_001_src1_data),                                          //          .data
		.sink0_startofpacket  (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src1_endofpacket),                                   //          .endofpacket
		.sink1_ready          (rsp_demux_003_src1_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_003_src1_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_003_src1_channel),                                       //          .channel
		.sink1_data           (rsp_demux_003_src1_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_003_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src1_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_004_src1_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_004_src1_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_004_src1_channel),                                       //          .channel
		.sink2_data           (rsp_demux_004_src1_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src1_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_005_src1_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_005_src1_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_005_src1_channel),                                       //          .channel
		.sink3_data           (rsp_demux_005_src1_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_005_src1_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src1_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_006_src1_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_006_src1_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_006_src1_channel),                                       //          .channel
		.sink4_data           (rsp_demux_006_src1_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src1_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_007_src0_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_007_src0_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_007_src0_channel),                                       //          .channel
		.sink5_data           (rsp_demux_007_src0_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_008_src0_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_008_src0_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_008_src0_channel),                                       //          .channel
		.sink6_data           (rsp_demux_008_src0_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_008_src0_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src0_endofpacket),                                   //          .endofpacket
		.sink7_ready          (crosser_008_out_ready),                                            //     sink7.ready
		.sink7_valid          (crosser_008_out_valid),                                            //          .valid
		.sink7_channel        (crosser_008_out_channel),                                          //          .channel
		.sink7_data           (crosser_008_out_data),                                             //          .data
		.sink7_startofpacket  (crosser_008_out_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (crosser_008_out_endofpacket),                                      //          .endofpacket
		.sink8_ready          (crosser_010_out_ready),                                            //     sink8.ready
		.sink8_valid          (crosser_010_out_valid),                                            //          .valid
		.sink8_channel        (crosser_010_out_channel),                                          //          .channel
		.sink8_data           (crosser_010_out_data),                                             //          .data
		.sink8_startofpacket  (crosser_010_out_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (crosser_010_out_endofpacket),                                      //          .endofpacket
		.sink9_ready          (crosser_018_out_ready),                                            //     sink9.ready
		.sink9_valid          (crosser_018_out_valid),                                            //          .valid
		.sink9_channel        (crosser_018_out_channel),                                          //          .channel
		.sink9_data           (crosser_018_out_data),                                             //          .data
		.sink9_startofpacket  (crosser_018_out_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (crosser_018_out_endofpacket),                                      //          .endofpacket
		.sink10_ready         (crosser_012_out_ready),                                            //    sink10.ready
		.sink10_valid         (crosser_012_out_valid),                                            //          .valid
		.sink10_channel       (crosser_012_out_channel),                                          //          .channel
		.sink10_data          (crosser_012_out_data),                                             //          .data
		.sink10_startofpacket (crosser_012_out_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (crosser_012_out_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_013_src0_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_013_src0_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_013_src0_channel),                                       //          .channel
		.sink11_data          (rsp_demux_013_src0_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_013_src0_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src0_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_014_src0_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_014_src0_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_014_src0_channel),                                       //          .channel
		.sink12_data          (rsp_demux_014_src0_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_014_src0_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src0_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_015_src0_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_015_src0_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_015_src0_channel),                                       //          .channel
		.sink13_data          (rsp_demux_015_src0_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_015_src0_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src0_endofpacket),                                   //          .endofpacket
		.sink14_ready         (crosser_014_out_ready),                                            //    sink14.ready
		.sink14_valid         (crosser_014_out_valid),                                            //          .valid
		.sink14_channel       (crosser_014_out_channel),                                          //          .channel
		.sink14_data          (crosser_014_out_data),                                             //          .data
		.sink14_startofpacket (crosser_014_out_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (crosser_014_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                  (clk_50_clk_clk),                                                   //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_004_src_valid),                                            //          .valid
		.src_data             (rsp_mux_004_src_data),                                             //          .data
		.src_channel          (rsp_mux_004_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_001_src2_ready),                                         //     sink0.ready
		.sink0_valid          (rsp_demux_001_src2_valid),                                         //          .valid
		.sink0_channel        (rsp_demux_001_src2_channel),                                       //          .channel
		.sink0_data           (rsp_demux_001_src2_data),                                          //          .data
		.sink0_startofpacket  (rsp_demux_001_src2_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src2_endofpacket),                                   //          .endofpacket
		.sink1_ready          (rsp_demux_003_src2_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_003_src2_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_003_src2_channel),                                       //          .channel
		.sink1_data           (rsp_demux_003_src2_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_003_src2_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src2_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_004_src2_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_004_src2_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_004_src2_channel),                                       //          .channel
		.sink2_data           (rsp_demux_004_src2_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_004_src2_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src2_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_005_src2_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_005_src2_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_005_src2_channel),                                       //          .channel
		.sink3_data           (rsp_demux_005_src2_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_005_src2_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src2_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_006_src2_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_006_src2_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_006_src2_channel),                                       //          .channel
		.sink4_data           (rsp_demux_006_src2_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_006_src2_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src2_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_007_src1_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_007_src1_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_007_src1_channel),                                       //          .channel
		.sink5_data           (rsp_demux_007_src1_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src1_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_008_src1_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_008_src1_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_008_src1_channel),                                       //          .channel
		.sink6_data           (rsp_demux_008_src1_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_008_src1_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src1_endofpacket),                                   //          .endofpacket
		.sink7_ready          (crosser_009_out_ready),                                            //     sink7.ready
		.sink7_valid          (crosser_009_out_valid),                                            //          .valid
		.sink7_channel        (crosser_009_out_channel),                                          //          .channel
		.sink7_data           (crosser_009_out_data),                                             //          .data
		.sink7_startofpacket  (crosser_009_out_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (crosser_009_out_endofpacket),                                      //          .endofpacket
		.sink8_ready          (crosser_011_out_ready),                                            //     sink8.ready
		.sink8_valid          (crosser_011_out_valid),                                            //          .valid
		.sink8_channel        (crosser_011_out_channel),                                          //          .channel
		.sink8_data           (crosser_011_out_data),                                             //          .data
		.sink8_startofpacket  (crosser_011_out_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (crosser_011_out_endofpacket),                                      //          .endofpacket
		.sink9_ready          (crosser_019_out_ready),                                            //     sink9.ready
		.sink9_valid          (crosser_019_out_valid),                                            //          .valid
		.sink9_channel        (crosser_019_out_channel),                                          //          .channel
		.sink9_data           (crosser_019_out_data),                                             //          .data
		.sink9_startofpacket  (crosser_019_out_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (crosser_019_out_endofpacket),                                      //          .endofpacket
		.sink10_ready         (crosser_013_out_ready),                                            //    sink10.ready
		.sink10_valid         (crosser_013_out_valid),                                            //          .valid
		.sink10_channel       (crosser_013_out_channel),                                          //          .channel
		.sink10_data          (crosser_013_out_data),                                             //          .data
		.sink10_startofpacket (crosser_013_out_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (crosser_013_out_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_013_src1_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_013_src1_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_013_src1_channel),                                       //          .channel
		.sink11_data          (rsp_demux_013_src1_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_013_src1_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src1_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_014_src1_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_014_src1_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_014_src1_channel),                                       //          .channel
		.sink12_data          (rsp_demux_014_src1_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_014_src1_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src1_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_015_src1_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_015_src1_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_015_src1_channel),                                       //          .channel
		.sink13_data          (rsp_demux_015_src1_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_015_src1_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src1_endofpacket),                                   //          .endofpacket
		.sink14_ready         (crosser_015_out_ready),                                            //    sink14.ready
		.sink14_valid         (crosser_015_out_valid),                                            //          .valid
		.sink14_channel       (crosser_015_out_channel),                                          //          .channel
		.sink14_data          (crosser_015_out_data),                                             //          .data
		.sink14_startofpacket (crosser_015_out_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (crosser_015_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_005 rsp_mux_005 (
		.clk                 (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                              //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                              //          .valid
		.src_data            (rsp_mux_005_src_data),                                               //          .data
		.src_channel         (rsp_mux_005_src_channel),                                            //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_006 rsp_mux_006 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                        //          .valid
		.src_data            (rsp_mux_006_src_data),                         //          .data
		.src_channel         (rsp_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_016_src3_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_016_src3_valid),                     //          .valid
		.sink0_channel       (rsp_demux_016_src3_channel),                   //          .channel
		.sink0_data          (rsp_demux_016_src3_data),                      //          .data
		.sink0_startofpacket (rsp_demux_016_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_016_src3_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_006 rsp_mux_007 (
		.clk                 (pll_0_outclk2_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                        //          .valid
		.src_data            (rsp_mux_007_src_data),                         //          .data
		.src_channel         (rsp_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_016_src4_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_016_src4_valid),                     //          .valid
		.sink0_channel       (rsp_demux_016_src4_channel),                   //          .channel
		.sink0_data          (rsp_demux_016_src4_data),                      //          .data
		.sink0_startofpacket (rsp_demux_016_src4_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_016_src4_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (166),
		.OUT_PKT_RESPONSE_STATUS_L     (165),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (167),
		.OUT_PKT_ORI_BURST_SIZE_H      (169),
		.OUT_ST_DATA_W                 (170),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                     //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                           //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                            //          .data
		.out_endofpacket      (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (201),
		.OUT_PKT_BURST_SIZE_L          (199),
		.OUT_PKT_RESPONSE_STATUS_H     (238),
		.OUT_PKT_RESPONSE_STATUS_L     (237),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (203),
		.OUT_PKT_BURST_TYPE_L          (202),
		.OUT_PKT_ORI_BURST_SIZE_L      (239),
		.OUT_PKT_ORI_BURST_SIZE_H      (241),
		.OUT_ST_DATA_W                 (242),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                              //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_003_src9_valid),                                                                    //      sink.valid
		.in_channel           (cmd_demux_003_src9_channel),                                                                  //          .channel
		.in_startofpacket     (cmd_demux_003_src9_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src9_endofpacket),                                                              //          .endofpacket
		.in_ready             (cmd_demux_003_src9_ready),                                                                    //          .ready
		.in_data              (cmd_demux_003_src9_data),                                                                     //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (201),
		.OUT_PKT_BURST_SIZE_L          (199),
		.OUT_PKT_RESPONSE_STATUS_H     (238),
		.OUT_PKT_RESPONSE_STATUS_L     (237),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (203),
		.OUT_PKT_BURST_TYPE_L          (202),
		.OUT_PKT_ORI_BURST_SIZE_L      (239),
		.OUT_PKT_ORI_BURST_SIZE_H      (241),
		.OUT_ST_DATA_W                 (242),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                              //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_004_src9_valid),                                                                    //      sink.valid
		.in_channel           (cmd_demux_004_src9_channel),                                                                  //          .channel
		.in_startofpacket     (cmd_demux_004_src9_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src9_endofpacket),                                                              //          .endofpacket
		.in_ready             (cmd_demux_004_src9_ready),                                                                    //          .ready
		.in_data              (cmd_demux_004_src9_data),                                                                     //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (63),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (66),
		.IN_PKT_BURST_SIZE_L           (64),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (68),
		.IN_PKT_BURST_TYPE_L           (67),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_005_src0_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_005_src0_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_005_src0_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src0_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_005_src0_ready),                                           //          .ready
		.in_data              (cmd_demux_005_src0_data),                                            //          .data
		.out_endofpacket      (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_mm_write_to_onchip_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (166),
		.IN_PKT_RESPONSE_STATUS_L      (165),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (167),
		.IN_PKT_ORI_BURST_SIZE_H       (169),
		.IN_ST_DATA_W                  (170),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                     //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                               //          .ready
		.in_data              (rsp_demux_src2_data),                                                                //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (198),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (201),
		.IN_PKT_BURST_SIZE_L           (199),
		.IN_PKT_RESPONSE_STATUS_H      (238),
		.IN_PKT_RESPONSE_STATUS_L      (237),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (203),
		.IN_PKT_BURST_TYPE_L           (202),
		.IN_PKT_ORI_BURST_SIZE_L       (239),
		.IN_PKT_ORI_BURST_SIZE_H       (241),
		.IN_ST_DATA_W                  (242),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                                           //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                                                    //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                                                  //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                                              //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                                                    //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                                     //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (198),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (201),
		.IN_PKT_BURST_SIZE_L           (199),
		.IN_PKT_RESPONSE_STATUS_H      (238),
		.IN_PKT_RESPONSE_STATUS_L      (237),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (203),
		.IN_PKT_BURST_TYPE_L           (202),
		.IN_PKT_ORI_BURST_SIZE_L       (239),
		.IN_PKT_ORI_BURST_SIZE_H       (241),
		.IN_ST_DATA_W                  (242),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                                           //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (rsp_demux_011_src1_valid),                                                                    //      sink.valid
		.in_channel           (rsp_demux_011_src1_channel),                                                                  //          .channel
		.in_startofpacket     (rsp_demux_011_src1_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src1_endofpacket),                                                              //          .endofpacket
		.in_ready             (rsp_demux_011_src1_ready),                                                                    //          .ready
		.in_data              (rsp_demux_011_src1_data),                                                                     //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (66),
		.OUT_PKT_BURST_SIZE_L          (64),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (68),
		.OUT_PKT_BURST_TYPE_L          (67),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_016_src2_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_016_src2_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_016_src2_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_016_src2_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_016_src2_ready),                                           //          .ready
		.in_data              (rsp_demux_016_src2_data),                                            //          .data
		.out_endofpacket      (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_s1_to_msgdma_0_mm_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src7_ready),                                         //            in.ready
		.in_valid          (cmd_demux_003_src7_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_003_src7_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src7_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_003_src7_channel),                                       //              .channel
		.in_data           (cmd_demux_003_src7_data),                                          //              .data
		.out_ready         (crosser_out_ready),                                                //           out.ready
		.out_valid         (crosser_out_valid),                                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_out_channel),                                              //              .channel
		.out_data          (crosser_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src8_ready),                                         //            in.ready
		.in_valid          (cmd_demux_003_src8_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_003_src8_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src8_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_003_src8_channel),                                       //              .channel
		.in_data           (cmd_demux_003_src8_data),                                          //              .data
		.out_ready         (crosser_001_out_ready),                                            //           out.ready
		.out_valid         (crosser_001_out_valid),                                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                          //              .channel
		.out_data          (crosser_001_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src10_ready),                                        //            in.ready
		.in_valid          (cmd_demux_003_src10_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_003_src10_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src10_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_003_src10_channel),                                      //              .channel
		.in_data           (cmd_demux_003_src10_data),                                         //              .data
		.out_ready         (crosser_002_out_ready),                                            //           out.ready
		.out_valid         (crosser_002_out_valid),                                            //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                          //              .channel
		.out_data          (crosser_002_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src14_ready),                                        //            in.ready
		.in_valid          (cmd_demux_003_src14_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_003_src14_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src14_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_003_src14_channel),                                      //              .channel
		.in_data           (cmd_demux_003_src14_data),                                         //              .data
		.out_ready         (crosser_003_out_ready),                                            //           out.ready
		.out_valid         (crosser_003_out_valid),                                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                          //              .channel
		.out_data          (crosser_003_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src7_ready),                                         //            in.ready
		.in_valid          (cmd_demux_004_src7_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_004_src7_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src7_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_004_src7_channel),                                       //              .channel
		.in_data           (cmd_demux_004_src7_data),                                          //              .data
		.out_ready         (crosser_004_out_ready),                                            //           out.ready
		.out_valid         (crosser_004_out_valid),                                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                          //              .channel
		.out_data          (crosser_004_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src8_ready),                                         //            in.ready
		.in_valid          (cmd_demux_004_src8_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_004_src8_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src8_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_004_src8_channel),                                       //              .channel
		.in_data           (cmd_demux_004_src8_data),                                          //              .data
		.out_ready         (crosser_005_out_ready),                                            //           out.ready
		.out_valid         (crosser_005_out_valid),                                            //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                          //              .channel
		.out_data          (crosser_005_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src10_ready),                                        //            in.ready
		.in_valid          (cmd_demux_004_src10_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_004_src10_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src10_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_004_src10_channel),                                      //              .channel
		.in_data           (cmd_demux_004_src10_data),                                         //              .data
		.out_ready         (crosser_006_out_ready),                                            //           out.ready
		.out_valid         (crosser_006_out_valid),                                            //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                          //              .channel
		.out_data          (crosser_006_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src14_ready),                                        //            in.ready
		.in_valid          (cmd_demux_004_src14_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_004_src14_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src14_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_004_src14_channel),                                      //              .channel
		.in_data           (cmd_demux_004_src14_data),                                         //              .data
		.out_ready         (crosser_007_out_ready),                                            //           out.ready
		.out_valid         (crosser_007_out_valid),                                            //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                          //              .channel
		.out_data          (crosser_007_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_009_src0_data),                                          //              .data
		.out_ready         (crosser_008_out_ready),                                            //           out.ready
		.out_valid         (crosser_008_out_valid),                                            //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                          //              .channel
		.out_data          (crosser_008_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_009_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_009_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_009_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_009_src1_data),                                          //              .data
		.out_ready         (crosser_009_out_ready),                                            //           out.ready
		.out_valid         (crosser_009_out_valid),                                            //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                          //              .channel
		.out_data          (crosser_009_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_010_src0_data),                                          //              .data
		.out_ready         (crosser_010_out_ready),                                            //           out.ready
		.out_valid         (crosser_010_out_valid),                                            //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                          //              .channel
		.out_data          (crosser_010_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_010_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_010_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_010_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_010_src1_data),                                          //              .data
		.out_ready         (crosser_011_out_ready),                                            //           out.ready
		.out_valid         (crosser_011_out_valid),                                            //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                          //              .channel
		.out_data          (crosser_011_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_012_src0_data),                                          //              .data
		.out_ready         (crosser_012_out_ready),                                            //           out.ready
		.out_valid         (crosser_012_out_valid),                                            //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                          //              .channel
		.out_data          (crosser_012_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_012_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_012_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_012_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_012_src1_data),                                          //              .data
		.out_ready         (crosser_013_out_ready),                                            //           out.ready
		.out_valid         (crosser_013_out_valid),                                            //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                          //              .channel
		.out_data          (crosser_013_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_016_src0_data),                                          //              .data
		.out_ready         (crosser_014_out_ready),                                            //           out.ready
		.out_valid         (crosser_014_out_valid),                                            //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                          //              .channel
		.out_data          (crosser_014_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (pll_0_outclk2_clk),                                                //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_016_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_016_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_016_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_016_src1_data),                                          //              .data
		.out_ready         (crosser_015_out_ready),                                            //           out.ready
		.out_valid         (crosser_015_out_valid),                                            //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                          //              .channel
		.out_data          (crosser_015_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (242),
		.BITS_PER_SYMBOL     (242),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_50_clk_clk),                                                                              //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                                           //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                // out_clk_reset.reset
		.in_ready          (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (hps_0_h2f_lw_axi_master_wr_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_016_out_ready),                                                                       //           out.ready
		.out_valid         (crosser_016_out_valid),                                                                       //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                                               //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                                                 //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                                                     //              .channel
		.out_data          (crosser_016_out_data),                                                                        //              .data
		.in_empty          (1'b0),                                                                                        //   (terminated)
		.in_error          (1'b0),                                                                                        //   (terminated)
		.out_empty         (),                                                                                            //   (terminated)
		.out_error         ()                                                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (242),
		.BITS_PER_SYMBOL     (242),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_50_clk_clk),                                                                              //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                                                           //       out_clk.clk
		.out_reset         (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                // out_clk_reset.reset
		.in_ready          (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (hps_0_h2f_lw_axi_master_rd_to_msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_017_out_ready),                                                                       //           out.ready
		.out_valid         (crosser_017_out_valid),                                                                       //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                                               //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                                                 //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                                                     //              .channel
		.out_data          (crosser_017_out_data),                                                                        //              .data
		.in_empty          (1'b0),                                                                                        //   (terminated)
		.in_error          (1'b0),                                                                                        //   (terminated)
		.out_empty         (),                                                                                            //   (terminated)
		.out_error         ()                                                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (pll_0_outclk2_clk),                                                                           //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                                              //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // out_clk_reset.reset
		.in_ready          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_018_out_ready),                                                                       //           out.ready
		.out_valid         (crosser_018_out_valid),                                                                       //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                                               //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                                                 //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                                                     //              .channel
		.out_data          (crosser_018_out_data),                                                                        //              .data
		.in_empty          (1'b0),                                                                                        //   (terminated)
		.in_error          (1'b0),                                                                                        //   (terminated)
		.out_empty         (),                                                                                            //   (terminated)
		.out_error         ()                                                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (134),
		.BITS_PER_SYMBOL     (134),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (pll_0_outclk2_clk),                                                                           //        in_clk.clk
		.in_reset          (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                                              //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // out_clk_reset.reset
		.in_ready          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (msgdma_0_descriptor_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_019_out_ready),                                                                       //           out.ready
		.out_valid         (crosser_019_out_valid),                                                                       //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                                               //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                                                 //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                                                     //              .channel
		.out_data          (crosser_019_out_data),                                                                        //              .data
		.in_empty          (1'b0),                                                                                        //   (terminated)
		.in_error          (1'b0),                                                                                        //   (terminated)
		.out_empty         (),                                                                                            //   (terminated)
		.out_error         ()                                                                                             //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_50_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_50_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                          //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_50_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_0_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (msgdma_0_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (msgdma_0_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_011 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (msgdma_0_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                     //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_50_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mipi_reset_n_s1_agent_rdata_fifo_out_data),                  //     in_0.data
		.in_0_valid     (mipi_reset_n_s1_agent_rdata_fifo_out_valid),                 //         .valid
		.in_0_ready     (mipi_reset_n_s1_agent_rdata_fifo_out_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_50_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mipi_pwdn_n_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (mipi_pwdn_n_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (mipi_pwdn_n_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_50_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (i2c_opencores_mipi_clock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_out_data),                         //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_out_valid),                        //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_out_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (onchip_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (onchip_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)             //         .error
	);

endmodule
