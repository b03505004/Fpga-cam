#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'MemoryDMA', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'MEMORYDMA_'.
 * The prefix is the slave descriptor.
 */
#define MEMORYDMA_COMPONENT_TYPE altera_avalon_sgdma
#define MEMORYDMA_COMPONENT_NAME MemoryDMA
#define MEMORYDMA_BASE 0x40
#define MEMORYDMA_SPAN 64
#define MEMORYDMA_END 0x7f
#define MEMORYDMA_IRQ 7
#define MEMORYDMA_ADDRESS_WIDTH 32
#define MEMORYDMA_ALWAYS_DO_MAX_BURST 1
#define MEMORYDMA_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define MEMORYDMA_AVALON_MM_BYTE_REORDER_MODE 0
#define MEMORYDMA_BURST_DATA_WIDTH 8
#define MEMORYDMA_BURST_TRANSFER 0
#define MEMORYDMA_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define MEMORYDMA_CHAIN_WRITEBACK_DATA_WIDTH 32
#define MEMORYDMA_COMMAND_FIFO_DATA_WIDTH 104
#define MEMORYDMA_CONTROL_DATA_WIDTH 8
#define MEMORYDMA_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define MEMORYDMA_CONTROL_SLAVE_DATA_WIDTH 32
#define MEMORYDMA_DESCRIPTOR_READ_BURST 0
#define MEMORYDMA_DESC_DATA_WIDTH 32
#define MEMORYDMA_HAS_READ_BLOCK 0
#define MEMORYDMA_HAS_WRITE_BLOCK 1
#define MEMORYDMA_IN_ERROR_WIDTH 0
#define MEMORYDMA_OUT_ERROR_WIDTH 0
#define MEMORYDMA_READ_BLOCK_DATA_WIDTH 8
#define MEMORYDMA_READ_BURSTCOUNT_WIDTH 4
#define MEMORYDMA_STATUS_TOKEN_DATA_WIDTH 24
#define MEMORYDMA_STREAM_DATA_WIDTH 8
#define MEMORYDMA_SYMBOLS_PER_BEAT 1
#define MEMORYDMA_UNALIGNED_TRANSFER 1
#define MEMORYDMA_WRITE_BLOCK_DATA_WIDTH 8
#define MEMORYDMA_WRITE_BURSTCOUNT_WIDTH 4

/*
 * Macros for device 'onchip', class 'altera_avalon_onchip_memory2'
 * Path to the device is from the master group 'MemoryDMA_m_write'.
 * The macros are prefixed with 'MEMORYDMA_M_WRITE_ONCHIP_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define MEMORYDMA_M_WRITE_ONCHIP_COMPONENT_TYPE altera_avalon_onchip_memory2
#define MEMORYDMA_M_WRITE_ONCHIP_COMPONENT_NAME onchip
#define MEMORYDMA_M_WRITE_ONCHIP_BASE 0x80000
#define MEMORYDMA_M_WRITE_ONCHIP_SPAN 170000
#define MEMORYDMA_M_WRITE_ONCHIP_END 0xa980f
#define MEMORYDMA_M_WRITE_ONCHIP_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 1
#define MEMORYDMA_M_WRITE_ONCHIP_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define MEMORYDMA_M_WRITE_ONCHIP_CONTENTS_INFO ""
#define MEMORYDMA_M_WRITE_ONCHIP_DUAL_PORT 0
#define MEMORYDMA_M_WRITE_ONCHIP_GUI_RAM_BLOCK_TYPE AUTO
#define MEMORYDMA_M_WRITE_ONCHIP_INIT_CONTENTS_FILE soc_system_onchip
#define MEMORYDMA_M_WRITE_ONCHIP_INIT_MEM_CONTENT 1
#define MEMORYDMA_M_WRITE_ONCHIP_INSTANCE_ID oc2
#define MEMORYDMA_M_WRITE_ONCHIP_NON_DEFAULT_INIT_FILE_ENABLED 0
#define MEMORYDMA_M_WRITE_ONCHIP_RAM_BLOCK_TYPE AUTO
#define MEMORYDMA_M_WRITE_ONCHIP_READ_DURING_WRITE_MODE DONT_CARE
#define MEMORYDMA_M_WRITE_ONCHIP_SINGLE_CLOCK_OP 0
#define MEMORYDMA_M_WRITE_ONCHIP_SIZE_MULTIPLE 1
#define MEMORYDMA_M_WRITE_ONCHIP_SIZE_VALUE 170000
#define MEMORYDMA_M_WRITE_ONCHIP_WRITABLE 1
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_GENERATE_DAT_SYM 1
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_GENERATE_HEX 1
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_HAS_BYTE_LANE 0
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define MEMORYDMA_M_WRITE_ONCHIP_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x20000
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0x2ffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'TERASIC_AUTO_FOCUS_0', class 'TERASIC_AUTO_FOCUS'
 * The macros are prefixed with 'TERASIC_AUTO_FOCUS_0_'.
 * The prefix is the slave descriptor.
 */
#define TERASIC_AUTO_FOCUS_0_COMPONENT_TYPE TERASIC_AUTO_FOCUS
#define TERASIC_AUTO_FOCUS_0_COMPONENT_NAME TERASIC_AUTO_FOCUS_0
#define TERASIC_AUTO_FOCUS_0_BASE 0x41000
#define TERASIC_AUTO_FOCUS_0_SPAN 32
#define TERASIC_AUTO_FOCUS_0_END 0x4101f

/*
 * Macros for device 'timer', class 'altera_avalon_timer'
 * The macros are prefixed with 'TIMER_'.
 * The prefix is the slave descriptor.
 */
#define TIMER_COMPONENT_TYPE altera_avalon_timer
#define TIMER_COMPONENT_NAME timer
#define TIMER_BASE 0x41020
#define TIMER_SPAN 32
#define TIMER_END 0x4103f
#define TIMER_IRQ 5
#define TIMER_ALWAYS_RUN 0
#define TIMER_COUNTER_SIZE 32
#define TIMER_FIXED_PERIOD 0
#define TIMER_FREQ 50000000
#define TIMER_LOAD_VALUE 49999
#define TIMER_MULT 0.001
#define TIMER_PERIOD 1
#define TIMER_PERIOD_UNITS ms
#define TIMER_RESET_OUTPUT 0
#define TIMER_SNAPSHOT 1
#define TIMER_TICKS_PER_SEC 1000
#define TIMER_TIMEOUT_PULSE_OUTPUT 0

/*
 * Macros for device 'i2c_opencores_camera', class 'i2c_opencores'
 * The macros are prefixed with 'I2C_OPENCORES_CAMERA_'.
 * The prefix is the slave descriptor.
 */
#define I2C_OPENCORES_CAMERA_COMPONENT_TYPE i2c_opencores
#define I2C_OPENCORES_CAMERA_COMPONENT_NAME i2c_opencores_camera
#define I2C_OPENCORES_CAMERA_BASE 0x41040
#define I2C_OPENCORES_CAMERA_SPAN 32
#define I2C_OPENCORES_CAMERA_END 0x4105f
#define I2C_OPENCORES_CAMERA_IRQ 3

/*
 * Macros for device 'i2c_opencores_mipi', class 'i2c_opencores'
 * The macros are prefixed with 'I2C_OPENCORES_MIPI_'.
 * The prefix is the slave descriptor.
 */
#define I2C_OPENCORES_MIPI_COMPONENT_TYPE i2c_opencores
#define I2C_OPENCORES_MIPI_COMPONENT_NAME i2c_opencores_mipi
#define I2C_OPENCORES_MIPI_BASE 0x41060
#define I2C_OPENCORES_MIPI_SPAN 32
#define I2C_OPENCORES_MIPI_END 0x4107f
#define I2C_OPENCORES_MIPI_IRQ 4

/*
 * Macros for device 'mipi_pwdn_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'MIPI_PWDN_N_'.
 * The prefix is the slave descriptor.
 */
#define MIPI_PWDN_N_COMPONENT_TYPE altera_avalon_pio
#define MIPI_PWDN_N_COMPONENT_NAME mipi_pwdn_n
#define MIPI_PWDN_N_BASE 0x41080
#define MIPI_PWDN_N_SPAN 16
#define MIPI_PWDN_N_END 0x4108f
#define MIPI_PWDN_N_BIT_CLEARING_EDGE_REGISTER 0
#define MIPI_PWDN_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MIPI_PWDN_N_CAPTURE 0
#define MIPI_PWDN_N_DATA_WIDTH 1
#define MIPI_PWDN_N_DO_TEST_BENCH_WIRING 0
#define MIPI_PWDN_N_DRIVEN_SIM_VALUE 0
#define MIPI_PWDN_N_EDGE_TYPE NONE
#define MIPI_PWDN_N_FREQ 50000000
#define MIPI_PWDN_N_HAS_IN 0
#define MIPI_PWDN_N_HAS_OUT 1
#define MIPI_PWDN_N_HAS_TRI 0
#define MIPI_PWDN_N_IRQ_TYPE NONE
#define MIPI_PWDN_N_RESET_VALUE 0

/*
 * Macros for device 'mipi_reset_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'MIPI_RESET_N_'.
 * The prefix is the slave descriptor.
 */
#define MIPI_RESET_N_COMPONENT_TYPE altera_avalon_pio
#define MIPI_RESET_N_COMPONENT_NAME mipi_reset_n
#define MIPI_RESET_N_BASE 0x41090
#define MIPI_RESET_N_SPAN 16
#define MIPI_RESET_N_END 0x4109f
#define MIPI_RESET_N_BIT_CLEARING_EDGE_REGISTER 0
#define MIPI_RESET_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MIPI_RESET_N_CAPTURE 0
#define MIPI_RESET_N_DATA_WIDTH 1
#define MIPI_RESET_N_DO_TEST_BENCH_WIRING 0
#define MIPI_RESET_N_DRIVEN_SIM_VALUE 0
#define MIPI_RESET_N_EDGE_TYPE NONE
#define MIPI_RESET_N_FREQ 50000000
#define MIPI_RESET_N_HAS_IN 0
#define MIPI_RESET_N_HAS_OUT 1
#define MIPI_RESET_N_HAS_TRI 0
#define MIPI_RESET_N_IRQ_TYPE NONE
#define MIPI_RESET_N_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x410a0
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x410af
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x410b0
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x410bf
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x410c0
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x410cf
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 255

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x410d0
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x410d7
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1528272090

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x410d8
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x410df
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'onchip', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_COMPONENT_NAME onchip
#define ONCHIP_BASE 0x80000
#define ONCHIP_SPAN 170000
#define ONCHIP_END 0xa980f
#define ONCHIP_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 1
#define ONCHIP_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_CONTENTS_INFO ""
#define ONCHIP_DUAL_PORT 0
#define ONCHIP_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_INIT_CONTENTS_FILE soc_system_onchip
#define ONCHIP_INIT_MEM_CONTENT 1
#define ONCHIP_INSTANCE_ID oc2
#define ONCHIP_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_RAM_BLOCK_TYPE AUTO
#define ONCHIP_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_SINGLE_CLOCK_OP 0
#define ONCHIP_SIZE_MULTIPLE 1
#define ONCHIP_SIZE_VALUE 170000
#define ONCHIP_WRITABLE 1
#define ONCHIP_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define ONCHIP_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip


#endif /* _ALTERA_HPS_0_H_ */
