// soc_system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_2 (
		output wire [7:0]  hps_0_f2h_sdram0_data_awid,                                         //                                        hps_0_f2h_sdram0_data.awid
		output wire [31:0] hps_0_f2h_sdram0_data_awaddr,                                       //                                                             .awaddr
		output wire [3:0]  hps_0_f2h_sdram0_data_awlen,                                        //                                                             .awlen
		output wire [2:0]  hps_0_f2h_sdram0_data_awsize,                                       //                                                             .awsize
		output wire [1:0]  hps_0_f2h_sdram0_data_awburst,                                      //                                                             .awburst
		output wire [1:0]  hps_0_f2h_sdram0_data_awlock,                                       //                                                             .awlock
		output wire [3:0]  hps_0_f2h_sdram0_data_awcache,                                      //                                                             .awcache
		output wire [2:0]  hps_0_f2h_sdram0_data_awprot,                                       //                                                             .awprot
		output wire        hps_0_f2h_sdram0_data_awvalid,                                      //                                                             .awvalid
		input  wire        hps_0_f2h_sdram0_data_awready,                                      //                                                             .awready
		output wire [7:0]  hps_0_f2h_sdram0_data_wid,                                          //                                                             .wid
		output wire [31:0] hps_0_f2h_sdram0_data_wdata,                                        //                                                             .wdata
		output wire [3:0]  hps_0_f2h_sdram0_data_wstrb,                                        //                                                             .wstrb
		output wire        hps_0_f2h_sdram0_data_wlast,                                        //                                                             .wlast
		output wire        hps_0_f2h_sdram0_data_wvalid,                                       //                                                             .wvalid
		input  wire        hps_0_f2h_sdram0_data_wready,                                       //                                                             .wready
		input  wire [7:0]  hps_0_f2h_sdram0_data_bid,                                          //                                                             .bid
		input  wire [1:0]  hps_0_f2h_sdram0_data_bresp,                                        //                                                             .bresp
		input  wire        hps_0_f2h_sdram0_data_bvalid,                                       //                                                             .bvalid
		output wire        hps_0_f2h_sdram0_data_bready,                                       //                                                             .bready
		output wire [7:0]  hps_0_f2h_sdram0_data_arid,                                         //                                                             .arid
		output wire [31:0] hps_0_f2h_sdram0_data_araddr,                                       //                                                             .araddr
		output wire [3:0]  hps_0_f2h_sdram0_data_arlen,                                        //                                                             .arlen
		output wire [2:0]  hps_0_f2h_sdram0_data_arsize,                                       //                                                             .arsize
		output wire [1:0]  hps_0_f2h_sdram0_data_arburst,                                      //                                                             .arburst
		output wire [1:0]  hps_0_f2h_sdram0_data_arlock,                                       //                                                             .arlock
		output wire [3:0]  hps_0_f2h_sdram0_data_arcache,                                      //                                                             .arcache
		output wire [2:0]  hps_0_f2h_sdram0_data_arprot,                                       //                                                             .arprot
		output wire        hps_0_f2h_sdram0_data_arvalid,                                      //                                                             .arvalid
		input  wire        hps_0_f2h_sdram0_data_arready,                                      //                                                             .arready
		input  wire [7:0]  hps_0_f2h_sdram0_data_rid,                                          //                                                             .rid
		input  wire [31:0] hps_0_f2h_sdram0_data_rdata,                                        //                                                             .rdata
		input  wire [1:0]  hps_0_f2h_sdram0_data_rresp,                                        //                                                             .rresp
		input  wire        hps_0_f2h_sdram0_data_rlast,                                        //                                                             .rlast
		input  wire        hps_0_f2h_sdram0_data_rvalid,                                       //                                                             .rvalid
		output wire        hps_0_f2h_sdram0_data_rready,                                       //                                                             .rready
		input  wire        pll_0_outclk2_clk,                                                  //                                                pll_0_outclk2.clk
		input  wire        alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset,             //             alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset, // hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0] alt_vip_cl_vfb_0_mem_master_rd_address,                             //                               alt_vip_cl_vfb_0_mem_master_rd.address
		output wire        alt_vip_cl_vfb_0_mem_master_rd_waitrequest,                         //                                                             .waitrequest
		input  wire [2:0]  alt_vip_cl_vfb_0_mem_master_rd_burstcount,                          //                                                             .burstcount
		input  wire        alt_vip_cl_vfb_0_mem_master_rd_read,                                //                                                             .read
		output wire [31:0] alt_vip_cl_vfb_0_mem_master_rd_readdata,                            //                                                             .readdata
		output wire        alt_vip_cl_vfb_0_mem_master_rd_readdatavalid,                       //                                                             .readdatavalid
		input  wire [31:0] alt_vip_cl_vfb_0_mem_master_wr_address,                             //                               alt_vip_cl_vfb_0_mem_master_wr.address
		output wire        alt_vip_cl_vfb_0_mem_master_wr_waitrequest,                         //                                                             .waitrequest
		input  wire [2:0]  alt_vip_cl_vfb_0_mem_master_wr_burstcount,                          //                                                             .burstcount
		input  wire [3:0]  alt_vip_cl_vfb_0_mem_master_wr_byteenable,                          //                                                             .byteenable
		input  wire        alt_vip_cl_vfb_0_mem_master_wr_write,                               //                                                             .write
		input  wire [31:0] alt_vip_cl_vfb_0_mem_master_wr_writedata                            //                                                             .writedata
	);

	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_waitrequest;   // alt_vip_cl_vfb_0_mem_master_rd_agent:av_waitrequest -> alt_vip_cl_vfb_0_mem_master_rd_translator:uav_waitrequest
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdata;      // alt_vip_cl_vfb_0_mem_master_rd_agent:av_readdata -> alt_vip_cl_vfb_0_mem_master_rd_translator:uav_readdata
	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_debugaccess;   // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_debugaccess -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_debugaccess
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_address;       // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_address -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_address
	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_read;          // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_read -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_read
	wire    [3:0] alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_byteenable;    // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_byteenable -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_byteenable
	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdatavalid; // alt_vip_cl_vfb_0_mem_master_rd_agent:av_readdatavalid -> alt_vip_cl_vfb_0_mem_master_rd_translator:uav_readdatavalid
	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_lock;          // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_lock -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_lock
	wire          alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_write;         // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_write -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_write
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_writedata;     // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_writedata -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_writedata
	wire    [4:0] alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_burstcount;    // alt_vip_cl_vfb_0_mem_master_rd_translator:uav_burstcount -> alt_vip_cl_vfb_0_mem_master_rd_agent:av_burstcount
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_waitrequest;   // alt_vip_cl_vfb_0_mem_master_wr_agent:av_waitrequest -> alt_vip_cl_vfb_0_mem_master_wr_translator:uav_waitrequest
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdata;      // alt_vip_cl_vfb_0_mem_master_wr_agent:av_readdata -> alt_vip_cl_vfb_0_mem_master_wr_translator:uav_readdata
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_debugaccess;   // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_debugaccess -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_debugaccess
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_address;       // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_address -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_address
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_read;          // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_read -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_read
	wire    [3:0] alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_byteenable;    // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_byteenable -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_byteenable
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdatavalid; // alt_vip_cl_vfb_0_mem_master_wr_agent:av_readdatavalid -> alt_vip_cl_vfb_0_mem_master_wr_translator:uav_readdatavalid
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_lock;          // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_lock -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_lock
	wire          alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_write;         // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_write -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_write
	wire   [31:0] alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_writedata;     // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_writedata -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_writedata
	wire    [4:0] alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_burstcount;    // alt_vip_cl_vfb_0_mem_master_wr_translator:uav_burstcount -> alt_vip_cl_vfb_0_mem_master_wr_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                             // rsp_mux_001:src_valid -> alt_vip_cl_vfb_0_mem_master_wr_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                              // rsp_mux_001:src_data -> alt_vip_cl_vfb_0_mem_master_wr_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                             // alt_vip_cl_vfb_0_mem_master_wr_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                           // rsp_mux_001:src_channel -> alt_vip_cl_vfb_0_mem_master_wr_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                     // rsp_mux_001:src_startofpacket -> alt_vip_cl_vfb_0_mem_master_wr_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                       // rsp_mux_001:src_endofpacket -> alt_vip_cl_vfb_0_mem_master_wr_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> hps_0_f2h_sdram0_data_agent:write_cp_valid
	wire  [111:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> hps_0_f2h_sdram0_data_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                                 // hps_0_f2h_sdram0_data_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> hps_0_f2h_sdram0_data_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> hps_0_f2h_sdram0_data_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> hps_0_f2h_sdram0_data_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> hps_0_f2h_sdram0_data_agent:read_cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> hps_0_f2h_sdram0_data_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                             // hps_0_f2h_sdram0_data_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> hps_0_f2h_sdram0_data_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> hps_0_f2h_sdram0_data_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> hps_0_f2h_sdram0_data_agent:read_cp_endofpacket
	wire          alt_vip_cl_vfb_0_mem_master_rd_agent_cp_valid;                                     // alt_vip_cl_vfb_0_mem_master_rd_agent:cp_valid -> router:sink_valid
	wire  [111:0] alt_vip_cl_vfb_0_mem_master_rd_agent_cp_data;                                      // alt_vip_cl_vfb_0_mem_master_rd_agent:cp_data -> router:sink_data
	wire          alt_vip_cl_vfb_0_mem_master_rd_agent_cp_ready;                                     // router:sink_ready -> alt_vip_cl_vfb_0_mem_master_rd_agent:cp_ready
	wire          alt_vip_cl_vfb_0_mem_master_rd_agent_cp_startofpacket;                             // alt_vip_cl_vfb_0_mem_master_rd_agent:cp_startofpacket -> router:sink_startofpacket
	wire          alt_vip_cl_vfb_0_mem_master_rd_agent_cp_endofpacket;                               // alt_vip_cl_vfb_0_mem_master_rd_agent:cp_endofpacket -> router:sink_endofpacket
	wire          alt_vip_cl_vfb_0_mem_master_wr_agent_cp_valid;                                     // alt_vip_cl_vfb_0_mem_master_wr_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] alt_vip_cl_vfb_0_mem_master_wr_agent_cp_data;                                      // alt_vip_cl_vfb_0_mem_master_wr_agent:cp_data -> router_001:sink_data
	wire          alt_vip_cl_vfb_0_mem_master_wr_agent_cp_ready;                                     // router_001:sink_ready -> alt_vip_cl_vfb_0_mem_master_wr_agent:cp_ready
	wire          alt_vip_cl_vfb_0_mem_master_wr_agent_cp_startofpacket;                             // alt_vip_cl_vfb_0_mem_master_wr_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          alt_vip_cl_vfb_0_mem_master_wr_agent_cp_endofpacket;                               // alt_vip_cl_vfb_0_mem_master_wr_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                               // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                              // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                            // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_write_rp_valid;                                        // hps_0_f2h_sdram0_data_agent:write_rp_valid -> router_002:sink_valid
	wire  [111:0] hps_0_f2h_sdram0_data_agent_write_rp_data;                                         // hps_0_f2h_sdram0_data_agent:write_rp_data -> router_002:sink_data
	wire          hps_0_f2h_sdram0_data_agent_write_rp_ready;                                        // router_002:sink_ready -> hps_0_f2h_sdram0_data_agent:write_rp_ready
	wire          hps_0_f2h_sdram0_data_agent_write_rp_startofpacket;                                // hps_0_f2h_sdram0_data_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_write_rp_endofpacket;                                  // hps_0_f2h_sdram0_data_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux:sink_valid
	wire  [111:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                              // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_read_rp_valid;                                         // hps_0_f2h_sdram0_data_agent:read_rp_valid -> router_003:sink_valid
	wire  [111:0] hps_0_f2h_sdram0_data_agent_read_rp_data;                                          // hps_0_f2h_sdram0_data_agent:read_rp_data -> router_003:sink_data
	wire          hps_0_f2h_sdram0_data_agent_read_rp_ready;                                         // router_003:sink_ready -> hps_0_f2h_sdram0_data_agent:read_rp_ready
	wire          hps_0_f2h_sdram0_data_agent_read_rp_startofpacket;                                 // hps_0_f2h_sdram0_data_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_read_rp_endofpacket;                                   // hps_0_f2h_sdram0_data_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                              // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_003_src_data;                                                               // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                              // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                                            // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                      // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                        // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_valid
	wire  [111:0] router_src_data;                                                                   // router:src_data -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_data
	wire          router_src_ready;                                                                  // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                // router:src_channel -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_sink_endofpacket
	wire  [111:0] alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_data;                               // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_ready
	wire    [1:0] alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_channel;                            // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_startofpacket;                      // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_endofpacket;                        // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                 // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_sink_endofpacket
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_valid;                              // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_valid -> alt_vip_cl_vfb_0_mem_master_rd_agent:rp_valid
	wire  [111:0] alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_data;                               // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_data -> alt_vip_cl_vfb_0_mem_master_rd_agent:rp_data
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_ready;                              // alt_vip_cl_vfb_0_mem_master_rd_agent:rp_ready -> alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_ready
	wire    [1:0] alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_channel;                            // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_channel -> alt_vip_cl_vfb_0_mem_master_rd_agent:rp_channel
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_startofpacket;                      // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_startofpacket -> alt_vip_cl_vfb_0_mem_master_rd_agent:rp_startofpacket
	wire          alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_endofpacket;                        // alt_vip_cl_vfb_0_mem_master_rd_limiter:rsp_src_endofpacket -> alt_vip_cl_vfb_0_mem_master_rd_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_src1_data;                                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                          // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                           // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                          // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                        // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                  // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                    // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                          // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [1:0] cmd_demux_001_src1_channel;                                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                              // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_src1_data;                                                               // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                              // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                            // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                      // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                        // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                          // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] rsp_demux_001_src1_data;                                                           // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [1:0] rsp_demux_001_src1_channel;                                                        // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                  // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                    // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [1:0] alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_valid_data;                             // alt_vip_cl_vfb_0_mem_master_rd_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) alt_vip_cl_vfb_0_mem_master_rd_translator (
		.clk                    (pll_0_outclk2_clk),                                                                 //                       clk.clk
		.reset                  (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (alt_vip_cl_vfb_0_mem_master_rd_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (alt_vip_cl_vfb_0_mem_master_rd_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (alt_vip_cl_vfb_0_mem_master_rd_burstcount),                                         //                          .burstcount
		.av_read                (alt_vip_cl_vfb_0_mem_master_rd_read),                                               //                          .read
		.av_readdata            (alt_vip_cl_vfb_0_mem_master_rd_readdata),                                           //                          .readdata
		.av_readdatavalid       (alt_vip_cl_vfb_0_mem_master_rd_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_write               (1'b0),                                                                              //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                              //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) alt_vip_cl_vfb_0_mem_master_wr_translator (
		.clk                    (pll_0_outclk2_clk),                                                                 //                       clk.clk
		.reset                  (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (alt_vip_cl_vfb_0_mem_master_wr_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (alt_vip_cl_vfb_0_mem_master_wr_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (alt_vip_cl_vfb_0_mem_master_wr_burstcount),                                         //                          .burstcount
		.av_byteenable          (alt_vip_cl_vfb_0_mem_master_wr_byteenable),                                         //                          .byteenable
		.av_write               (alt_vip_cl_vfb_0_mem_master_wr_write),                                              //                          .write
		.av_writedata           (alt_vip_cl_vfb_0_mem_master_wr_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_read                (1'b0),                                                                              //               (terminated)
		.av_readdata            (),                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (96),
		.PKT_QOS_L                 (96),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alt_vip_cl_vfb_0_mem_master_rd_agent (
		.clk                   (pll_0_outclk2_clk),                                                                 //       clk.clk
		.reset                 (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (alt_vip_cl_vfb_0_mem_master_rd_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_valid),                                     //        cp.valid
		.cp_data               (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_data),                                      //          .data
		.cp_startofpacket      (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_ready),                                     //          .ready
		.rp_valid              (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_data),                               //          .data
		.rp_channel            (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (96),
		.PKT_QOS_L                 (96),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alt_vip_cl_vfb_0_mem_master_wr_agent (
		.clk                   (pll_0_outclk2_clk),                                                                 //       clk.clk
		.reset                 (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (alt_vip_cl_vfb_0_mem_master_wr_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_valid),                                     //        cp.valid
		.cp_data               (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_data),                                      //          .data
		.cp_startofpacket      (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                             //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (99),
		.PKT_THREAD_ID_L             (99),
		.PKT_RESPONSE_STATUS_H       (108),
		.PKT_RESPONSE_STATUS_L       (107),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (106),
		.PKT_CACHE_L                 (103),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (102),
		.PKT_PROTECTION_L            (100),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (81),
		.PKT_BYTE_CNT_H              (80),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (97),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (98),
		.PKT_DEST_ID_L               (98),
		.PKT_ORI_BURST_SIZE_L        (109),
		.PKT_ORI_BURST_SIZE_H        (111),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (112),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (14),
		.READ_ACCEPTANCE_CAPABILITY  (14)
	) hps_0_f2h_sdram0_data_agent (
		.aclk                   (pll_0_outclk2_clk),                                                   //        clock_sink.clk
		.aresetn                (~hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                               //           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                               //                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                                //                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                             //                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                       //                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                         //                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                   //          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                   //                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                    //                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                                 //                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                           //                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                             //                  .endofpacket
		.read_rp_ready          (hps_0_f2h_sdram0_data_agent_read_rp_ready),                           //           read_rp.ready
		.read_rp_valid          (hps_0_f2h_sdram0_data_agent_read_rp_valid),                           //                  .valid
		.read_rp_data           (hps_0_f2h_sdram0_data_agent_read_rp_data),                            //                  .data
		.read_rp_startofpacket  (hps_0_f2h_sdram0_data_agent_read_rp_startofpacket),                   //                  .startofpacket
		.read_rp_endofpacket    (hps_0_f2h_sdram0_data_agent_read_rp_endofpacket),                     //                  .endofpacket
		.write_rp_ready         (hps_0_f2h_sdram0_data_agent_write_rp_ready),                          //          write_rp.ready
		.write_rp_valid         (hps_0_f2h_sdram0_data_agent_write_rp_valid),                          //                  .valid
		.write_rp_data          (hps_0_f2h_sdram0_data_agent_write_rp_data),                           //                  .data
		.write_rp_startofpacket (hps_0_f2h_sdram0_data_agent_write_rp_startofpacket),                  //                  .startofpacket
		.write_rp_endofpacket   (hps_0_f2h_sdram0_data_agent_write_rp_endofpacket),                    //                  .endofpacket
		.awid                   (hps_0_f2h_sdram0_data_awid),                                          // altera_axi_master.awid
		.awaddr                 (hps_0_f2h_sdram0_data_awaddr),                                        //                  .awaddr
		.awlen                  (hps_0_f2h_sdram0_data_awlen),                                         //                  .awlen
		.awsize                 (hps_0_f2h_sdram0_data_awsize),                                        //                  .awsize
		.awburst                (hps_0_f2h_sdram0_data_awburst),                                       //                  .awburst
		.awlock                 (hps_0_f2h_sdram0_data_awlock),                                        //                  .awlock
		.awcache                (hps_0_f2h_sdram0_data_awcache),                                       //                  .awcache
		.awprot                 (hps_0_f2h_sdram0_data_awprot),                                        //                  .awprot
		.awvalid                (hps_0_f2h_sdram0_data_awvalid),                                       //                  .awvalid
		.awready                (hps_0_f2h_sdram0_data_awready),                                       //                  .awready
		.wid                    (hps_0_f2h_sdram0_data_wid),                                           //                  .wid
		.wdata                  (hps_0_f2h_sdram0_data_wdata),                                         //                  .wdata
		.wstrb                  (hps_0_f2h_sdram0_data_wstrb),                                         //                  .wstrb
		.wlast                  (hps_0_f2h_sdram0_data_wlast),                                         //                  .wlast
		.wvalid                 (hps_0_f2h_sdram0_data_wvalid),                                        //                  .wvalid
		.wready                 (hps_0_f2h_sdram0_data_wready),                                        //                  .wready
		.bid                    (hps_0_f2h_sdram0_data_bid),                                           //                  .bid
		.bresp                  (hps_0_f2h_sdram0_data_bresp),                                         //                  .bresp
		.bvalid                 (hps_0_f2h_sdram0_data_bvalid),                                        //                  .bvalid
		.bready                 (hps_0_f2h_sdram0_data_bready),                                        //                  .bready
		.arid                   (hps_0_f2h_sdram0_data_arid),                                          //                  .arid
		.araddr                 (hps_0_f2h_sdram0_data_araddr),                                        //                  .araddr
		.arlen                  (hps_0_f2h_sdram0_data_arlen),                                         //                  .arlen
		.arsize                 (hps_0_f2h_sdram0_data_arsize),                                        //                  .arsize
		.arburst                (hps_0_f2h_sdram0_data_arburst),                                       //                  .arburst
		.arlock                 (hps_0_f2h_sdram0_data_arlock),                                        //                  .arlock
		.arcache                (hps_0_f2h_sdram0_data_arcache),                                       //                  .arcache
		.arprot                 (hps_0_f2h_sdram0_data_arprot),                                        //                  .arprot
		.arvalid                (hps_0_f2h_sdram0_data_arvalid),                                       //                  .arvalid
		.arready                (hps_0_f2h_sdram0_data_arready),                                       //                  .arready
		.rid                    (hps_0_f2h_sdram0_data_rid),                                           //                  .rid
		.rdata                  (hps_0_f2h_sdram0_data_rdata),                                         //                  .rdata
		.rresp                  (hps_0_f2h_sdram0_data_rresp),                                         //                  .rresp
		.rlast                  (hps_0_f2h_sdram0_data_rlast),                                         //                  .rlast
		.rvalid                 (hps_0_f2h_sdram0_data_rvalid),                                        //                  .rvalid
		.rready                 (hps_0_f2h_sdram0_data_rready),                                        //                  .rready
		.awuser                 (),                                                                    //       (terminated)
		.aruser                 ()                                                                     //       (terminated)
	);

	soc_system_mm_interconnect_2_router router (
		.sink_ready         (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_ready),          //      sink.ready
		.sink_valid         (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_valid),          //          .valid
		.sink_data          (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_data),           //          .data
		.sink_startofpacket (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (alt_vip_cl_vfb_0_mem_master_rd_agent_cp_endofpacket),    //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                      //       clk.clk
		.reset              (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_2_router router_001 (
		.sink_ready         (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_ready),          //      sink.ready
		.sink_valid         (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_valid),          //          .valid
		.sink_data          (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_data),           //          .data
		.sink_startofpacket (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (alt_vip_cl_vfb_0_mem_master_wr_agent_cp_endofpacket),    //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                      //       clk.clk
		.reset              (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (hps_0_f2h_sdram0_data_agent_write_rp_ready),                         //      sink.ready
		.sink_valid         (hps_0_f2h_sdram0_data_agent_write_rp_valid),                         //          .valid
		.sink_data          (hps_0_f2h_sdram0_data_agent_write_rp_data),                          //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_agent_write_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_agent_write_rp_endofpacket),                   //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                               //       src.ready
		.src_valid          (router_002_src_valid),                                               //          .valid
		.src_data           (router_002_src_data),                                                //          .data
		.src_channel        (router_002_src_channel),                                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (hps_0_f2h_sdram0_data_agent_read_rp_ready),                          //      sink.ready
		.sink_valid         (hps_0_f2h_sdram0_data_agent_read_rp_valid),                          //          .valid
		.sink_data          (hps_0_f2h_sdram0_data_agent_read_rp_data),                           //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_agent_read_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_agent_read_rp_endofpacket),                    //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                               //       src.ready
		.src_valid          (router_003_src_valid),                                               //          .valid
		.src_data           (router_003_src_data),                                                //          .data
		.src_channel        (router_003_src_channel),                                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (98),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (14),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) alt_vip_cl_vfb_0_mem_master_rd_limiter (
		.clk                    (pll_0_outclk2_clk),                                            //       clk.clk
		.reset                  (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                             //          .valid
		.cmd_sink_data          (router_src_data),                                              //          .data
		.cmd_sink_channel       (router_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (alt_vip_cl_vfb_0_mem_master_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (pll_0_outclk2_clk),                                            //        clk.clk
		.reset              (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (alt_vip_cl_vfb_0_mem_master_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_0_outclk2_clk),                                      //       clk.clk
		.reset              (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                   //      sink.ready
		.sink_channel       (router_001_src_channel),                                 //          .channel
		.sink_data          (router_001_src_data),                                    //          .data
		.sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_001_src_valid),                                   //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                               //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                               //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                             //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                              //          .valid
		.src_data            (cmd_mux_001_src_data),                                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                               //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                             //          .channel
		.sink0_data          (cmd_demux_src1_data),                                                //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                         //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux_001 rsp_demux (
		.clk                (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                               //      sink.ready
		.sink_channel       (router_002_src_channel),                                             //          .channel
		.sink_data          (router_002_src_data),                                                //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                       //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                         //          .endofpacket
		.sink_valid         (router_002_src_valid),                                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux_001 rsp_demux_001 (
		.clk                (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                               //      sink.ready
		.sink_channel       (router_003_src_channel),                                             //          .channel
		.sink_data          (router_003_src_data),                                                //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                       //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                         //          .endofpacket
		.sink_valid         (router_003_src_valid),                                               //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                     //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                           //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                           //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                            //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                         //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk2_clk),                                      //       clk.clk
		.reset               (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_src_valid),                                      //          .valid
		.src_data            (rsp_mux_src_data),                                       //          .data
		.src_channel         (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                   //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                   //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                 //          .channel
		.sink0_data          (rsp_demux_src0_data),                                    //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                             //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                               //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk2_clk),                                      //       clk.clk
		.reset               (alt_vip_cl_vfb_0_mem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                  //          .valid
		.src_data            (rsp_mux_001_src_data),                                   //          .data
		.src_channel         (rsp_mux_001_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                   //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                   //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                 //          .channel
		.sink0_data          (rsp_demux_src1_data),                                    //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                             //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                               //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                               //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                             //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                          //          .endofpacket
	);

endmodule
